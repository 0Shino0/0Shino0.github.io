<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Diffing算法原理</title>
      <link href="/2022/05/16/diffing/"/>
      <url>/2022/05/16/diffing/</url>
      
        <content type="html"><![CDATA[<h3 id="Diffing算法"><a href="#Diffing算法" class="headerlink" title="Diffing算法"></a>Diffing算法</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><pre class=" language-jsx"><code class="language-jsx">    <span class="token operator">-</span> 当对比两棵树时，React 首先比较两棵树的根节点。不同类型的根节点元素会有不同的形态。    对比不同类型的元素    <span class="token operator">-</span> 当根节点为不同类型的元素时，React 会拆卸原有的树并且建立起新的树。举个例子，当一个    元素从 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> 变成 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span>，从 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Article</span><span class="token punctuation">></span></span> 变成 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comment</span><span class="token punctuation">></span></span>，或从 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">></span></span> 变成 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 都会触发一个完整的重建流程。    <span class="token operator">-</span> 当卸载一棵树时，对应的 DOM 节点也会被销毁。组件实例将执行 <span class="token function">componentWillUnmoun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    方法。当建立一棵新的树时，对应的 DOM 节点会被创建以及插入到 DOM 中。组件实例将执行     <span class="token function">UNSAFE_componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，紧接着 <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法。所有与之前的    树相关联的 state 也会被销毁。</code></pre><p>———— <a href="https://zh-hans.reactjs.org/docs/reconciliation.html#the-diffing-algorithm">react文档</a></p><hr><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><ul><li><p>1:  diffing 算法最小颗粒度是标签  (只可以精确到标签的位置)<br>  diffing 算法最小颗粒度是标签  (会一直递归循环遍历下去)</p></li><li><p>2：只要状态改变就会触发 render 函数 (实时修改状态)  (状态修改就会触发render函数);<br>在React&#x2F;Vue 中 key属性有什么作用？ (index 的内部原理是什么？)</p></li></ul><h5 id="渲染中key的选择"><a href="#渲染中key的选择" class="headerlink" title="渲染中key的选择"></a>渲染中key的选择</h5><ul><li><p>3.开发中如何选择key?:</p><ul><li><p>​     1.最好使用每条数据的唯一标识作为key,比如id、手机号、身份证号、学号等唯一值。</p></li><li><p>​     2.如果确定只是简单的展示数据,用index也是可以的。</p></li></ul><pre class=" language-jsx"><code class="language-jsx">  经典面试题<span class="token punctuation">:</span>        <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> react<span class="token operator">/</span>vue中的key有什么作用<span class="token operator">?</span> <span class="token punctuation">(</span>key的内部原理是什么<span class="token operator">?</span><span class="token punctuation">)</span>        <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 为什么遍历列表时<span class="token punctuation">,</span> key最好不要用index<span class="token operator">?</span>                <span class="token number">1</span><span class="token punctuation">.</span>虚拟DOM中key的作用            <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>简单的说<span class="token punctuation">:</span>key是虚拟DOM对象的标识<span class="token punctuation">,</span>在更新显示时key起着极其重要的作用。                        <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>详细的说<span class="token punctuation">:</span>当状态中的数据发生变化时<span class="token punctuation">,</span> react会根据【新数据】生成【新的虚拟DOM】<span class="token punctuation">,</span>            随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较<span class="token punctuation">,</span>比较规则如下<span class="token punctuation">:</span>                                    a<span class="token punctuation">.</span>I旧虚拟DOM中找到了与新虚拟DOM相同的key<span class="token punctuation">:</span>                                <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>若虚拟DOM中内容没变<span class="token punctuation">,</span>直接使用之前的真实DOM                                <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>若虚拟DOM中内容变了<span class="token punctuation">,</span>则生成新的真实DOM<span class="token punctuation">,</span>随后替换掉页面中之前的真实DOM                                                b<span class="token punctuation">.</span>旧虚拟DOM中未找到与新虚拟DOM相同的key                        根据数据创建新的真实DOM<span class="token punctuation">,</span>随后渲染到到页面                                <span class="token number">2</span><span class="token punctuation">.</span>用index作为key可能会引发的问题<span class="token punctuation">:</span>                    <span class="token number">1</span><span class="token punctuation">.</span>若对数据进行<span class="token punctuation">:</span>逆序添加、逆序删除等破坏顺序操作<span class="token punctuation">:</span>                            会产生没有必要的真实DOM更新<span class="token operator">==</span><span class="token operator">></span>界面效果没问题<span class="token punctuation">,</span>但效率低。                                        <span class="token number">2</span><span class="token punctuation">.</span>如果结构中还包含输入类的DOM<span class="token punctuation">:</span>                            会产生错误DOM更新<span class="token operator">==</span><span class="token operator">></span>界面有问题。                                                <span class="token number">3</span><span class="token punctuation">,</span>注意<span class="token operator">!</span>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作<span class="token punctuation">,</span>                    仅用于渲染列表用于展示<span class="token punctuation">,</span>使用index作为key是没有问题的。</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础</title>
      <link href="/2022/05/15/react/"/>
      <url>/2022/05/15/react/</url>
      
        <content type="html"><![CDATA[<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>React 是一个用于构建用户界面的 JavaScript 库。</p><ul><li>声明式： React 让创建交互式 UI 变得轻松。为应用程序中的每个状态设计简单的视图，当你的数据发生变化时，React 将有效地更新和呈现正确的组件。声明式视图使您的代码更可预测、更易于理解和更易于调试。</li><li>基于组件：构建管理其状态的封装组件，然后将它们组合成复杂的 UI。由于组件逻辑是用 JavaScript 而不是模板编写的，因此您可以轻松地通过应用程序传递丰富的数据并将状态保持在 DOM 之外。</li><li>一次学习，随处编写：我们不对您的技术堆栈的其余部分做出假设，因此您可以在 React 中开发新功能而无需重写现有代码。React 还可以使用 Node 在服务器上呈现，并使用React Native为移动应用程序提供动力。</li></ul><h4 id="jsx语法规则"><a href="#jsx语法规则" class="headerlink" title="jsx语法规则:"></a>jsx语法规则:</h4><ul><li><p>1.创建虚拟DOM时，不要用引号</p></li><li><p>2.标签中想混入js表达式，需要用{}包裹</p></li><li><p>3.根标签只能有一个</p></li><li><p>4.标签必须闭合</p></li><li><p>5.样式的类名，不要用class，必须用className</p></li><li><p>6.内联的样式要用下列形式 ( 双括号会报错所以采取图片的形式展现 )<br><img src="/2022/05/15/react/style.png" alt="style"></p></li><li><p>7.标签可以随意的编写:</p><ul><li><p>(1).若标签首字母是【小写】的,则react会尝试将当前的jsx标签对应成一个html标签</p><ul><li><p>​                  若对应成了,直接渲染,展示</p></li><li><p>​                  若无法对应,直接报错</p></li></ul></li></ul></li><li><p>​(1).若标签首字母是【大写】的,react会查找Haha组件的定义的位置</p><ul><li><p>​若找见了,直接渲染Haha组件</p></li><li><p>​若未找见,报错(Haha is not defined)</p></li></ul></li></ul><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><h5 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h5><pre class=" language-jsx"><code class="language-jsx">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">//1.定义组件(函数式组件)</span>            <span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处的this是undefined，因为经过babel的编译后，开启了严格模式。</span>            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是用函数定义的组件（适用于【简单组件】的定义）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">function</span> <span class="token function">MyComponent2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处的this是undefined，因为经过babel的编译后，开启了严格模式。</span>            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是用函数定义的组件（适用于【简单组件】的定义<span class="token number">2</span>）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.渲染组件到页面</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent2</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/*             执行了ReactDOM.render后，发生了什么？            1.React发现了&lt;MyComponent/>标签，去寻找MyComponent组件定义的位置，发现MyComponent是用函数定义的。            2.React调用MyComponent并获取MyComponent返回的虚拟DOM，随后转为真实DOM，随后渲染到页面。            */</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h5><pre class=" language-jsx"><code class="language-jsx">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">//定义组件</span>        <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//render是放在哪里的？ —————— MyComponent的原型对象上，是给MyComponent的实例对象用的。</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//MyComponent的实例对象 &lt;==> MyComponent组件实例对象</span>                <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是用类定义的组件（适用于【复杂组件】的定义）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//渲染组件到页面</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*                 执行了ReactDOM.render后，发生了什么？                        1.React发现了&lt;MyComponent/>标签，去寻找MyComponent组件定义的位置，发现MyComponent是用类定义的。                        2.React new了一个MyComponent实例对象--m                        3.通过m调用到了MyComponent原型上的render方法，并获取到了返回的虚拟DOM，随后转为真实DOM，放在页面。        */</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="生命周期相关"><a href="#生命周期相关" class="headerlink" title="生命周期相关"></a>生命周期相关</h5><p><strong>旧</strong>(react16.4之前)</p><ol><li>初始化阶段: 由ReactDOM.render()触发—初次渲染<br>   1.constructor()<br> 2.componentWillMount()<br> 3.render()<br> 4.&#x3D;&#x3D;componentDidMount() ====&gt; 常用<br>                        一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息&#x3D;&#x3D;</li><li>更新阶段: 由组件内部this.setSate()或父组件render触发this.forceUpdate()<br>1.shouldComponentUpdate() 注意：强制更新不走“阀门”<br>2.componentWillUpdate()<br>3.&#x3D;&#x3D;render()&#x3D;&#x3D;<br>  componentDidUpdate()</li><li>卸载组件: 由ReactDOM.unmountComponentAtNode()触发<ol><li>&#x3D;&#x3D;componentWillUnmount()  ====&gt; 常用&#x3D;&#x3D;</li></ol></li></ol><p>  &#x3D;&#x3D;一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息&#x3D;&#x3D;</p><p><img src="/2022/05/15/react/react-life-old.png" alt="react生命周期(旧)"></p><ul><li><strong>新</strong>(react16.4之后)</li></ul><p><img src="/2022/05/15/react/react-life-new.png" alt="react生命周期(新)"></p><h5 id="组件总结"><a href="#组件总结" class="headerlink" title="组件总结"></a>组件总结</h5><ul><li><strong>最重要的三组件</strong><ul><li>componentDidMount() </li><li>render()</li><li>componentWillUnmount()</li></ul></li></ul><p> <strong>组件的三大属性</strong></p><ul><li><p><strong>state</strong></p><ul><li><p>用来存储状态</p></li><li><p>严重注意:<strong>状态(state)中值是不能直接修改的</strong>！！！下面这一行就是直接修改</p></li><li><pre class=" language-jsx"><code class="language-jsx">  <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>需要通过this.setState()方法来修改</strong></p></li></ul></li><li><p><strong>props</strong></p><ul><li>用于接收标签中传递的数据</li></ul></li><li><p><strong>refs</strong></p><ul><li><p>简介：对标签的一种标识，用于获取数据。类式标签中的id</p></li><li><p><strong>三种形式</strong></p><ul><li>字符串形式:</li></ul><pre class=" language-jsx"><code class="language-jsx">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击按钮提示输入<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>回调形式(推荐):</strong></li></ul><pre class=" language-jsx"><code class="language-jsx">    <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">;</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> c<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"点击按钮提示输入"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><ul><li>createRef形式:</li></ul><pre class=" language-jsx"><code class="language-jsx">    container1 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//创建一个createRef() ，只能存储一个ref</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>container1<span class="token punctuation">}</span></span><span class="token attr-name">;</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击按钮提示输入<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData<span class="token punctuation">}</span></span><span class="token attr-name">;</span><span class="token punctuation">></span></span>点我提示数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>container2<span class="token punctuation">}</span></span><span class="token attr-name">;</span> <span class="token attr-name">onBlur</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData2<span class="token punctuation">}</span></span><span class="token attr-name">;</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击焦点提示输入<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><h5 id="React中的事件处理"><a href="#React中的事件处理" class="headerlink" title="React中的事件处理"></a>React中的事件处理</h5><ul><li>通过onXxx属性指定事件处理函数(注意大小写)</li></ul><p>​         1)React使用的是自定义(合成)事件, 而不是使用的原生DOM事件      ———————— 为了更好的兼容性</p><p>​         2)React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ———————— 为了提高效率</p><ul><li>通过event.target得到发生事件的DOM元素对象</li></ul><h5 id="受控组件和非受控组件"><a href="#受控组件和非受控组件" class="headerlink" title="受控组件和非受控组件"></a>受控组件和非受控组件</h5><ul><li><p>非受控的概念：现用现取</p></li><li><p>受控的概念：组件中输入类的DOM，随着用户的输入，将输入的值维护到state中</p></li></ul><p><strong>高阶函数_函数的柯里化</strong></p><ul><li><strong>高阶函数</strong>：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数</li></ul><p>​        1.若A函数，接收的<strong>参数是一个函数</strong>，那么A就可以称之为高阶函数。</p><p>​        2.若A函数，调用的<strong>返回值依然是一个函数</strong>，那么A就可以称之为高阶函数。</p><p>​        常见的有：Promise、setTimeout、arr.forEach()…..</p><ul><li><strong>函数的柯里化</strong>：通过函数调用继续返回函数的方式，实现<strong>多次接收参数最后 统一处理 的函数编码形式</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2022/05/15/webpack/"/>
      <url>/2022/05/15/webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles，它们均为静态资源，用于展示你的内容。————<a href="https://webpack.docschina.org/concepts/">webpack文档</a></li></ul><h4 id="简单的配置文件"><a href="#简单的配置文件" class="headerlink" title="简单的配置文件"></a>简单的配置文件</h4><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/*     1. 该文件是webpack的配置文件，所有的webpack的任务、用到的loader、plugins都要配置在这里    2. 该文件要符合CJS模块化规范     */</span>    <span class="token comment" spellcheck="true">// 引入Node中一个内置的path模块，专门用于解决路劲问题</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>resolve<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 引入html-webpack-plugin ，用于加工html文件</span>    <span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 引入</span>    <span class="token comment" spellcheck="true">// const Webpack = require('webpack');</span>    <span class="token comment" spellcheck="true">// const WebpackDevServer = require('webpack-dev-server');</span>    <span class="token comment" spellcheck="true">//css  相关loader配置</span>    <span class="token keyword">const</span> baseCssLoader <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 使用CJS的模块化规范，暴露一个对象，该对象就是webpack的详细配置对象（规则）</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//工作模式</span>    entry<span class="token punctuation">:</span> <span class="token string">'./src/js/app.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//入口</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//出口（输出）</span>        path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//输出文件的路径</span>        filename<span class="token punctuation">:</span> <span class="token string">'js/app.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//输出文件名字</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// module.rules中配置的一个一个的loader</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// 配置解析css</span>        <span class="token punctuation">{</span><span class="token punctuation">;</span>            test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">...</span>baseCssLoader<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置解析less</span>        <span class="token punctuation">{</span><span class="token punctuation">;</span>            test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token operator">...</span>baseCssLoader<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// creates style nodes from JS strings and translates CSS into CommonJS</span>            <span class="token string">'less-loader'</span>  <span class="token comment" spellcheck="true">// compiles Less to CSS</span>        <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置解析样式中的图片</span>        <span class="token punctuation">{</span><span class="token punctuation">;</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|gif|bmp)$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">;</span>            loader<span class="token punctuation">:</span><span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">;</span>                outputPath<span class="token punctuation">:</span><span class="token string">'imgs'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//配置图片加工后，，存放的位置</span>                <span class="token comment" spellcheck="true">// publicPath:'/build/imgs'  //配置图片引入时前缀的路径</span>                name<span class="token punctuation">:</span><span class="token string">'[hash:5].[ext]'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//配置生成图片的名字+后缀</span>                limit<span class="token punctuation">:</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span>    <span class="token comment" spellcheck="true">//图片大小，小于8kb时，将图片转为base64编码 </span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置解析html中的图片</span>        <span class="token punctuation">{</span><span class="token punctuation">;</span>            test<span class="token punctuation">:</span><span class="token regex">/\.(html)$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'html-loader'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置解析字体文件</span>        <span class="token punctuation">{</span><span class="token punctuation">;</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/\.(html|less|css|js|json|png|jpg|bmp|gif)$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">;</span>            loader<span class="token punctuation">:</span><span class="token string">'file-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">;</span>                outputPath<span class="token punctuation">:</span><span class="token string">'media'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//配置图片加工后，，存放的位置</span>                <span class="token comment" spellcheck="true">// publicPath:'/build/imgs'  //配置图片引入时前缀的路径</span>                name<span class="token punctuation">:</span><span class="token string">'[hash:5].[ext]'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//配置生成图片的名字+后缀</span>                            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// plugins中专门用于配置插件，插件必须经过实例化这一环节</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        template<span class="token punctuation">:</span><span class="token string">'./src/index.html'</span>  <span class="token comment" spellcheck="true">//模板的位置</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 配置devServer</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// static:'./build',</span>        port<span class="token punctuation">:</span><span class="token number">5500</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//开启服务器的端口号</span>        open<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//自动打开浏览器</span>        hot<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token comment" spellcheck="true">//模块热更新(热膜替换)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2022/05/15/es6/"/>
      <url>/2022/05/15/es6/</url>
      
        <content type="html"><![CDATA[<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><ul><li><p>定义：<strong>箭头函数表达式</strong>的语法比<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function">函数表达式</a>更简洁，并且没有自己的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">this</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments">arguments</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super">super</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target">new.target</a>。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</p></li><li><p>特点：</p><pre class=" language-js"><code class="language-js">  <span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">this</span> 的值是静态的 <span class="token punctuation">(</span>等于 外层作用域下<span class="token keyword">this</span>的值<span class="token punctuation">)</span>  <span class="token keyword">let</span> getName2 <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  getName2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token number">2</span><span class="token punctuation">.</span>不能作为构造函数使用  <span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">3</span><span class="token punctuation">.</span>不能使用 arguments  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//arguments是一个伪数组</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">4</span><span class="token punctuation">.</span>箭头函数简写  一 不写小括号，当新参有且只有一个的时候  二 不写花括号<span class="token punctuation">,</span> 当代码体只有一条语句的时候<span class="token punctuation">,</span> 并且语句的执行结果为函数返回值的 <span class="token punctuation">(</span>如果不  <span class="token keyword">let</span> pow <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h5 id="…运算符"><a href="#…运算符" class="headerlink" title="…运算符"></a>…运算符</h5><pre class=" language-js"><code class="language-js">      <span class="token comment" spellcheck="true">// ...运算符    是扩展运算符</span>         <span class="token comment" spellcheck="true">//  打包和拆包    要么是数组要么是对象</span>         <span class="token comment" spellcheck="true">// 对于打包只有一种情况是打包并且打包只能打包数组</span></code></pre><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 数组的打包和拆包</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 拆包     数组可以直接拆包</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数组打包</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 对象只能拆包     不能直接拆包</span>      <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          name<span class="token punctuation">:</span><span class="token string">'zly'</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span><span class="token number">33</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token operator">...</span>obj<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><h5 id="暴露模块的方式"><a href="#暴露模块的方式" class="headerlink" title="暴露模块的方式"></a>暴露模块的方式</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//使用【分别暴露】</span>  <span class="token keyword">export</span> <span class="token keyword">const</span> teacher1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'强哥'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">const</span> teacher2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'歌神'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用【统一暴露】</span>  <span class="token keyword">const</span> stu1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'王宇'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'宇航'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>stu1<span class="token punctuation">,</span>stu2<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用【默认暴露】</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      school<span class="token punctuation">:</span><span class="token string">'尚硅谷'</span><span class="token punctuation">,</span>      address<span class="token punctuation">:</span><span class="token string">'宏福科技园'</span><span class="token punctuation">,</span>      subjects<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'前端'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'大数据'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="引入暴露模块方式"><a href="#引入暴露模块方式" class="headerlink" title="引入暴露模块方式"></a>引入暴露模块方式</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//引入【分别暴露】的模块</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>data<span class="token punctuation">,</span>showData<span class="token punctuation">,</span>showMsg<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./module1'</span>    <span class="token comment" spellcheck="true">//引入【分别暴露】的模块+重命名</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>data <span class="token keyword">as</span> data2<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./module2'</span>    <span class="token comment" spellcheck="true">//引入【分别暴露】+ 打包引入</span>  <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> module1 <span class="token keyword">from</span> <span class="token string">'./module1'</span>    <span class="token comment" spellcheck="true">//引入【统一暴露】支持上面三种引入方式</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>school <span class="token keyword">as</span> d<span class="token punctuation">,</span>getLaoliu<span class="token punctuation">,</span>person<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./module3'</span>    <span class="token comment" spellcheck="true">//引入【默认暴露】</span>  <span class="token keyword">import</span> module4 <span class="token keyword">from</span> <span class="token string">'./module4'</span>    <span class="token comment" spellcheck="true">//引入多种暴露方式的模块</span>  <span class="token keyword">import</span> module5<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">;</span>teacher1<span class="token punctuation">,</span>teacher2<span class="token punctuation">,</span>stu1<span class="token punctuation">,</span>stu2<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./module5'</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX_AXIOS</title>
      <link href="/2022/05/14/ajax-axios/"/>
      <url>/2022/05/14/ajax-axios/</url>
      
        <content type="html"><![CDATA[<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>Asynchronous JavaScript + XML（异步JavaScript和XML）, 其本身不是一种新技术，而是一个在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的‘新’方法，包括: HTML 或 XHTML,  CSS, JavaScript, DOM, XML, XSLT, 以及最重要的 XMLHttpRequest。当使用结合了这些技术的AJAX模型以后， 网页应用能够快速地将增量更新呈现在用户界面上，而不需要重载（刷新）整个页面。这使得程序能够更快地回应用户的操作。<br>尽管X在Ajax中代表XML, 但由于JSON的许多优势，比如更加轻量以及作为Javascript的一部分，目前JSON的使用比XML更加普遍。JSON和XML都被用于在Ajax模型中打包信息。<br>————<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX">MDN文档</a></li><li><strong>实现界面无刷新获取数据</strong></li></ul><h4 id="利用Ajax发送请求"><a href="#利用Ajax发送请求" class="headerlink" title="利用Ajax发送请求"></a>利用Ajax发送请求</h4><h5 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h5><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 发送 ajax请求</span>        <span class="token comment" spellcheck="true">//1.创建Xhr实例对象</span>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定监听</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//  函数体</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                    content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;h3></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;&lt;/h3>`</span></span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 2.指定发送请求的: method、url、参数</span>        <span class="token comment" spellcheck="true">/*            1.形如：key=value&amp;key=value 就是query参数是surlencoded编码            2.形如：/xx/xxx/老刘/18 就是params参数        */</span>        <span class="token comment" spellcheck="true">// xhr.open('GET', 'http:///127.0.0.1:8080/test_get?name=老刘&amp;age=18');   // 携带query参数</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http:///127.0.0.1:8080/test_get2/老刘/18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>携带                <span class="token comment" spellcheck="true">// 3.发送请求</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h5><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 发送 ajax请求</span>        <span class="token comment" spellcheck="true">//1.创建Xhr实例对象</span>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定监听</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//  函数体</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                    content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;h3></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;&lt;/h3>`</span></span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 2.指定发送请求的: method、url、参数</span>        <span class="token comment" spellcheck="true">/*            1.形如：key=value&amp;key=value 就是query参数是surlencoded编码            2.形如：/xx/xxx/老刘/18 就是params参数        */</span>        <span class="token comment" spellcheck="true">// xhr.open('GET', 'http:///127.0.0.1:8080/test_get?name=老刘&amp;age=18'); //携带query参数</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http:///127.0.0.1:8080/test_post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>携带                <span class="token comment" spellcheck="true">//追加响应头用于标识携带参数的编码形式---urlencoded</span>        <span class="token comment" spellcheck="true">// xhr.setRequestHeader('Content-type','application/x-www-form-urlencoded')</span>        <span class="token comment" spellcheck="true">//追加响应头用于标识携带参数的编码形式---json</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span><span class="token string">'application/json'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 3.发送请求</span>        <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'老刘'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// xhr.send('name=老刘&amp;age=18'); //携带urlencoded编码形式的请求体参数</span>        <span class="token comment" spellcheck="true">//send中的参数 为请求体参数</span>        <span class="token comment" spellcheck="true">//send中 参数的 编码格式为 urlencoded</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//携带json编码形式的请求参数</span></code></pre><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><ul><li>Axios 是一个基于 promise 网络请求库，作用于node.js 和浏览器中。 它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul><li>从浏览器创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF<br>————<a href="https://axios-http.com/zh/docs/intro">Axios官网</a></li></ul></li></ul><h4 id="三种参数"><a href="#三种参数" class="headerlink" title="三种参数"></a>三种参数</h4><ul><li><code>params</code><br>  参数是路径的一部分，并且这个参数只能在url路径当中出现</li><li><code>query</code><br> 查询参数<br> 这个参数可以出现在url当中也可以 出现在配置项当中配置url当中是 ? 后面的 key &#x3D; value &amp;key &#x3D;value在配置项当中 配置项的名称叫做params</li><li><code>body</code><br>  请求体参数<br>  通常用在post和put当中，只能在配置对象当中配置;<br>  data这个配置项就是你的body请求体参数,这个数据必须是一个对象</li></ul><p>注意：</p><ul><li>携带query参数时，编写的配置项叫做params</li><li>携带params参数时，就需要自己手动拼在url中<h4 id="利用Axios发送请求"><a href="#利用Axios发送请求" class="headerlink" title="利用Axios发送请求"></a>利用Axios发送请求</h4></li></ul><h5 id="get请求-1"><a href="#get请求-1" class="headerlink" title="get请求"></a>get请求</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向给定ID的用户发起请求</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理成功情况</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理错误情况</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 总是会执行</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 上述请求也可以按以下方式完成（可选）</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      ID<span class="token punctuation">:</span> <span class="token number">12345</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 总是会执行</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 支持async/await用法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="post请求-1"><a href="#post请求-1" class="headerlink" title="post请求"></a>post请求</h5><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Flintstone'</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>发起多个并发请求<span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345/permissions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> acct <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> perm <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><h4 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h4><pre class=" language-js"><code class="language-js">    axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 添加请求拦截器</code></pre><p>1.是什么？</p><ul><li>在真正<strong>发请求前</strong>执行的一个回调函数</li></ul><p>2.作用：</p><ul><li>对所有的请求做统一的处理：追加请求头、追加参数、界面loading提示等等</li></ul><h4 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h4><pre class=" language-js"><code class="language-js">    axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 添加响应拦截器</code></pre><p>1.是什么？</p><ul><li>得到响应之后执行的一组回调函数</li></ul><p>2.作用：</p><p>​- <strong>若请求成功，对成功的数据进行处理</strong></p><p>​- <strong>若请求失败，对失败进行统一的操作</strong></p><h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><ul><li>async awiat  是使用<strong>同步代码实现异步效果</strong></li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>async 函数返回的是promise</li><li>async 函数返回值不看 return <strong>必然返回promise</strong></li><li>async  函数返回的promise是成功还是失败   看return</li><li>return的结果代表promise是成功还是失败</li></ul><p>1、如果return是一个非promise的值   代表async函数返回的promise是成功<br>    - 成功的结果是return的结果</p><p>2、如果返回的是成功的promise   代表async函数返回的promise函数返- mise也是成功的（他们不是一个promise）</p><ul><li>成功的结果是return的promise的成功结果</li></ul><p>3、如果返回的是失败的promise   代表async函数返回的promise是失败的</p><ul><li>失败的原因是return的promise失败的原因</li></ul><p>4、如果throw出错误，代表async函数返回的promise是失败的</p><ul><li>失败的原因是抛出的错误的原因</li></ul><h4 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h4><h5 id="1、配置代理服务器"><a href="#1、配置代理服务器" class="headerlink" title="1、配置代理服务器"></a>1、配置代理服务器</h5><pre class=" language-js"><code class="language-js">    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//只用与开发环境</span>      proxy<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token string">'api'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//支队请求路由以/api开头的其你去进行代理转发</span>          target<span class="token punctuation">:</span><span class="token string">'http://gmall-h5-api.atguigu.cn'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//转发的目标url</span>          changeOrigin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//支持跨域</span>          <span class="token comment" spellcheck="true">// pathRewrite:{;'^/api':''};     // 后台接口都有/api</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="2、jsonp解决跨域"><a href="#2、jsonp解决跨域" class="headerlink" title="2、jsonp解决跨域"></a>2、jsonp解决跨域</h5><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 1.创建script节点</span>         <span class="token keyword">const</span> scriptNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 2.给节点指定src属性（请求地址）</span>         scriptNode<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:8080/test_jsonp?callback=peiqi'</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 3.将节点放入界面</span>         document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span>         window<span class="token punctuation">.</span>peiqi <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//5.移除已经使用过的script节点</span>         document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//总结：Jsonp解决跨域，本质上是避开了 xhr 不受同源策略的限制 利用</span>    <span class="token comment" spellcheck="true">//script 标签发起请求，拿到数据</span></code></pre><h5 id="3、cors解决跨域（后端）"><a href="#3、cors解决跨域（后端）" class="headerlink" title="3、cors解决跨域（后端）"></a>3、cors解决跨域（后端）</h5><pre class=" language-js"><code class="language-js">  node<span class="token punctuation">.</span>js    <span class="token comment" spellcheck="true">//在后端服务器 添加特殊响应头</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Expose-Origin'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//引入cors包</span>    <span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//可以直接为所有请求添加特殊响应头</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/2022/05/14/http/"/>
      <url>/2022/05/14/http/</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。这个简单模型是早期Web成功的有功之臣，因为它使开发和部署非常地直截了当。                    ————百度</li></ul><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h5 id="利用http模块创建一个简单的服务器"><a href="#利用http模块创建一个简单的服务器" class="headerlink" title="利用http模块创建一个简单的服务器"></a>利用http模块创建一个简单的服务器</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 1.引入 http 模块</span>  <span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.调用方法 创建服务器对象</span>  <span class="token comment" spellcheck="true">/*       * request 请求报文的封装对象      * response 响应报文的封装对象  */</span>  <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello HTTP server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.监听端口  启动服务</span>  <span class="token comment" spellcheck="true">/*       端口号    计算的服务端口窗口  总共65536个  8000 3000 9000 8080      默认端口 80       ctrl + c 停止服务  */</span>  server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器已经启动，端口 8000 坚挺中......'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  </code></pre><h5 id="将服务器拆分为-不同组件"><a href="#将服务器拆分为-不同组件" class="headerlink" title="将服务器拆分为 不同组件"></a>将服务器拆分为 不同组件</h5><p>  主函数 <strong><code>app.js</code></strong></p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">server</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 回调函数 <strong><code>callback.js</code></strong></p><pre class=" language-js"><code class="language-js">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello NPM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p> 服务对象 <strong><code>server.js</code></strong></p><pre class=" language-js"><code class="language-js">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.调用方法 创建服务器对象</span>        <span class="token comment" spellcheck="true">/*         * request 请求报文的封装对象        * response 响应报文的封装对象        */</span>        <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./callback'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> serverCb <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./serverOkCallback'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.监听端口  启动服务</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> serverCb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>  监听端口 <strong><code>serverOkCallback.js</code></strong></p><pre class=" language-js"><code class="language-js">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器已经启动，端口坚挺中......'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>  在<code>server.js</code>中我们可以做很多事情</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 获取请求报文  GET    /s?wd=关键字 (URL)   HTTP/1.1</span>    <span class="token comment" spellcheck="true">// 1.请求的类型</span>    <span class="token comment" spellcheck="true">// console.log(request.method);</span>    <span class="token comment" spellcheck="true">// console.log(request.method);</span>    <span class="token comment" spellcheck="true">// 2.请求的URL</span>    <span class="token comment" spellcheck="true">// console.log(request.url);</span>    <span class="token comment" spellcheck="true">// 3.HTTP协议版本</span>    <span class="token comment" spellcheck="true">// console.log(request.httpVersion);</span>    <span class="token comment" spellcheck="true">// 4.获取URL中的路径部分</span>    <span class="token comment" spellcheck="true">// 二 调用方法获取参数</span>    <span class="token comment" spellcheck="true">// console.log(url.parse(request.url).pathname); </span>    <span class="token comment" spellcheck="true">// 5.获取查询字符串</span>    <span class="token comment" spellcheck="true">// console.log(url.parse(request.url,true).query);</span>    <span class="token comment" spellcheck="true">// 6.请求头信息</span>    <span class="token comment" spellcheck="true">// console.log(request.headers);</span></code></pre><p>  也可以添加事件</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 提取请求体数据 POST请求</span>    <span class="token comment" spellcheck="true">// 1.声明一个字符串变量</span>    <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.绑定data事件</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>chunk <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 拼接</span>        body <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3.绑定end事件</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 qs 对象的方法</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'body recevie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2022/05/14/zheng-ze-biao-da-shi/"/>
      <url>/2022/05/14/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/05/14/zheng-ze-biao-da-shi/zhengze.png" alt="zhengze"></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript</title>
      <link href="/2022/05/13/javascript/"/>
      <url>/2022/05/13/javascript/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>简介：对常用的JavaScript数组方法和字符串方法以及遍历相关的 <code>for</code> <code>for in</code> <code>for of</code> <code>forEach</code>进行总结,为React和Vue的学习打基础,同时自己方便复习。</p><h4 id="遍历相关"><a href="#遍历相关" class="headerlink" title="遍历相关"></a>遍历相关</h4><pre class=" language-js"><code class="language-js">        <span class="token operator">-</span> <span class="token keyword">for</span>          最基本的循环    用来专门遍历数组的      可以使用<span class="token keyword">break</span>和<span class="token keyword">continue</span>        <span class="token operator">-</span> <span class="token keyword">for</span> <span class="token keyword">in</span>       专门用来遍历对象的属性的，这个属性能遍历到还是遍历不到要看这个属性是不是          ​     <span class="token comment" spellcheck="true">// for in 效率最低，因为除了遍历自身以外还要遍历原型</span>        <span class="token operator">-</span> <span class="token keyword">for</span> <span class="token keyword">of</span>                 <span class="token operator">-</span> ​     <span class="token comment" spellcheck="true">// 专门遍历可迭代的数据  ...  (能用可迭代，就用三点) </span>          <span class="token operator">-</span> ​     <span class="token comment" spellcheck="true">// 数组有迭代器</span>          <span class="token operator">-</span> ​     <span class="token comment" spellcheck="true">// 对象没有</span>        <span class="token operator">-</span> forEach      是一个数组的方法，效率极高  但是不可以使用<span class="token keyword">break</span>和<span class="token keyword">continue</span></code></pre><h5 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h5><h5 id="every"><a href="#every" class="headerlink" title="every"></a>every</h5><h5 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">  <span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> radix<span class="token punctuation">)</span>   解析一个字符串并返回指定基数的十进制整数， radix 是<span class="token number">2</span><span class="token operator">-</span><span class="token number">36</span>之间的整数，表示被解析字符串的基数。</code></pre></li><li><p>语法参数</p><pre class=" language-js"><code class="language-js">    <span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span>    参数        string    <span class="token function">要被解析的值。如果参数不是一个字符串，则将其转换为字符串</span><span class="token punctuation">(</span>使用  ToString 抽象操作<span class="token punctuation">)</span>。字符串开头的空白符将会被忽略。    radix 可选    从 <span class="token number">2</span> 到 <span class="token number">36</span>，表示字符串的基数。例如指定 <span class="token number">16</span> 表示被解析值是十六进制数。请注意，<span class="token number">10</span>不是默认值！文章后面的描述解释了当参数 radix 不传时该函数的具体行为。</code></pre></li><li><p>返回值</p><pre class=" language-js"><code class="language-js">    从给定的字符串中解析出的一个整数。        或者 <span class="token number">NaN</span>，当        radix 小于 <span class="token number">2</span> 或大于 <span class="token number">36</span> ，或        第一个非空格字符不能转换为数字。        <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将'123'看作5进制数，返回十进制数38 => 1*5^2 + 2*5^1 + 3*5^0 = 38</span></code></pre></li></ul><h5 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">  方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 <span class="token template-string"><span class="token string">`true`</span></span>，否则返回 <span class="token template-string"><span class="token string">`false`</span></span>。</code></pre><ul><li>语法以及参数</li></ul><pre class=" language-js"><code class="language-js">  arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>valueToFind<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>  valueToFind      需要查找的元素值。            备注：使用 <span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>比较字符串和字符时是区分大小写的。        fromIndex 可选      从fromIndex 索引处开始查找 valueToFind。如果为负值，则按升序从 array<span class="token punctuation">.</span>length <span class="token operator">+</span> fromIndex 的索引开始搜 （即使从末尾开始往前跳 fromIndex 的绝对值个索引，然后往后搜寻）。默认为 <span class="token number">0</span>。</code></pre><ul><li>返回值</li></ul><pre class=" language-js"><code class="language-js">  返回一个布尔值 Boolean 。  <span class="token punctuation">]</span>如果在数组中（或 fromIndex 指定的范围中）找到了 valueToFind，则返回 <span class="token boolean">true</span>，否则返回 <span class="token boolean">false</span>。  <span class="token number">0</span> 的值将全部视为相等，与符号无关（即 <span class="token operator">-</span><span class="token number">0</span> 与 <span class="token number">0</span> 和 <span class="token operator">+</span><span class="token number">0</span> 相等），  但 <span class="token boolean">false</span> 不被认为与 <span class="token number">0</span> 相等。  备注： <span class="token function">技术上来讲，includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 使用 零值相等 算法来确定是否找到给定的元素。</code></pre><ul><li>示例</li></ul><pre class=" language-js"><code class="language-js">  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre></li><li><p>注意</p></li></ul><pre class=" language-js"><code class="language-js">  fromIndex 大于等于数组长度  如果 fromIndex 大于等于数组的长度，则将直接返回 <span class="token boolean">false</span>，且不搜索该数组。  计算出的索引小于 <span class="token number">0</span>  如果 fromIndex 为负值，计算出的索引将作为开始搜索searchElement的位置。如果计算出的索引小于 <span class="token number">0</span>，则整个数组都会被搜索。  作为通用方法的 <span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法有意设计为通用方法。它不要求<span class="token keyword">this</span>值是数组对象，所以它可以被用于其他类型的对象 <span class="token punctuation">(</span>比如类数组对象<span class="token punctuation">)</span>。下面的例子展示了 在函数的 arguments 对象上调用的 <span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法。</code></pre><h5 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">   <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</code></pre></li><li><p>语法以及参数</p><pre class=" language-js"><code class="language-js">  arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>    参数    callback      在数组每一项上执行的函数，接收 <span class="token number">3</span> 个参数：        element          当前遍历到的元素。      index可选          当前遍历到的索引。      array可选          数组本身。    thisArg可选      执行回调时用作<span class="token keyword">this</span> 的对象。 </code></pre></li><li><p>返回值</p><pre class=" language-js"><code class="language-js">  数组中第一个满足所提供测试函数的元素的值，否则返回 undefined。</code></pre></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find">MDN</a></p></li></ul><h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h5><ul><li><p><strong>描述</strong></p><pre class=" language-js"><code class="language-js">  <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF<span class="token number">-16</span>代码单元值序列时构建的</code></pre></li><li><p><strong>语法及参数</strong></p><pre class=" language-js"><code class="language-js">  arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span>compareFunction<span class="token punctuation">]</span><span class="token punctuation">)</span>    参数  compareFunction 可选      用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。        firstEl          第一个用于比较的元素。      secondEl          第二个用于比较的元素。    返回值  排序后的数组。请注意，数组已原地排序，并且不进行复制。</code></pre></li><li><p><strong>注意</strong></p><pre class=" language-js"><code class="language-js">  也会影响原数组，默认会按照Unicode编码进行排序    带有compareFunction 参数时<span class="token punctuation">,</span>      如果 <span class="token function">compareFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 小于 <span class="token number">0</span> ，那么 a 会被排列到 b 之前；      如果 <span class="token function">compareFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 等于 <span class="token number">0</span> ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 <span class="token number">2003</span> 年之前的版本）；      如果 <span class="token function">compareFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 大于 <span class="token number">0</span> ， b 会被排列到 a 之前。      <span class="token function">compareFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。            、、、通俗理解      比较函数应该具有两个参数 a 和 b，其返回值如下：  若 a 小于 b，即 a <span class="token operator">-</span> b 小于零，则返回一个小于零的值，数组将按照升序排列。  若 a 等于 b，则返回 <span class="token number">0</span>。  若 a 大于 b<span class="token punctuation">,</span> 即 a <span class="token operator">-</span> b 大于零，则返回一个大于零的值，数组将按照降序排列。</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">MDN</a></p><p><a href="https://www.cnblogs.com/saifei/p/9043821.html">简单使用</a></p></li></ul><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><ul><li><p><strong>描述</strong></p><pre class=" language-js"><code class="language-js">  <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法创建一个新的数组，新数组中的元素是通过<span class="token operator">==</span>检查指定数组中符合条件<span class="token operator">==</span>的所有元素。</code></pre></li><li><p><strong>语法以及参数</strong></p><pre class=" language-js"><code class="language-js">  array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span>   必须。函数，数组中的每个元素都会执行这个函数  函数参数<span class="token punctuation">:</span>      currentValue 必须。当前元素的值      index 可选。当前元素的索引值      arr 可选。当前元素属于的数组对象  thisValue 可选。对象作为该执行回调时使用，传递给函数，用作 <span class="token string">"this"</span> 的值。      如果省略了 thisValue ，<span class="token string">"this"</span> 的值为 <span class="token string">"undefined"</span>    返回值  一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</code></pre></li><li><p><strong>总结</strong></p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//用作过滤器</span>  array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>过滤条件<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span></code></pre></li><li><p><strong>注意：</strong> filter() 不会对空数组进行检测。</p></li><li><p><strong>注意：</strong> filter() 不会改变原始数组。</p></li></ul><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><ul><li><p>语法:</p><pre class=" language-js"><code class="language-js">  <span class="token operator">-</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>preValue<span class="token punctuation">,</span> current<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>initialValue<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 箭头函数</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 回调函数</span>    <span class="token function">reduce</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 内联回调函数</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span>    arr<span class="token punctuation">:</span>当前操作的数组    <span class="token operator">==</span><span class="token operator">**</span>preValue<span class="token operator">**</span><span class="token punctuation">:</span><span class="token operator">**</span>第一次<span class="token operator">**</span>执行回调时为给定的<span class="token operator">**</span>初始值initialValue<span class="token operator">**</span><span class="token punctuation">,</span><span class="token operator">**</span>以后是上一次执行回调时的返回值<span class="token operator">**</span>。<span class="token operator">==</span>    ​<span class="token operator">==</span>备注<span class="token punctuation">:</span>若<span class="token operator">**</span>没有传入initialValue<span class="token operator">**</span><span class="token punctuation">,</span>则第一次的preValue值是数组中<span class="token operator">**</span>第一个元素的值<span class="token operator">**</span>。<span class="token operator">==</span>     <span class="token operator">**</span>current 表示当前正在处理的元素<span class="token punctuation">;</span><span class="token operator">**</span>    index 表示当前正在处理的数组元素的索引<span class="token punctuation">,</span>若传入了initialValue值<span class="token punctuation">,</span>则为<span class="token number">0</span><span class="token punctuation">,</span>否则为<span class="token number">1</span><span class="token punctuation">;</span>    array  <span class="token function">当前操作的数组</span><span class="token punctuation">(</span>就是arr<span class="token punctuation">)</span>    <span class="token operator">**</span>initialValue 表示初始值。一般做数学时设置为<span class="token number">0</span><span class="token punctuation">,</span>若为筛选最值可以不传。</code></pre></li><li><p><strong>用于数据分析</strong></p><pre class=" language-js"><code class="language-js">      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 数组求和 </span>    <span class="token comment" spellcheck="true">/* const x = arr.reduce((preValue,current)=>{;      console.log(preValue,current);      return preValue+current    };)    console.log(x); */</span>    <span class="token comment" spellcheck="true">// 数组中偶数的和----(条件求和)</span>    <span class="token comment" spellcheck="true">// const x = arr.reduce((preValue,current)=>preValue+(current % 2 === 0 ? current:0),0)</span>    <span class="token comment" spellcheck="true">// console.log(x);</span>    <span class="token comment" spellcheck="true">//数组中偶数有几个---(条件统计)</span>    <span class="token comment" spellcheck="true">// const x = arr.reduce((preValue,current)=>preValue+(current%2===0 ? 1:0),0)</span>    <span class="token comment" spellcheck="true">// console.log(x);</span>    <span class="token comment" spellcheck="true">// 数组中所有偶数的积</span>    <span class="token comment" spellcheck="true">// const x = arr.reduce((preValue,current)=>preValue*(current%2===0 ? current:1),1)</span>    <span class="token comment" spellcheck="true">// console.log(x);</span>    <span class="token comment" spellcheck="true">// 数组中最小值----(筛选最值)</span>    <span class="token operator">/</span><span class="token operator">*</span> <span class="token keyword">const</span> x <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>preValue<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>preValue<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>preValue<span class="token punctuation">,</span>current<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>map</strong></p><ul><li><p><strong>描述</strong></p><pre class=" language-js"><code class="language-js">  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</code></pre></li><li><p><strong>语法</strong></p><pre class=" language-js"><code class="language-js">  <span class="token keyword">var</span> new_array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//为new_array返回元素</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>参数</strong></p><pre class=" language-js"><code class="language-js">  <span class="token template-string"><span class="token string">`callback`</span></span>  生成新数组元素的函数，使用三个参数：       <span class="token template-string"><span class="token string">`currentValue`</span></span>        <span class="token template-string"><span class="token string">`callback`</span></span> 数组中正在处理的当前元素。         <span class="token template-string"><span class="token string">`index`</span></span>可选          <span class="token template-string"><span class="token string">`callback`</span></span> 数组中正在处理的当前元素的索引。      <span class="token template-string"><span class="token string">`array`</span></span>可选          <span class="token template-string"><span class="token string">`map`</span></span> 方法调用的数组。      <span class="token template-string"><span class="token string">`thisArg`</span></span>可选    执行 <span class="token template-string"><span class="token string">`callback`</span></span> 函数时值被用作<span class="token template-string"><span class="token string">`this`</span></span>。</code></pre></li><li><p><strong>返回值</strong></p><pre class=" language-js"><code class="language-js">  一个由原数组每个元素执行回调函数的结果组成的新数组。</code></pre></li><li><p>例</p><pre class=" language-js"><code class="language-js">  简单用法  <span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// pass a function to map</span>  <span class="token keyword">const</span> map1 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// expected output: Array [2, 8, 18, 32]</span></code></pre></li><li><p><strong>注意：</strong> </p><pre class=" language-js"><code class="language-js">  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 不会对空数组进行检测。  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 不会改变原始数组。</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">官方文档</a></p></li></ul></li></ul><h5 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h5><ul><li><p>该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p></li><li><p>可以将要添加的元素作为方法的参数传递，</p></li><li><p>这样这些元素将会自动添加到数组的末尾 </p></li><li><p>该方法会将数组新的长度作为返回值返回</p></li></ul><h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h5><ul><li>该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回</li></ul><h5 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h5><ul><li><p>向数组开头添加一个或多个元素，并返回新的数组长度</p></li><li><p>向前边插入元素以后，其他的元素索引会依次调整</p></li></ul><h5 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h5><p> 可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h5><p> 可以用来从数组提取指定元素<br>      - 该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回<br>      - 参数：<br>            1.截取开始的位置的索引,  包含  开始索引<br>            2.截取结束的位置的索引,  不包含  结束索引<br>                - 第二个参数可以省略不写,此时会截取从开始索引往后的所有元素<br>              - 索引可以传递一个负值，如果传递一个负值，则从后往前计算<br>                    -1 倒数第一个<br>                    -2 倒数第二个</p><h5 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h5><ul><li>描述（增删改一体化）<br>&#96;&#96;&#96;js<br>可以用于删除数组中的指定元素<br><br>- 参数：<br>          第一个，表示开始位置的索引<br>          第二个，表示删除的数量<br>          第三个  及以后。。<br>              可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</li></ul><pre><code>   - 注意     ```js       使用splice()会影响到原数组，会将指定元素从原数组中删除，被删除的元素作为返回值返回          ```     ##### concat()- 可以连接两个或多个数组，并将新的数组返回  - 该方法不会对原数组产生影响##### join() 该方法可以将数组转换为一个字符串   - 该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回   - 在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符```js        如果不指定连接符，则默认使用,作为连接符</code></pre><h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h5><p> 该方法用来反转数组（前边的去后边，后边的去前边）<br>      - 该方法会直接修改原数组</p><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">  <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法返回调用它的 String 对象中<span class="token operator">**</span>第一次出现的指定值的索引<span class="token operator">**</span>，从 <span class="token operator">**</span>fromIndex<span class="token operator">**</span> 处进行搜索。如果未找到该值，则返回 <span class="token operator">-</span><span class="token number">1</span>。</code></pre></li><li><p><strong>语法</strong></p><pre class=" language-js"><code class="language-js">  str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchValue <span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>参数</strong></p><pre class=" language-js"><code class="language-js">  searchValue      要被查找的字符串值。如果没有提供确切地提供字符串，searchValue 会被强制设置为 <span class="token string">"undefined"</span>， 然后在当前字符串中查找这个值。举个例子：<span class="token string">'undefined'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 将会返回<span class="token number">0</span>，因为 undefined 在位置<span class="token number">0</span>处被找到，但是 <span class="token string">'undefine'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 将会返回 <span class="token operator">-</span><span class="token number">1</span> ，因为字符串 <span class="token string">'undefined'</span> 未被找到。        fromIndex 可选      数字表示开始查找的位置。可以是任意整数，默认值为 <span class="token number">0</span>。如果 fromIndex 的值小于 <span class="token number">0</span>，或者大于 str<span class="token punctuation">.</span>length ，那么查找分别从 <span class="token number">0</span> 和str<span class="token punctuation">.</span>length 开始。（译者注：  fromIndex 的值小于 <span class="token number">0</span>，等同于为空情况； fromIndex 的值大于或等于 str<span class="token punctuation">.</span>length ，那么结果会直接返回 <span class="token operator">-</span><span class="token number">1</span> 。）举个例子，<span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> 返回 <span class="token number">4</span> ，因为它是从位置<span class="token number">0</span>处开始查找，然后 o 在位置<span class="token number">4</span>处被找到。另一方面，<span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> （或 fromIndex 填入任何大于<span class="token number">11</span>的值）将会返回 <span class="token operator">-</span><span class="token number">1</span> ，因为开始查找的位置<span class="token number">11</span>处，已经是这个字符串的结尾了。 </code></pre></li><li><p><strong>返回值</strong></p><pre class=" language-js"><code class="language-js">  查找的字符串 searchValue 的第一次出现的索引，如果没有找到，则返回 <span class="token operator">-</span><span class="token number">1</span>。    若被查找的字符串 searchValue 是一个空字符串，将会产生“奇怪”的结果。如果 fromIndex 值为空，或者 fromIndex 值小于被查找的字符串的长度，返回值和以下的 fromIndex 值一样：              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 0</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 0</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 3</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 8</span>                另外，如果 fromIndex 值大于等于字符串的长度，将会直接返回字符串的长度（str<span class="token punctuation">.</span>length）：              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 11</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 11</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 11</span>                从前面一个例子可以看出，被查找的值是空值时，Javascript将直接返回指定的索引值。从后面一个例子可以看出，被查找的值是空值时，Javascript将直接返回字符串的长度。</code></pre></li><li><p><strong>注意</strong></p><pre class=" language-js"><code class="language-js">  字符串中的字符被从左向右索引。第一个字符的索引（index）是 <span class="token number">0</span>，变量名为 stringName 的字符串的最后一个字符的索引是 stringName<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    indexOf 方法是区分大小写的    注意 <span class="token number">0</span> 并不会被当成 <span class="token boolean">true</span> ，<span class="token operator">-</span><span class="token number">1</span> 不会被当成 <span class="token boolean">false</span> 。所以当检测某个字符串是否存在于另一个字符串中时，可使用下面的方法：          <span class="token string">'Blue Whale'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Blue'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">// true</span>          <span class="token string">'Blue Whale'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Bloe'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">// false</span>          <span class="token operator">~</span><span class="token punctuation">(</span><span class="token string">'Blue Whale'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Bloe'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 0, 这是一种错误用法</span></code></pre></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">MDN文档</a></p></li></ul><h5 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">  <span class="token template-string"><span class="token string">`trim()`</span></span>方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 <span class="token punctuation">(</span>space<span class="token punctuation">,</span> tab<span class="token punctuation">,</span> no<span class="token operator">-</span><span class="token keyword">break</span> space 等<span class="token punctuation">)</span> 以及所有行终止符字符（如 LF，CR等）。</code></pre><pre class=" language-js"><code class="language-js">  <span class="token template-string"><span class="token string">`trim()`</span></span> 方法返回一个从两头去掉空白字符的字符串，并不影响原字符串本身。</code></pre></li><li><p>语法</p><pre class=" language-js"><code class="language-js">  str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>返回值</p><pre class=" language-js"><code class="language-js">  一个代表调用字符串两端去掉空白的新字符串。</code></pre></li><li><p>兼容久环境、</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="React打基础"><a href="#React打基础" class="headerlink" title="React打基础"></a>React打基础</h4><pre class=" language-js"><code class="language-js">map<span class="token operator">-</span> 参数<span class="token operator">-</span> <span class="token template-string"><span class="token string">`callback`</span></span>  <span class="token operator">-</span> 生成新数组元素的函数，使用三个参数：     <span class="token operator">-</span> <span class="token template-string"><span class="token string">`currentValue`</span></span>    <span class="token operator">-</span>   <span class="token template-string"><span class="token string">`callback`</span></span> 数组中正在处理的当前元素。   <span class="token operator">-</span> <span class="token template-string"><span class="token string">`index`</span></span>可选      <span class="token operator">-</span> <span class="token template-string"><span class="token string">`callback`</span></span> 数组中正在处理的当前元素的索引。    <span class="token operator">-</span> <span class="token template-string"><span class="token string">`array`</span></span>可选      <span class="token operator">-</span> <span class="token template-string"><span class="token string">`map`</span></span> 方法调用的数组。  <span class="token operator">-</span> <span class="token template-string"><span class="token string">`thisArg`</span></span>可选  <span class="token operator">-</span> 执行 <span class="token template-string"><span class="token string">`callback`</span></span> 函数时值被用作<span class="token template-string"><span class="token string">`this`</span></span>。  </code></pre><h4 id="Vue打基础"><a href="#Vue打基础" class="headerlink" title="Vue打基础"></a>Vue打基础</h4><pre class=" language-js"><code class="language-js">object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//返回的是参数对象的属性组成的数组，可以用数组的方法forEach去遍历对象</span><span class="token comment" spellcheck="true">//例如</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Object.defineProperty</span>        <span class="token comment" spellcheck="true">// 这个方法在为对象添加或者修改     属性为响应式属性</span>        <span class="token comment" spellcheck="true">/*         语法            Object.defineProperty(obj, prop, descriptor)              参数                obj                    要定义属性的对象。                prop                    要定义或修改的属性的名称或 Symbol 。                descriptor                    要定义或修改的属性描述符。               返回值                    被传递给函数的对象。        */</span></code></pre><h4 id="元素的大小和位置"><a href="#元素的大小和位置" class="headerlink" title="元素的大小和位置"></a>元素的大小和位置</h4><h5 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h5><ul><li><p><strong>client</strong>系列</p><pre class=" language-js"><code class="language-js">    页可见区域宽： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>    网页可见区域高： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span></code></pre></li><li><p><strong>offset</strong>系列</p><pre class=" language-js"><code class="language-js">    网页可见区域宽： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth   <span class="token punctuation">(</span>包括边线的宽<span class="token punctuation">)</span><span class="token punctuation">;</span>    网页可见区域高： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetHeight <span class="token punctuation">(</span>包括边线的宽<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>scroll</strong>系列</p><pre class=" language-js"><code class="language-js">    网页正文全文宽： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span>    网页正文全文高： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>    网页被卷去的高： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    网页被卷去的左： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span></code></pre></li></ul><h5 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h5><pre class=" language-js"><code class="language-js">    网页正文部分上： window<span class="token punctuation">.</span>screenTop<span class="token punctuation">;</span>    网页正文部分左： window<span class="token punctuation">.</span>screenLeft<span class="token punctuation">;</span>    屏幕分辨率的高： window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    屏幕分辨率的宽： window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    屏幕可用工作区高度： window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>availHeight<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
