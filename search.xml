<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web踩坑</title>
      <link href="/posts/18408.html"/>
      <url>/posts/18408.html</url>
      
        <content type="html"><![CDATA[<h2 id="时间-问题"><a href="#时间-问题" class="headerlink" title="时间 + 问题"></a>时间 + 问题</h2><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><h4 id="1-loader-版本过高问题"><a href="#1-loader-版本过高问题" class="headerlink" title="1. loader 版本过高问题"></a>1. loader 版本过高问题</h4><h4 id><a href="#" class="headerlink" title></a><img src="/posts/D:/办公\Typora\前端\14-webpack\resource\版本过高问题.png" alt="版本过高问题"></h4><p>类似提示，可能存在 loader 版本过高问题，下载低版本loader 即可解决。</p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="1-git-push问题"><a href="#1-git-push问题" class="headerlink" title="1.git push问题"></a>1.git push问题</h4><p>2022年4月21日08:52:49</p><p>错误</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">fatal</span><span class="token punctuation">:</span> remote error<span class="token punctuation">:</span>   You can't push to git<span class="token punctuation">:</span>//github.com/你的git用户名/Demo.git  Use https<span class="token punctuation">:</span>//github.com/你的git用户名/Demo.git</code></pre><h5 id="解决办法一："><a href="#解决办法一：" class="headerlink" title="解决办法一："></a>解决办法一：</h5><p>最后按照百度来的解决方法解决了该问题<br>控制台输入以下两条命令后再次尝试git push操作</p><pre class=" language-yaml"><code class="language-yaml">git remote rm origingit remote add origin git@github.com<span class="token punctuation">:</span>git用户名/仓库名.git</code></pre><p>如果出现以下问题</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">fatal</span><span class="token punctuation">:</span> The current branch main has no upstream branch.To push the current branch and set the remote as upstream<span class="token punctuation">,</span> usegit push <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>upstream origin main</code></pre><p>则执行下方命令</p><pre class=" language-yaml"><code class="language-yaml"> git push <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>upstream origin main</code></pre><p>出现下方提示证明上游分支设置成功</p><pre class=" language-js"><code class="language-js">Branch <span class="token string">'main'</span> <span class="token keyword">set</span> up to track remote branch <span class="token string">'main'</span> <span class="token keyword">from</span> <span class="token string">'origin'</span><span class="token punctuation">.</span></code></pre><p>进行该操作后可以正常git push,git pull操作了</p><h5 id="解决办法二："><a href="#解决办法二：" class="headerlink" title="解决办法二："></a>解决办法二：</h5><pre class=" language-md"><code class="language-md">    8-30新增解决方法        进入项目文件夹目录下，找到.git文件夹（如果不显示请打开查看隐藏目录选项）    效果如图    找到config文件，打开后如下图：        如果url为http开头，如：https://github.com/用户名/仓库名，例：https://github.com/kobeyk/SpringBoot-ShpTools.git    则修改为git@github.com:用户名/仓库名,注意，githup.com与用户名中间为英文符号:</code></pre><p>————————————————<br>版权声明：本文为CSDN博主「七加一i」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_43961619/article/details/116595085">https://blog.csdn.net/qq_43961619/article/details/116595085</a></p><h3 id="2-Git快速搜索"><a href="#2-Git快速搜索" class="headerlink" title="2.Git快速搜索"></a>2.Git快速搜索</h3><p>作用</p><ul><li>快速搜索源码中文件的路径</li></ul><p>使用方法</p><ol><li>在github中找到你要查询的库</li><li><img src="/posts/C:/Users\1\AppData\Roaming\Typora\typora-user-images\image-20220518110209022.png" alt="image-20220518110209022"></li><li>选择<code>In this respository</code></li><li>回车</li></ol><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><h4 id="1-React路由"><a href="#1-React路由" class="headerlink" title="1.React路由"></a>1.React路由</h4><p>2022年3月6日19:01:00</p><p>今天做练习react路由出现错误，index.tsx:19 Uncaught Error: A is only ever to be used as the child of element, nev…<br>由于路由版本升级，Route需要在Routes组件内，并且component替换成element，括号中变为标签<br>&lt;Routes<br><Route path="/about" element="{}"><br><Route path="/home" element="{}"><br>&lt;&#x2F;Routes<br>记录一下<br>原文链接：<a href="https://blog.csdn.net/m0_50981596/article/details/122811781">https://blog.csdn.net/m0_50981596/article/details/122811781</a></Route></Route></p><p>&#x3D;&#x3D;<strong>以上是路由6版本，由于改动过大，建议先使用5版本</strong>&#x3D;&#x3D;</p><h4 id="2-解决多级路径刷新页面样式丢失的问题"><a href="#2-解决多级路径刷新页面样式丢失的问题" class="headerlink" title="2.解决多级路径刷新页面样式丢失的问题"></a>2.解决多级路径刷新页面样式丢失的问题</h4><pre class=" language-js"><code class="language-js">   <span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">public</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html 中 引入样式时不写 <span class="token punctuation">.</span><span class="token operator">/</span> 写 <span class="token operator">/</span> （常用）   <span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">public</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html 中 引入样式时不写 <span class="token punctuation">.</span><span class="token operator">/</span> 写 <span class="token operator">%</span>PUBLIC_URL<span class="token operator">%</span> （常用）   <span class="token number">3</span><span class="token punctuation">.</span>使用HashRouter</code></pre><h3 id="Antd-React-UI库"><a href="#Antd-React-UI库" class="headerlink" title="Antd-React UI库"></a>Antd-React UI库</h3><h4 id="1-antd自定义主题报错"><a href="#1-antd自定义主题报错" class="headerlink" title="1.antd自定义主题报错"></a>1.antd自定义主题报错</h4><p>2022年3月26日16:45:13</p><pre class=" language-js"><code class="language-js">  ERROR <span class="token keyword">in</span> <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>styles<span class="token operator">/</span>wieldy<span class="token punctuation">.</span>less <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>css<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">?</span>ruleSet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>oneOf<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span>use<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>postcss<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">?</span>ruleSet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>oneOf<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span>use<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>resolve<span class="token operator">-</span>url<span class="token operator">-</span>loader<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">?</span>ruleSet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>oneOf<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span>use<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>less<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">?</span>ruleSet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>oneOf<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span>use<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>styles<span class="token operator">/</span>wieldy<span class="token punctuation">.</span>less<span class="token punctuation">)</span>    Module build failed <span class="token punctuation">(</span><span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>postcss<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token punctuation">:</span>  ValidationError<span class="token punctuation">:</span> Invalid options object<span class="token punctuation">.</span> PostCSS Loader has been initialized using an options object that does not match the API schema<span class="token punctuation">.</span>   <span class="token operator">-</span> options has an unknown property <span class="token string">'plugins'</span><span class="token punctuation">.</span> These properties are valid<span class="token punctuation">:</span>     object <span class="token punctuation">{</span> postcssOptions<span class="token operator">?</span><span class="token punctuation">,</span> execute<span class="token operator">?</span><span class="token punctuation">,</span> sourceMap<span class="token operator">?</span><span class="token punctuation">,</span> implementation<span class="token operator">?</span> <span class="token punctuation">}</span>      at validate <span class="token punctuation">(</span>C<span class="token punctuation">:</span>\Workspace\harv<span class="token operator">-</span>Harvest<span class="token operator">-</span>frontend\node_modules\schema<span class="token operator">-</span>utils\dist\validate<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">105</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">)</span>      at Object<span class="token punctuation">.</span>getOptions <span class="token punctuation">(</span>C<span class="token punctuation">:</span>\Workspace\harv<span class="token operator">-</span>Harvest<span class="token operator">-</span>frontend\node_modules\webpack\lib\NormalModule<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">580</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">)</span>      at Object<span class="token punctuation">.</span>loader <span class="token punctuation">(</span>C<span class="token punctuation">:</span>\Workspace\harv<span class="token operator">-</span>Harvest<span class="token operator">-</span>frontend\node_modules\postcss<span class="token operator">-</span>loader\dist\index<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">)</span></code></pre><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>  也有这个问题。</p><p>  似乎因为 less-loader 6 customize-cra “addLessLoader” 被破坏了。</p><p>  这个<a href="https://github.com/arackaf/customize-cra/pull/255">PR</a>修复了它，但从未合并。同一个人创建了这个包： <a href="https://github.com/xyy94813/customize-cra-less-loader">customize-cra-less-loader</a></p><p>  解决这个问题：</p><ul><li>安装custom-cra-less-loader包</li><li>“config-overrides.js”应该是这样的：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> override <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"customize-cra"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> addLessLoader <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"customize-cra-less-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span>  <span class="token function">addLessLoader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    lessLoaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      lessOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        modifyVars<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'@primary-color'</span><span class="token punctuation">:</span> <span class="token string">'#038fde'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>转自<a href="https://stackoverflow.com/questions/71035578/postcss-loader-has-been-initialized-using-an-options-object-that-does-not-match">https://stackoverflow.com/questions/71035578/postcss-loader-has-been-initialized-using-an-options-object-that-does-not-match</a></p><h4 id="2-antd自定义主题修改失效"><a href="#2-antd自定义主题修改失效" class="headerlink" title="2.antd自定义主题修改失效"></a>2.antd自定义主题修改失效</h4><p>2022年3月26日16:45:13</p><p>less-loader版本低，版本参考</p><pre class=" language-js"><code class="language-js"> <span class="token string">"less"</span><span class="token punctuation">:</span> <span class="token string">"3.12.2"</span><span class="token punctuation">,</span> <span class="token string">"less-loader"</span><span class="token punctuation">:</span> <span class="token string">"^10.2.0"</span><span class="token punctuation">,</span></code></pre><h4 id="3-1"><a href="#3-1" class="headerlink" title="3."></a>3.</h4><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="1-Vue-Router-4版本-不适应3版本"><a href="#1-Vue-Router-4版本-不适应3版本" class="headerlink" title="1.Vue Router 4版本 不适应3版本"></a>1.Vue Router 4版本 不适应3版本</h4><p>2022年4月19日11:13:48</p><p>报错</p><pre class=" language-js"><code class="language-js">    Uncaught TypeError<span class="token punctuation">:</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> is not a <span class="token keyword">function</span>        at eval <span class="token punctuation">(</span>webpack<span class="token operator">-</span>internal<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//./node_modules/vue-router/dist/vue-router.esm-bundler.js:2145:97)</span>        at Module<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>vue<span class="token operator">-</span>router<span class="token operator">/</span>dist<span class="token operator">/</span>vue<span class="token operator">-</span>router<span class="token punctuation">.</span>esm<span class="token operator">-</span>bundler<span class="token punctuation">.</span>js <span class="token punctuation">(</span>chunk<span class="token operator">-</span>vendors<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">1609</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span>        at __webpack_require__ <span class="token punctuation">(</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">849</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">)</span>        at fn <span class="token punctuation">(</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">151</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">)</span>        at eval <span class="token punctuation">(</span>webpack<span class="token operator">-</span>internal<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//./src/router/index.js:3:68)</span>        at Module<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>router<span class="token operator">/</span>index<span class="token punctuation">.</span>js <span class="token punctuation">(</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">1129</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span>        at __webpack_require__ <span class="token punctuation">(</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">849</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">)</span>        at fn <span class="token punctuation">(</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">151</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">)</span>        at eval <span class="token punctuation">(</span>webpack<span class="token operator">-</span>internal<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//./src/main.js:12:65)</span>        at Module<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token punctuation">.</span>js <span class="token punctuation">(</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">1117</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>解决</p><pre class=" language-yaml"><code class="language-yaml">    <span class="token comment" spellcheck="true"># 依次执行</span>    yarn remove vue<span class="token punctuation">-</span>router    yarn add vue<span class="token punctuation">-</span>router@3 <span class="token punctuation">-</span><span class="token punctuation">-</span>save    <span class="token comment" spellcheck="true"># 即可解决</span></code></pre><h4 id="2-Vuecli-3中适用的less-以及less-loader"><a href="#2-Vuecli-3中适用的less-以及less-loader" class="headerlink" title="2.Vuecli@3中适用的less 以及less-loader"></a>2.Vuecli@3中适用的less 以及less-loader</h4><pre class=" language-json"><code class="language-json">    <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"^3.13.0"</span><span class="token punctuation">,</span>    <span class="token property">"less-loader"</span><span class="token operator">:</span> <span class="token string">"^7.1.0"</span><span class="token punctuation">,</span></code></pre><p>版本过高报错</p><pre class=" language-js"><code class="language-js">cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>vue<span class="token operator">-</span>loader<span class="token operator">/</span>lib<span class="token operator">/</span>loaders<span class="token operator">/</span>stylePostLoader<span class="token punctuation">.</span>js<span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>postcss<span class="token operator">-</span>loader<span class="token operator">/</span>src<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>less<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>cache<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>vue<span class="token operator">-</span>loader<span class="token operator">/</span>lib<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>components<span class="token operator">/</span>Footer<span class="token operator">/</span>index<span class="token punctuation">.</span>vue<span class="token operator">?</span>vue<span class="token operator">&amp;</span>type<span class="token operator">=</span>style<span class="token operator">&amp;</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>id<span class="token operator">=</span>30c2788e<span class="token operator">&amp;</span>lang<span class="token operator">=</span>less<span class="token operator">&amp;</span>scoped<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span><span class="token punctuation">:</span><span class="token number">1</span> Uncaught Error<span class="token punctuation">:</span> Module build failed <span class="token punctuation">(</span><span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>less<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token punctuation">:</span>TypeError<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getOptions is not a <span class="token keyword">function</span>    at Object<span class="token punctuation">.</span>lessLoader <span class="token punctuation">(</span>D<span class="token punctuation">:</span>\vscode\vscode cache02\<span class="token number">19</span><span class="token operator">-</span>project\Vue\shop<span class="token operator">-</span>client\node_modules\less<span class="token operator">-</span>loader\dist\index<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">)</span>    at eval <span class="token punctuation">(</span>webpack<span class="token operator">-</span>internal<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Footer/index.vue?vue&amp;type=style&amp;index=0&amp;id=30c2788e&amp;lang=less&amp;scoped=true&amp;:1:7)</span>    at Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>css<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>vue<span class="token operator">-</span>loader<span class="token operator">/</span>lib<span class="token operator">/</span>loaders<span class="token operator">/</span>stylePostLoader<span class="token punctuation">.</span>js<span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>postcss<span class="token operator">-</span>loader<span class="token operator">/</span>src<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>less<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>cache<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>vue<span class="token operator">-</span>loader<span class="token operator">/</span>lib<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>components<span class="token operator">/</span>Footer<span class="token operator">/</span>index<span class="token punctuation">.</span>vue<span class="token operator">?</span>vue<span class="token operator">&amp;</span>type<span class="token operator">=</span>style<span class="token operator">&amp;</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>id<span class="token operator">=</span>30c2788e<span class="token operator">&amp;</span>lang<span class="token operator">=</span>less<span class="token operator">&amp;</span>scoped<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>js<span class="token operator">/</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">1116</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span>    at __webpack_require__ <span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>js<span class="token operator">/</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">849</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">)</span>    at fn <span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>js<span class="token operator">/</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">151</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">)</span>    at eval <span class="token punctuation">(</span>webpack<span class="token operator">-</span>internal<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//./node_modules/vue-style-loader/index.js?!./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Footer/index.vue?vue&amp;type=style&amp;index=0&amp;id=30c2788e&amp;lang=less&amp;scoped=true&amp;:4:15)</span>    at Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>vue<span class="token operator">-</span>style<span class="token operator">-</span>loader<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>css<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>vue<span class="token operator">-</span>loader<span class="token operator">/</span>lib<span class="token operator">/</span>loaders<span class="token operator">/</span>stylePostLoader<span class="token punctuation">.</span>js<span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>postcss<span class="token operator">-</span>loader<span class="token operator">/</span>src<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>less<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>cache<span class="token operator">-</span>loader<span class="token operator">/</span>dist<span class="token operator">/</span>cjs<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>vue<span class="token operator">-</span>loader<span class="token operator">/</span>lib<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>components<span class="token operator">/</span>Footer<span class="token operator">/</span>index<span class="token punctuation">.</span>vue<span class="token operator">?</span>vue<span class="token operator">&amp;</span>type<span class="token operator">=</span>style<span class="token operator">&amp;</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>id<span class="token operator">=</span>30c2788e<span class="token operator">&amp;</span>lang<span class="token operator">=</span>less<span class="token operator">&amp;</span>scoped<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>js<span class="token operator">/</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">1138</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span>    at __webpack_require__ <span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>js<span class="token operator">/</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">849</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">)</span>    at fn <span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>js<span class="token operator">/</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">151</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">)</span>    at eval <span class="token punctuation">(</span>webpack<span class="token operator">-</span>internal<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//./src/components/Footer/index.vue?vue&amp;type=style&amp;index=0&amp;id=30c2788e&amp;lang=less&amp;scoped=true&amp;:2:504)</span>    at Module<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>components<span class="token operator">/</span>Footer<span class="token operator">/</span>index<span class="token punctuation">.</span>vue<span class="token operator">?</span>vue<span class="token operator">&amp;</span>type<span class="token operator">=</span>style<span class="token operator">&amp;</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>id<span class="token operator">=</span>30c2788e<span class="token operator">&amp;</span>lang<span class="token operator">=</span>less<span class="token operator">&amp;</span>scoped<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>js<span class="token operator">/</span>app<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">1232</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h4 id="3-解决路由重复跳转的错误"><a href="#3-解决路由重复跳转的错误" class="headerlink" title="3.解决路由重复跳转的错误"></a>3.解决路由重复跳转的错误</h4><p>2022年4月21日14:36:44</p><p>报错信息</p><pre class=" language-js"><code class="language-js">Uncaught <span class="token punctuation">(</span><span class="token keyword">in</span> promise<span class="token punctuation">)</span> NavigationDuplicated<span class="token punctuation">:</span> Avoided redundant navigation to current location<span class="token punctuation">:</span> <span class="token string">"/search"</span><span class="token punctuation">.</span></code></pre><p>解决方案</p><p>在 route.js 文件下添加如下代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">// 缓存原本的push方法</span><span class="token keyword">const</span> originalPush <span class="token operator">=</span> Router<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token comment" spellcheck="true">// 指定新的push方法</span>Router<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> onResolve<span class="token punctuation">,</span> onReject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果指定了成功或失败的回调</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>onResolve <span class="token operator">||</span> onReject<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 直接调用原本的push方法</span>        <span class="token comment" spellcheck="true">// originalPush(this, location, onResolve, onReject)    //this不是router而是undefined</span>        <span class="token keyword">return</span> originalPush<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> onResolve<span class="token punctuation">,</span> onReject<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 没有指定成功或失败的回调，必须用catch处理</span>    <span class="token keyword">return</span> originalPush<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是重复盗汗产生的错误，不再向外传递错误 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Router<span class="token punctuation">.</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// resolve err</span>            <span class="token keyword">return</span> err      <span class="token comment" spellcheck="true">//  产生的成功的promise ， 成功promise的value是err</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果是其他原因盗汗的错误，将错误向下传递 </span>        <span class="token comment" spellcheck="true">// rethrow error</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>Vue 3.1.0版本后</p><p><a href="https://github.com/vuejs/vue-router/releases?after=v3.3.1&amp;page=3">https://github.com/vuejs/vue-router/releases?after=v3.3.1&amp;page=3</a></p><p><a href="https://github.com/vuejs/vue-router/issues/2881">https://github.com/vuejs/vue-router/issues/2881</a></p><h4 id="4-npm-install-–save-vue-x2F-types-x2F-umd"><a href="#4-npm-install-–save-vue-x2F-types-x2F-umd" class="headerlink" title="4.npm install –save vue&#x2F;types&#x2F;umd"></a>4.npm install –save vue&#x2F;types&#x2F;umd</h4><p>2022-5-9 18:12:46</p><p>报错信息</p><p><img src="https://img-blog.csdnimg.cn/d9f62936065944fabfa827657641c85c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6LaF54ix5a2m5Lmg6Iq4,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>运行后</p><p><img src="https://img-blog.csdnimg.cn/d8e9d87934674fbea084c94e53a005d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6LaF54ix5a2m5Lmg6Iq4,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>解决某个文件中引入了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> xxx <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue/types/umd'</span></code></pre><p>删除即可</p><h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack vue react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue总结</title>
      <link href="/posts/51479.html"/>
      <url>/posts/51479.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue插值语法"><a href="#vue插值语法" class="headerlink" title="vue插值语法"></a>vue插值语法</h2><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//vue差值语法</span>        <span class="token comment" spellcheck="true">//{{}}中使用的数据必须在data中存在;</span>        <span class="token comment" spellcheck="true">//{{}} 虽然能够使用表达式， 不能出现js的语句，不能在{{}}中写if for;</span>        <span class="token comment" spellcheck="true">//{{}} 不能在属性中使用</span></code></pre><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><pre class=" language-js"><code class="language-js">    v<span class="token operator">-</span>text<span class="token comment" spellcheck="true">// 1.向其所在的节点中渲染文本内容。(更新元素的 textContent)</span>                <span class="token comment" spellcheck="true">//2.与插值语法的区别:v-text会替换掉节点中的内容，{{xx}}则不会。</span>    v<span class="token operator">-</span>html<span class="token comment" spellcheck="true">//向指定节点中渲染包含html结构的内容。(更新元素的 innerHTML)</span>    v<span class="token operator">-</span>on       <span class="token comment" spellcheck="true">//绑定事件   简写@</span>    v<span class="token operator">-</span>bind   <span class="token comment" spellcheck="true">//单向数据绑定  ：</span>    v<span class="token operator">-</span>model<span class="token comment" spellcheck="true">//双向数据绑定</span>            <span class="token comment" spellcheck="true">//自动收集表单数据</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">/</span><span class="token operator">></span><span class="token comment" spellcheck="true">//v-model默认收集的其实是你表单元素当中的value值</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span><span class="token operator">/</span><span class="token operator">></span><span class="token comment" spellcheck="true">//name相同时 单选框才会绑定在一组</span>                                    <span class="token comment" spellcheck="true">//v-model默认收集的其实是你表单元素当中的value值,因此需要给radio添加value属性</span>                    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token comment" spellcheck="true">//1.没有配置input的value属性，那么收集的就是checked（勾选or未勾选，是布尔值)</span>        <span class="token comment" spellcheck="true">//2.配置input的value属性:</span>                <span class="token comment" spellcheck="true">//(1)v-model的初始值是非数组，那么收集的就是checked（勾选or未勾选，是布尔值)</span>                <span class="token comment" spellcheck="true">//(2)v-model的初始值是数组，那么收集的的就是value组成的数组</span>        <span class="token comment" spellcheck="true">//备注: v-model的三个修饰符:</span>                <span class="token comment" spellcheck="true">//lazy:失去焦点再收集数据</span>                <span class="token comment" spellcheck="true">//number:输入字符串转为有效的数字</span>                v<span class="token operator">-</span><span class="token keyword">for</span>   <span class="token comment" spellcheck="true">//列表渲染</span>            <span class="token comment" spellcheck="true">// v-for="(item,index) in 遍历对象" :key=唯一值(一般不用index)</span>        v<span class="token operator">-</span><span class="token keyword">if</span>   <span class="token comment" spellcheck="true">//条件渲染</span>    v<span class="token operator">-</span><span class="token keyword">else</span>    v<span class="token operator">-</span>show   <span class="token comment" spellcheck="true">//条件渲染</span>            <span class="token comment" spellcheck="true">// 1.如果需要频繁切换 v-show 较好</span>            <span class="token comment" spellcheck="true">// 2.当条件不成立时, v-if的所有子节点不会解析(项目中使用)</span>        <span class="token comment" spellcheck="true">//注意</span>            <span class="token comment" spellcheck="true">//v-for优先级高于v-if，当v-for和v-if放在同一标签上时，会先执行v-for，再执行v-if，这样会导致不符合v-if条件的元素也会被v-for</span>    ref   <span class="token comment" spellcheck="true">//为特定的元素添加引用标识，实例的$refs内部可以获取到</span>        v<span class="token operator">-</span>cloak <span class="token comment" spellcheck="true">//防止闪现, 与css配合: [v-cloak] { display: none }</span></code></pre><h2 id="过渡-amp-动画"><a href="#过渡-amp-动画" class="headerlink" title="过渡&amp; 动画"></a>过渡&amp; 动画</h2><p><code>xxx-enter-active</code>: 指定<strong>显示</strong>的transition<br><code>xxx-leave-active</code>: 指定<strong>隐藏</strong>的transition<br><code>xxx-enter</code>&#x2F;<code>xxx-leave-to</code>: 指定<strong>隐藏时</strong>的样式</p><h2 id="Vue事件处理"><a href="#Vue事件处理" class="headerlink" title="Vue事件处理"></a>Vue事件处理</h2><pre class=" language-js"><code class="language-js">        v<span class="token operator">-</span>on       <span class="token comment" spellcheck="true">//绑定事件   简写@     </span><span class="token comment" spellcheck="true">// vue事件修饰符</span>        prevent<span class="token comment" spellcheck="true">//阻止默认事件（常用）;</span>       stop<span class="token comment" spellcheck="true">//阻止事件冒泡（常用）;</span>        once<span class="token comment" spellcheck="true">//事件只触发一次（常用）;</span>        capture<span class="token comment" spellcheck="true">//使用事件的捕获模式;</span>        self<span class="token comment" spellcheck="true">//只有event.target是当前操作的元素是才触发事件;</span>        passive<span class="token comment" spellcheck="true">//事件的默认行为立即执行，无需等待事件回调执行完毕;</span></code></pre><h1 id="Vue对象的选项"><a href="#Vue对象的选项" class="headerlink" title="Vue对象的选项"></a>Vue对象的选项</h1><pre class=" language-js"><code class="language-js">el    <span class="token comment" spellcheck="true">//指定dom标签容器的选择器</span>    <span class="token comment" spellcheck="true">//Vue就会管理对应的标签及其子标签</span>data    <span class="token comment" spellcheck="true">//对象或函数类型</span>    <span class="token comment" spellcheck="true">//指定初始化状态属性数据的对象</span>    <span class="token comment" spellcheck="true">//vm也会自动拥有data中所有属性</span>    <span class="token comment" spellcheck="true">//页面中可以直接访问使用</span>    <span class="token comment" spellcheck="true">//数据代理: 由vm对象来代理对data中所有属性的操作(读/写)</span>    <span class="token comment" spellcheck="true">//data为什么用函数</span>    <span class="token comment" spellcheck="true">//不用function return每个组件的data都在内存的同一个地址，那一个data改变，就会影响其他组件的data</span>    <span class="token comment" spellcheck="true">//用function return相当于新建了个对象，分配新的内存地址，这样每个组件之间的data都是相互独立</span>methods    <span class="token comment" spellcheck="true">//包含多个方法的对象</span>    <span class="token comment" spellcheck="true">//供页面中的事件指令来绑定回调</span>    <span class="token comment" spellcheck="true">//回调函数默认有event参数, 但也可以指定自己的参数</span>    <span class="token comment" spellcheck="true">//所有的方法由vue对象来调用, 访问data中的属性直接使用this.xxx</span> </code></pre><h2 id="computed和watch"><a href="#computed和watch" class="headerlink" title="computed和watch"></a>computed和watch</h2><ul><li><strong><code>computed</code>计算属性</strong><ul><li><ol><li>在computed属性对象中定义计算属性的方法</li></ol></li><li>2)在页面中使用来显示计算的结果</li><li>3)computed有缓存，值不变不重新计算</li><li>4)computed内部只能是同步放回数据，不能异步放回数据</li></ul></li><li><strong><code>watch</code></strong><ul><li>1)通过通过vm对象的$watch()或watch配置来监视指定的属性</li><li>2)watch不支持缓存，有数据变化直接触发,当属性变化时, 回调函数自动调用, 在函数内部进行计算</li><li>3)watch支持异步获取数据</li></ul></li></ul><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p><img src="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh/0Shino0/0Shino0Picture/img/lifecycle.png" alt="vue生命周期"></p><h3 id="主要生命周期钩子"><a href="#主要生命周期钩子" class="headerlink" title="主要生命周期钩子"></a>主要生命周期钩子</h3><p>1)<code>mounted()</code>: 发送<strong>ajax请求</strong>, <strong>启动定时器</strong>等<strong>异步</strong>任务<br>2)<code>beforeDestory()</code>: 做收尾工作, 如: <strong>清除定时器</strong></p><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h4 id="注册store"><a href="#注册store" class="headerlink" title="注册store"></a>注册store</h4><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    store<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 注册vuex的store对象  ==> 所有组件对象都有一个$store属性</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul><li><p><code>State</code></p><ul><li><p>state是一个包含多个属性（不是方法）的对象  &#x3D;&gt;  初始化存储数据</p></li><li><p><code>mapState</code>辅助函数</p><ul><li><p><code>mapState</code> 函数返回的是一个对象，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 <code>computed</code> 属性。但是自从有了<a href="https://github.com/tc39/proposal-object-rest-spread">对象展开运算符</a>，我们可以极大地简化写法：</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用对象展开运算符将此对象混入到外部对象中</span>  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p><code>Mutation</code></p><ul><li>mutations也是一个对象，是一个包含了多个方法的对象 &#x3D;&gt; 直接操作数据的</li><li>里面的方法不能包含  if  for  异步，是直接操作的 (纯函数)</li></ul></li><li><p><code>Action</code></p><ul><li>actions也是一个对象，是一个包含了多个方法的对象 &#x3D;&gt; vue当中用户的操作去关联的</li></ul></li><li><p><code>Getter</code></p><ul><li><p>可以认为是 store 的计算属性</p></li><li><p><code>mapGetters</code>辅助函数</p><ul><li><code>mapGetters</code> 辅助函数可以是将 <code>store</code> 中的 <code>getter</code>映射到局部计算属性</li></ul><pre class=" language-js"><code class="language-js">  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用对象展开运算符将 getter 混入 computed 对象中</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// getter当中的 计算属性</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre></li></ul></li><li><p><code>Module</code></p><ul><li>Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割</li><li>Vuex推荐我们的项目结构</li></ul><pre class=" language-sh"><code class="language-sh">├── index.html├── main.js├── api│   └── ... # 抽取出API请求├── components│   ├── App.vue│   └── ...└── store    ├── index.js          # 我们组装模块并导出 store 的地方    ├── actions.js        # 根级别的 action    ├── mutations.js      # 根级别的 mutation    └── modules        ├── cart.js       # 购物车模块        └── products.js   # 产品模块</code></pre><ul><li>当我们想要访问cart.js中的<code>state</code>数据</li></ul><pre><code>shopCartList:state =&gt; state.shopcart.shopCartList</code></pre></li></ul><h4 id="vuex核心概念模板"><a href="#vuex核心概念模板" class="headerlink" title="vuex核心概念模板"></a>vuex核心概念模板</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1、安装</span><span class="token comment" spellcheck="true">// 2、引入并声明使用vuex插件</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3、向外暴露一个store的实例化对象</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代表初始状态数据    是一个包含n个属性（不是方法）的对象</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代表直接修改数据的数据  是一个包含n个直接修改状态数据方法的对象 （用来让action的行为调用）</span>    <span class="token comment" spellcheck="true">// 注意：只能通过mutations的方法去直接修改，也就是说要想写state数据必须通过mutations</span><span class="token punctuation">}</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代表用户行为数据    是一个包含n个用户行为回调方法的对象，（用来映射组件用户的行为回调函数）</span><span class="token punctuation">}</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代表计算属性数据    是一个包含n个计算属性的方法的对象</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 包含了6个核心概念，</span>    <span class="token comment" spellcheck="true">// 现在讲4个</span>    state<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    actions<span class="token punctuation">,</span>    getters<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4、将暴露出去的store实例化对象引入到实例化Vue的配置对象(main.js)当中使用</span></code></pre><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><h3 id="路由API"><a href="#路由API" class="headerlink" title="路由API"></a><a href="https://router.vuejs.org/zh/api/">路由API</a></h3><h3 id="定义配置路由"><a href="#定义配置路由" class="headerlink" title="定义配置路由"></a>定义配置路由</h3><pre class=" language-js"><code class="language-js">    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 配置当前路由</span>        path<span class="token punctuation">:</span> <span class="token string">'/current'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Current<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 配置嵌套子路由</span>              <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'children01'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> Children01              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'children02'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> Children02              <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自动跳转路由</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>         redirect<span class="token punctuation">:</span> <span class="token string">'/about'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span></code></pre><h3 id="注册路由"><a href="#注册路由" class="headerlink" title="注册路由"></a>注册路由</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment" spellcheck="true">// 创建vue配置路由器</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>   router<span class="token punctuation">,</span>   render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h3><ul><li><code>&lt;router-link&gt;</code><ul><li>路由连接,跳转到to所指定的连接</li><li>参数<ul><li><code>to</code>:目标路由的链接</li><li><code>replace</code>:导航后不会留下历史记录</li><li><code>active-class </code>:链接激活时，应用于渲染的 <code>&lt;a&gt;</code> 的 class。</li><li></li></ul></li></ul></li><li><code>&lt;router-view&gt;</code><ul><li>路由组件显示区域，就是组件需要在哪显示</li></ul></li></ul><h4 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h4><p>在浏览器中，点击链接实现导航的方式，叫做声明式导航。 像 <code>&lt;a&gt;</code> <code>&lt;router-link to=&quot;&quot;&gt;</code>都属于声明式导航</p><h4 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h4><ol><li><code>this.$router.push(path)</code>: 相当于点击路由链接(可以返回到当前路由界面)</li><li><code>this.$router.replace(path)</code>: 用新路由替换当前路由(不可以返回到当前路由界面)</li><li><code>this.$router.back()</code>: 请求(返回)上一个记录路由</li><li><code>this.$router.go(-1)</code>: 请求(返回)上一个记录路由</li><li><code>this.$router.go(1)</code>: 请求下一个记录路由</li></ol><h4 id="路由传递数据"><a href="#路由传递数据" class="headerlink" title="路由传递数据"></a>路由传递数据</h4><h5 id="方法一：路由路径携带参数-param-x2F-query"><a href="#方法一：路由路径携带参数-param-x2F-query" class="headerlink" title="方法一：路由路径携带参数(param&#x2F;query)"></a>方法一：路由路径携带参数(param&#x2F;query)</h5><pre class=" language-js"><code class="language-js">最原始的传参            参数：params参数<span class="token punctuation">,</span>是属于路径的一部分       <span class="token operator">/</span>xxx<span class="token operator">/</span><span class="token number">10</span>                  query参数路径后使用<span class="token operator">?</span>去拼接起来的    <span class="token operator">/</span>xxx<span class="token operator">/</span>  <span class="token operator">?</span> aa <span class="token operator">=</span> bb <span class="token operator">&amp;&amp;</span> xx <span class="token operator">=</span> yy  </code></pre><h5 id="方法2-lt-router-view-gt-属性携带数据"><a href="#方法2-lt-router-view-gt-属性携带数据" class="headerlink" title="方法2: &lt;router-view&gt;属性携带数据"></a>方法2: &lt;router-view&gt;属性携带数据</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//路由链接组件传递数据给命名路由</span><span class="token comment" spellcheck="true">//路由链接组件中给路由传参可以写成对象形式，前提需要给路由起名字name，也叫命名路由  </span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view name<span class="token operator">=</span><span class="token string">'xxx'</span> <span class="token punctuation">:</span>msg<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span></code></pre><h5 id="方法3-使用props简化路由传参给子组件操作（路由当中传参的三种操作）"><a href="#方法3-使用props简化路由传参给子组件操作（路由当中传参的三种操作）" class="headerlink" title="方法3:使用props简化路由传参给子组件操作（路由当中传参的三种操作）"></a>方法3:使用props简化路由传参给子组件操作（路由当中传参的三种操作）</h5><pre class=" language-js"><code class="language-js">        <span class="token number">1</span>）布尔值              路由当中需要配置 props<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>只能接收params参数，它会把路由当中接收的参数，置为子组件的属性             <span class="token number">2</span>）对象            很少用，只能给子组件传递默认静态值        <span class="token number">3</span>）函数            用的比较多，比较灵活，可以把params和query的参数都映射为子组件的属性            <span class="token function">props</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//route就是当前我这个路由对象</span>                                <span class="token comment" spellcheck="true">//把路由对象当中的参数，不管什么参数</span>                                <span class="token comment" spellcheck="true">//全部拿到作为子组件的属性去使用</span>                                <span class="token keyword">return</span> <span class="token punctuation">{</span>                                        msgId<span class="token punctuation">:</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>msgId<span class="token punctuation">,</span>                                        msgContent<span class="token punctuation">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>msgContent                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span></code></pre><h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><ol><li><strong>全局路由守卫</strong></li></ol><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//全局前置守卫，路由跳转前触发</span><span class="token punctuation">}</span><span class="token punctuation">)</span> router<span class="token punctuation">.</span><span class="token function">beforeResolve</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//全局解析守卫 在所有组件内守卫和异步路由组件被解析之后触发</span><span class="token punctuation">}</span><span class="token punctuation">)</span> router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//全局后置守卫，路由跳转完成后触发</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><ol start="2"><li><strong>路由独享守卫</strong></li></ol><pre class=" language-js"><code class="language-js"><span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//路由对象单个路由配置 ，单个路由进入前触发</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><ol start="3"><li><strong>组件路由守卫</strong></li></ol><pre class=" language-js"><code class="language-js"><span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在组件生命周期beforeCreate阶段触发</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">beforeRouteUpdadte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前路由改变时触发</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//导航离开该组件的对应路由时触发</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ol start="4"><li><strong>参数</strong></li></ol><p><code>to</code>： 即将要进入的目标路由对象</p><p><code>from</code>： 即将要离开的路由对象</p><p><code>next(Function)</code>：是否可以进入某个具体路由，或者是某个具体路由的路径</p><ol start="5"><li><strong>应用</strong></li></ol><p><code>router.beforeEach</code>：token校验</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 全局前置导航守卫router.beforeEach</span><span class="token comment" spellcheck="true">// token校验</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 全局前置导航守卫</span>    <span class="token comment" spellcheck="true">// to 代表准备驱动地方的路由对象</span>    <span class="token comment" spellcheck="true">// from 从哪个地方来的路由对象</span>    <span class="token comment" spellcheck="true">// next 是一个函数</span>    <span class="token comment" spellcheck="true">// next() 代表无条件放行</span>    <span class="token comment" spellcheck="true">// next(false) 代表不放行，停在原地</span>    <span class="token comment" spellcheck="true">// next('/')    next({path:'/'})    代表最终让它去哪</span>    <span class="token comment" spellcheck="true">// token校验</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>token    <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 代表登录了或者之前登录过</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 登录鼓励，又想去登录页，直接跳转到首页</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// !! 转化为bool值</span>            <span class="token keyword">let</span> hasuserInfo <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>nickName                        <span class="token keyword">if</span><span class="token punctuation">(</span>hasuserInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 此时 代表登录了 ， 去的不是登录页，用户信息存在，直接无条件放行</span>                <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                                                <span class="token comment" spellcheck="true">// 此时代表登录了，去的不是登录页，用户信息不存在   那我们要根据token发请求获取用户真实信息</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">await</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getUserInfo'</span><span class="token punctuation">)</span>                    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 出现错误 跳转到login页面，并清楚用户信息</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'用户的token过期'</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 清空用户信息</span>                    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'resetUserInfo'</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 去到之前想去但是没有去成的地方，需要和登录逻辑去配合使用  </span>                    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login?redirect='</span><span class="token operator">+</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 代表用户没登录或者之前也没有登录过</span>                <span class="token comment" spellcheck="true">// 后期我们需要判断用户是不是订单相关的页面，如果是娜美就先登录</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>beforeEnter</code>：用于设置放行条件</p><pre class=" language-js"><code class="language-js">     <span class="token comment" spellcheck="true">//路由独享守卫</span>     <span class="token comment" spellcheck="true">// 用于设置放行条件</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">'/addcartsuccess'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>AddCartSuccess<span class="token punctuation">,</span>        路由独享守卫        beforeEnter<span class="token punctuation">:</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> skuNum <span class="token operator">=</span> to<span class="token punctuation">.</span>query<span class="token punctuation">.</span>skuNum            <span class="token keyword">let</span> skuInfo <span class="token operator">=</span>  sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'SKUINFO_KEY'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 如果skuNum 与 skuInfo 存在 则放行</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>skuNum <span class="token operator">&amp;&amp;</span> skuInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'必须带够参数'</span><span class="token punctuation">)</span>                <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="路由组件的单独打包"><a href="#路由组件的单独打包" class="headerlink" title="路由组件的单独打包"></a>路由组件的单独打包</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> GroupOrder <span class="token keyword">from</span> <span class="token string">'@/pages/Center/GroupOrder'</span><span class="token comment" spellcheck="true">// import from 这样的写法</span><span class="token comment" spellcheck="true">// 一个是同步引入，从上往下依次执行引入</span><span class="token comment" spellcheck="true">// 它不能动态引入</span><span class="token comment" spellcheck="true">// 他是把所有的组件全部引入完成才执行下面的代码，webpack打包的时候会把所有的引入组件集体打包，打包成一个大文件</span><span class="token comment" spellcheck="true">// 效率比较慢</span><span class="token keyword">const</span> GroupOrder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/pages/Center/GroupOrder'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// import 函数可以让路由组件单独打包    还支付动态引入</span><span class="token comment" spellcheck="true">// 写法很简单，路由组件在注册的时候可以是一个组件也可以是一个函数</span><span class="token comment" spellcheck="true">// 写成函数时，当路由被访问的时候,对应的函数就会调用,然后对应的import函数才会执行，动态引入并打包成单独的文件</span><span class="token comment" spellcheck="true">// 浏览器在运行的时候，  加载   解析   渲染</span></code></pre><h2 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h2><h3 id="1-组件间多种通信方式"><a href="#1-组件间多种通信方式" class="headerlink" title="1. 组件间多种通信方式:"></a>1. 组件间多种通信方式:</h3><ol><li>组件间通信1: props</li><li>组件间通信2: vue自定义事件</li><li>组件间通信3: 事件总线</li><li>组件间通信4: v-model</li><li>组件间通信5: .sync 属性修饰符</li><li>组件间通信6: $attrs与$listeners</li><li>组件间通信7: $children与$parent</li><li>组件间通信8: provide与inject</li><li>组件间通信9: vuex</li><li>组件间通信10: 作用域插槽slot-scope</li></ol><h3 id="2-组件间通信最基本方式-props"><a href="#2-组件间通信最基本方式-props" class="headerlink" title="2. 组件间通信最基本方式: props"></a>2. 组件间通信最基本方式: props</h3><ul><li>用来实现父子之间相互通信的最基本方式, 也是用得最多的方式<ul><li>父 &#x3D;&#x3D;&gt; 子, 传递的是非函数类型的属性</li><li>子 &#x3D;&#x3D;&gt; 父, 传递的是函数类型的属性</li></ul></li><li>问题: 其它关系的组件使用props就会比较麻烦</li></ul><h3 id="3-组件间通信2-vue自定义事件"><a href="#3-组件间通信2-vue自定义事件" class="headerlink" title="3. 组件间通信2: vue自定义事件"></a>3. 组件间通信2: vue自定义事件</h3><h4 id="1-原生DOM事件"><a href="#1-原生DOM事件" class="headerlink" title="1) 原生DOM事件"></a>1) 原生DOM事件</h4><ul><li>绑定原生DOM事件监听的2种情况<ul><li>在html标签上绑定DOM事件名的监听</li><li>在组件标签上绑定DOM事件名的监听, 事件绑定在组件的根标签上</li></ul></li><li>当用户操作对应的界面时, 浏览器就会自动创建并封闭包含相关数据的事件对象, 分发对应的事件, 从而触发事件监听回调函数调用</li><li>事件对象event, 本质是 “事件数据对象”</li><li>event对象内的数据属性: target &#x2F; offsetX &#x2F; offsetY &#x2F; keyCode等</li><li>$event就是浏览器创建的event对象, 默认传递给事件监听回调函数的就是它</li></ul><h4 id="2-vue自定义事件"><a href="#2-vue自定义事件" class="headerlink" title="2) vue自定义事件"></a>2) vue自定义事件</h4><ul><li>绑定vue自定义事件监听<ul><li>只能在组件标签上绑定</li><li>事件名是任意的, 可以与原生DOM事件名相同</li></ul></li><li>只有当执行$emit(‘自定义事件名’, data)时分发自定义事件, 才会触发自定义事件监听函数调用</li><li>$event: 就是分发自定义事件时指定的data数据</li><li>$event可以是任意类型, 甚至可以没有</li><li>用来实现子向父组件通信, 功能相当于函数类型的props</li></ul><h3 id="4-组件间通信3-事件总线"><a href="#4-组件间通信3-事件总线" class="headerlink" title="4. 组件间通信3: 事件总线"></a>4. 组件间通信3: 事件总线</h3><ul><li><p>理解:</p><ul><li>Vue原型对象上有3个事件处理的方法: $on() &#x2F; $emit() &#x2F; $off()</li><li>组件对象的原型对象的原型对象是Vue的原型对象: 组件对象可以直接访问Vue原型对象上的方法</li></ul></li><li><p>实现任意组件间通信</p></li><li><p>编码实现:</p><ul><li>将入口js中的vm作为全局事件总线对象:</li></ul></li></ul><pre class=" language-js"><code class="language-js">  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span></code></pre><ul><li><p>分发事件&#x2F;传递数据的组件: this.$bus.$emit(‘eventName’, data)</p></li><li><p>处理事件&#x2F;接收数据的组件: this.$bus.$on(‘eventName’, (data) &#x3D;&gt; {})</p></li></ul><h3 id="5-组件间通信4-v-model"><a href="#5-组件间通信4-v-model" class="headerlink" title="5. 组件间通信4: v-model"></a>5. 组件间通信4: v-model</h3><h4 id="1-原生input上的本质"><a href="#1-原生input上的本质" class="headerlink" title="1) 原生input上的本质:"></a>1) 原生input上的本质:</h4><p>动态的value属性与原生input事件监听</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name2<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name2<span class="token punctuation">=</span>$event.target.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="2-组件标签上的本质"><a href="#2-组件标签上的本质" class="headerlink" title="2) 组件标签上的本质:"></a>2) 组件标签上的本质:</h4><p>动态的value属性与自定义input事件监听</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父组件: </span><span class="token operator">&lt;</span>CustomInput <span class="token punctuation">:</span>value<span class="token operator">=</span><span class="token string">"name4"</span> @input<span class="token operator">=</span><span class="token string">"name4=$event"</span><span class="token operator">/</span><span class="token operator">></span><span class="token comment" spellcheck="true">// 子组件</span>props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token punctuation">:</span>value<span class="token operator">=</span><span class="token string">"value"</span> @input<span class="token operator">=</span><span class="token string">"$emit('input', $event.target.value)"</span><span class="token operator">></span></code></pre><h4 id="3-利用v-model能做什么"><a href="#3-利用v-model能做什么" class="headerlink" title="3) 利用v-model能做什么?"></a>3) 利用v-model能做什么?</h4><ul><li>v-model不仅能实现原生标签上的<strong>双向数据绑定</strong>, 也能实现父子组件间数据<strong>双向通信(同步)</strong></li><li>应用<ul><li>一般用于封装带表单项的复用性组件</li><li>elment-ui中: Input&#x2F;CheckBox&#x2F;Radio&#x2F;Select等表单项组件都封装了v-model</li></ul></li></ul><h3 id="6-组件间通信5-sync-属性修饰符"><a href="#6-组件间通信5-sync-属性修饰符" class="headerlink" title="6. 组件间通信5: sync 属性修饰符"></a>6. 组件间通信5: sync 属性修饰符</h3><h4 id="1-理解本质"><a href="#1-理解本质" class="headerlink" title="1) 理解本质:"></a>1) 理解本质:</h4><p>绑定一个自定义事件监听, 用来接收子组件分发事件携带的最新数据来更新父组件的数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">:money.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">:money</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">@update:</span>money</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total<span class="token punctuation">=</span>$event<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="2-利用sync能做什么呢"><a href="#2-利用sync能做什么呢" class="headerlink" title="2) 利用sync能做什么呢?"></a>2) 利用sync能做什么呢?</h4><ul><li>在原有父向子的基础上加上子向父通信</li><li>应用<ul><li>常用于封装可复用组件(需要更新父组件数据)<ul><li>v-model一般用于带表单项的组件</li><li>sync一般用于不带表单项标签的组件</li></ul></li><li>element-ui中: Dialog就利用sync来实现组件的隐藏</li></ul></li></ul><h3 id="7-组件间通信6-attrs与-listeners"><a href="#7-组件间通信6-attrs与-listeners" class="headerlink" title="7. 组件间通信6: $attrs与$listeners"></a>7. 组件间通信6: $attrs与$listeners</h3><h4 id="1-理解"><a href="#1-理解" class="headerlink" title="1) 理解:"></a>1) 理解:</h4><ul><li><p>$attrs: 排除props声明, class, style的所有组件标签属性组成的对象</p></li><li><p>$listeners: 级组件标签绑定的所有自定义事件监听的对象</p></li><li><p>v-bind: 的特别使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ id: someProp, <span class="token punctuation">'</span>other-attr<span class="token punctuation">'</span>: otherProp }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>v-on: 的特别使用: </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ mousedown: doThis, mouseup: doThat }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>一般: v-bind与$attrs配合使用, v-on与$listeners配合使用</p></li></ul><h4 id="2-使用它们能做什么呢"><a href="#2-使用它们能做什么呢" class="headerlink" title="2) 使用它们能做什么呢?"></a>2) 使用它们能做什么呢?</h4><ul><li>在封装可复用组件时: HintButton<ul><li>从父组件中接收不定数量&#x2F;名称的属性或事件监听</li><li>在组件内部, 传递给它的子组件</li></ul></li><li>element-ui中: Input就使用了v-bind与$attrs来接收不定的属性传递给input</li></ul><h4 id="3-扩展双击监听"><a href="#3-扩展双击监听" class="headerlink" title="3) 扩展双击监听:"></a>3) 扩展双击监听:</h4><ul><li><p><code>@dblclick=&quot;add2&quot;</code><br>绑定是自定义事件监听, 而el-button内部并没处理(没有绑定对应的原生监听, 没有分发自定义事件)<br>双击时, 不会有响应</p></li><li><p><code>@dblclick.native=&quot;add2&quot;</code><br>绑定的是原生的DOM事件监听, 最终是给组件的根标签a绑定的原生监听<br>当双击a内部的button能响应, 因为事件有冒泡</p></li></ul><h3 id="8-组件间通信7-children与-parent"><a href="#8-组件间通信7-children与-parent" class="headerlink" title="8. 组件间通信7: $children与$parent"></a>8. 组件间通信7: $children与$parent</h3><h4 id="1-理解-1"><a href="#1-理解-1" class="headerlink" title="1) 理解:"></a>1) 理解:</h4><ul><li>$children: 所有直接子组件对象的数组, 利用它可以更新多个子组件的数据</li><li>$parent: 父组件对象, 从而可以更新父组件的数据</li><li>$refs: 包含所有有ref属性的标签对象或组件对象的容器对象</li></ul><h4 id="2-利用它们能做什么"><a href="#2-利用它们能做什么" class="headerlink" title="2) 利用它们能做什么?"></a>2) 利用它们能做什么?</h4><ul><li>能方便的得到子组件&#x2F;后代组件&#x2F;父组件&#x2F;祖辈组件对象, 从而更新其data或调用其方法</li><li>官方建议不要大量使用, 优先使用props和event</li><li>在一些UI组件库定义高复用组件时会使用$children和$parent, 如Carousel组件</li></ul><h4 id="3-扩展-mixin"><a href="#3-扩展-mixin" class="headerlink" title="3) 扩展: mixin"></a>3) 扩展: mixin</h4><ul><li>多个组件有部分相同的js代码如何复用 ?</li><li>答: 利用vue的mixin技术实现</li><li>本质: 实现Vue组件的JS代码复用, 简化编码的一种技术</li></ul><h3 id="9-组件间通信8-provide与inject"><a href="#9-组件间通信8-provide与inject" class="headerlink" title="9. 组件间通信8: provide与inject"></a>9. 组件间通信8: provide与inject</h3><h4 id="1-理解-2"><a href="#1-理解-2" class="headerlink" title="1) 理解"></a>1) 理解</h4><pre class=" language-js"><code class="language-js">用来实现祖孙组件直接通信在祖组件中通过provide配置向后代组件提供数据在后代组件中通过inject配置来读取数据</code></pre><h4 id="2-注意"><a href="#2-注意" class="headerlink" title="2) 注意:"></a>2) 注意:</h4><pre class=" language-js"><code class="language-js">不太建议在应用开发中使用<span class="token punctuation">,</span> 一般用来封装vue插件provide提供的数据本身不是响应式的 <span class="token operator">==</span><span class="token operator">></span> 父组件更新了数据<span class="token punctuation">,</span> 后代组件不会变化provide提供的数据对象内部是响应式的 <span class="token operator">==</span><span class="token operator">></span> 父组件更新了数据<span class="token punctuation">,</span> 后代组件也会变化</code></pre><h4 id="3-应用"><a href="#3-应用" class="headerlink" title="3) 应用:"></a>3) 应用:</h4><pre class=" language-js"><code class="language-js">element<span class="token operator">-</span>ui中的Form组件中使用了provide和inject</code></pre><h3 id="10-组件间通信9-vuex"><a href="#10-组件间通信9-vuex" class="headerlink" title="10. 组件间通信9: vuex"></a>10. 组件间通信9: vuex</h3><ol><li><p>实现任意组件间通信</p></li><li><p>Vuex 是一个专为 Vue 应用程序设计的管理多组件共享状态数据的 Vue 插件<br>任意组件都可以读取到Vuex中store的state对象中的数据</p><p>任意组件都可以通过dispatch()或commit()来触发store去更新state中的数据</p><p>一旦state中的数据发生变化, 依赖于这些数据的组件就会自动更新</p></li></ol><h3 id="11-作用域插槽slot-scope"><a href="#11-作用域插槽slot-scope" class="headerlink" title="11. 作用域插槽slot-scope"></a>11. 作用域插槽slot-scope</h3><h4 id="1-什么情况下使用作用域插槽"><a href="#1-什么情况下使用作用域插槽" class="headerlink" title="1) 什么情况下使用作用域插槽?"></a>1) 什么情况下使用作用域插槽?</h4><ul><li><p>父组件需要向子组件传递标签结构内容</p></li><li><p>但决定父组件传递怎样标签结构的数据在子组件中</p></li></ul><h4 id="2-编码"><a href="#2-编码" class="headerlink" title="2) 编码"></a>2) 编码</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">!:</span></span> <span class="token attr-name"><span class="token namespace">子组件:</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:row</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:$index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">!:</span></span> <span class="token attr-name"><span class="token namespace">父组件:</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{row, $index}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{$index+1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> $index<span class="token number">%2</span>===<span class="token number">1</span> ? <span class="token string">'blue'</span> <span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>{{row.text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="3-应用-1"><a href="#3-应用-1" class="headerlink" title="3) 应用"></a>3) 应用</h4><ul><li>对于封装列表之类的组件特别需要</li><li>element-ui中: Table组件中就用到了slot-scope</li></ul>]]></content>
      
      
      <categories>
          
          <category> web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue前台PC项目其三</title>
      <link href="/posts/24151.html"/>
      <url>/posts/24151.html</url>
      
        <content type="html"><![CDATA[<h3 id="优化相关"><a href="#优化相关" class="headerlink" title="优化相关"></a>优化相关</h3><h4 id="swiper相关"><a href="#swiper相关" class="headerlink" title="swiper相关"></a>swiper相关</h4><h5 id="swiper轮播图影响多个页面"><a href="#swiper轮播图影响多个页面" class="headerlink" title="swiper轮播图影响多个页面"></a>swiper轮播图影响多个页面</h5><ul><li>通过选择器可以指定哪个地方需要，但是不好</li><li>通过ref最好</li></ul><h5 id="swiper创建的时间应该是在页面列表创建之后才会有效果"><a href="#swiper创建的时间应该是在页面列表创建之后才会有效果" class="headerlink" title="swiper创建的时间应该是在页面列表创建之后才会有效果"></a>swiper创建的时间应该是在页面列表创建之后才会有效果</h5><ul><li><p>静态页面是没问题的</p></li><li><p>静态页面不需要等待数据，因此monted完全可以去创建swiper</p></li><li><p>现在我们的数据是动态的，monted内部去创建，数据还没更新到界面上，因此无效</p></li><li><p>可以使用延迟定时器去创建 但是不好</p></li></ul><h5 id="使用watch-nextTick-去解决比较好"><a href="#使用watch-nextTick-去解决比较好" class="headerlink" title="使用watch + nextTick  去解决比较好"></a>使用watch + nextTick  去解决比较好</h5><ul><li><p>​Vue.nextTick 和 vm.$nextTick 效果一样</p></li><li><p>​nextTick是在最近的一次更新dom之后会立即调用传入nextTick的回调函数</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">/*   在列表数据已经有了,且已经更新显示了  数据变化后  ==>  同步调用监视的回调  => 最后异步更新界面  watch:监视bannerList，就可以知到有数据了  nextTick:界面更新后执行回调  */</span>  watch<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">bannerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//此时只是数据有了, 但界面还没用更新</span>      <span class="token comment" spellcheck="true">// swiper对象必须在列表显示之后穿件才有效果</span>      <span class="token comment" spellcheck="true">/*       Vue.$nextTick(callback)      在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。      */</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在此次数据变化导致界面更新完成后执行回调</span>         <span class="token comment" spellcheck="true">// DOM 更新了</span>        <span class="token keyword">new</span> <span class="token class-name">Swiper</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>swiper<span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// direction: 'horizontal', // 垂直切换选项</span>            loop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 循环模式选项</span>            autoplay<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//自动轮播</span>              delay<span class="token punctuation">:</span><span class="token number">4000</span><span class="token punctuation">,</span>              disableOnInteraction<span class="token punctuation">:</span><span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//用户操作后是佛停止自动播放</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 如果需要分页器</span>            pagination<span class="token punctuation">:</span> <span class="token punctuation">{</span>              el<span class="token punctuation">:</span> <span class="token string">'.swiper-pagination'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 如果需要前进后退按钮</span>            navigation<span class="token punctuation">:</span> <span class="token punctuation">{</span>              nextEl<span class="token punctuation">:</span> <span class="token string">'.swiper-button-next'</span><span class="token punctuation">,</span>              prevEl<span class="token punctuation">:</span> <span class="token string">'.swiper-button-prev'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre></li></ul><h5 id="Floor当中的轮播没效果？"><a href="#Floor当中的轮播没效果？" class="headerlink" title="Floor当中的轮播没效果？"></a>Floor当中的轮播没效果？</h5><ul><li>​它是根据数据循环创建组件对象的，外部的floor创建的时候</li><li>​所以数据肯定是已经获取到了，所以我们在mounted内部去创建swiper</li></ul><h5 id="定义可复用的轮播组件"><a href="#定义可复用的轮播组件" class="headerlink" title="定义可复用的轮播组件"></a>定义可复用的轮播组件</h5><ul><li>​banner是在watch当中去创建swiper 因为组件创建的时候数据不一定更新</li><li>​floor是在mounted当中去创建swiper，因为内部组件创建的时候，数据已经存在了</li></ul><h4 id="Search优化"><a href="#Search优化" class="headerlink" title="Search优化"></a>Search优化</h4><h5 id="根据分类和关键字进行搜索，解决在search组件内部再进行搜索的bug"><a href="#根据分类和关键字进行搜索，解决在search组件内部再进行搜索的bug" class="headerlink" title="根据分类和关键字进行搜索，解决在search组件内部再进行搜索的bug"></a>根据分类和关键字进行搜索，解决在search组件内部再进行搜索的bug</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//真正到了搜索页面我们都要去解析拿到相关的参数  修改我们的搜索参数</span>    <span class="token comment" spellcheck="true">//beforeMount 去同步更新data数据</span>    <span class="token comment" spellcheck="true">//mounted     去异步发送请求</span><span class="token comment" spellcheck="true">//在搜索页重新输入关键字或者点击类别不会再发送请求，因为mounted只会执行一次，需要监视路由变化</span></code></pre><h5 id="动态显示和删除选中的搜索条件发送请求"><a href="#动态显示和删除选中的搜索条件发送请求" class="headerlink" title="动态显示和删除选中的搜索条件发送请求"></a>动态显示和删除选中的搜索条件发送请求</h5><ul><li>​判断参数内部是否存在categoryName  存在就显示</li><li>​判断参数内部是否存在keyword 存在就显示</li><li>​点击事件，如果删除就把参数对应的数据清除，顺便发送新的请求</li></ul><h5 id="解决删除选中的搜索条件后路径不变的bug"><a href="#解决删除选中的搜索条件后路径不变的bug" class="headerlink" title="解决删除选中的搜索条件后路径不变的bug"></a>解决删除选中的搜索条件后路径不变的bug</h5><ul><li>​上面删除发送请求我们的请求路径还是不变</li><li>​我们需要手动去push跳转到去除对应参数的新路由</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在 Search组件 中的 removeCategory()和 removeKeyword()方法中添加</span>          <span class="token comment" spellcheck="true">// this.$router.push({  //有历史记录</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 无历史记录</span>            name<span class="token punctuation">:</span><span class="token string">'search'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// params:this.$route.params,</span>            query<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query          <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="响应式对象数据属性的添加和删除"><a href="#响应式对象数据属性的添加和删除" class="headerlink" title="响应式对象数据属性的添加和删除"></a>响应式对象数据属性的添加和删除</h5><pre class=" language-js"><code class="language-js">对象当中的属性数据更改会导致页面更改，响应式数据添加：    错的：如果对象当中没有对应的属性数据： 直接添加一个属性，这个属性不是响应式的        因为vue只是在开始对对象当中的所有属性添加getter和setter，后期直接添加的没有        对的：我们需要使用Vue<span class="token punctuation">.</span><span class="token keyword">set</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span>方法  这样的添加属性就是响应式的   必须对响应式对象添加属性删除：    错的： 直接<span class="token keyword">delete</span>删除对象当中的属性，不会导致页面更改        因为响应式属性只是在检测属性值的改变而不是检测属性的删除     对的：我们需要使用Vue<span class="token punctuation">.</span><span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">delete</span>方法  除了删除，还添加了更新界面的操作</code></pre>]]></content>
      
      
      <categories>
          
          <category> web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue前台PC项目其二</title>
      <link href="/posts/15766.html"/>
      <url>/posts/15766.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue前台Pc项目其二"><a href="#Vue前台Pc项目其二" class="headerlink" title="Vue前台Pc项目其二"></a>Vue前台Pc项目其二</h3><p>获取<code>ajax</code> <code>vuex</code> <code>vue-router</code>数据等在上一篇<a href="https://yyshino.top/posts/33425.html">Vue前台Pc项目其一</a></p><h4 id="Search组件"><a href="#Search组件" class="headerlink" title="Search组件"></a>Search组件</h4><h4 id="分析Search组件的结构"><a href="#分析Search组件的结构" class="headerlink" title="分析Search组件的结构"></a>分析Search组件的结构</h4><p>Search组件 <a href="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh/0Shino0/0Shino0Picture/img/vue05_search.jpg">点我查看Search组件</a></p><blockquote><p>Search的头部 (关键字展示区)</p><blockquote><p>SearchSelect (关键字选择区)</p></blockquote><p>Search的主要部分 (商品详细区)</p><blockquote><p>MyPagination (页码区)</p></blockquote></blockquote><h5 id="初始化获取数据"><a href="#初始化获取数据" class="headerlink" title="初始化获取数据"></a>初始化获取数据</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 首先 在data中初始化数据</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">{</span>        options<span class="token punctuation">:</span><span class="token punctuation">{</span>          category1Id<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一级分类ID</span>          category2Id<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 二级分类ID</span>          category3Id<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 三级分类ID</span>          categoryName<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 分类名称</span>          keyword<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 搜索关键字</span>            <span class="token comment" spellcheck="true">// trademark: '', // 品牌: "ID:品牌名称" "1:苹果"</span>          props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 商品属性的数组: ["属性ID:属性值:属性名"] ["2:6.0～6.24英寸:屏幕尺寸"]</span>          order<span class="token punctuation">:</span> <span class="token string">'1:desc'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 排序方式  1: 综合,2: 价格 asc: 升序,desc: 降序  "1:desc"</span>            pageNo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 页码</span>          pageSize<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//每页数量</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 异步获取 商品数据</span>        <span class="token comment" spellcheck="true">/*         异步获取商品列表        */</span>        <span class="token function">getShopList</span><span class="token punctuation">(</span>page<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 更新options中的pageNo</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>pageNo <span class="token operator">=</span> page          <span class="token comment" spellcheck="true">// 发送搜索请求</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getProductList'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// methods和computed中 获取vuex管理的接口数据</span>        <span class="token function">getShopList</span><span class="token punctuation">(</span>page<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 更新options中的pageNo</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>pageNo <span class="token operator">=</span> page          <span class="token comment" spellcheck="true">// 发送搜索请求</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getProductList'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'goodsList'</span><span class="token punctuation">,</span><span class="token string">'total'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注意需要引入 mapGetters</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 管理我们的关键字</span><span class="token comment" spellcheck="true">// 利用 v-if 选择展示 关键字</span>          <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fl sui-tag"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"with-x"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"options.categoryName"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>options<span class="token punctuation">.</span>categoryName<span class="token punctuation">}</span><span class="token punctuation">}</span>              <span class="token operator">&lt;</span>i @click<span class="token operator">=</span><span class="token string">"removeCategory"</span><span class="token operator">></span>×<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"with-x"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"options.keyword"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>options<span class="token punctuation">.</span>keyword<span class="token punctuation">}</span><span class="token punctuation">}</span>              <span class="token operator">&lt;</span>i @click<span class="token operator">=</span><span class="token string">"removeKeyword"</span><span class="token operator">></span>×<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"with-x"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"options.trademark"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>options<span class="token punctuation">.</span>trademark<span class="token punctuation">}</span><span class="token punctuation">}</span>              <span class="token operator">&lt;</span>i @click<span class="token operator">=</span><span class="token string">"removeTrademark"</span><span class="token operator">></span>×<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"with-x"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"prop in options.props"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"prop"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>prop<span class="token punctuation">}</span><span class="token punctuation">}</span>              <span class="token operator">&lt;</span>i @click<span class="token operator">=</span><span class="token string">"removeProp(index)"</span><span class="token operator">></span>×<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token comment" spellcheck="true">// 定义 设置和清除关键字的方法</span>      <span class="token comment" spellcheck="true">/*       删除一个属性条件      */</span>      <span class="token function">removeProp</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除props中index的元素</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 重新请求获取数据列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getShopList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/*       添加一个属性条件       */</span>      <span class="token function">addProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>props<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options        <span class="token comment" spellcheck="true">// 如果已经存在条件数组中，不添加</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token comment" spellcheck="true">// 向props数组添加一个条件字符串  子向父通信==>vue自定义事件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 重新请求获取数据列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getShopList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*       删除品牌条件      */</span>      <span class="token function">removeTrademark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  更新options中的trademark为指定的值</span>        <span class="token comment" spellcheck="true">// this.options.trademark = ''</span>        <span class="token comment" spellcheck="true">// delete this.options.trademark   // ==> 不会导致界面更新</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span><span class="token string">'trademark'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 重新请求获取数据列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getShopList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*       设置品牌条件      */</span>      <span class="token function">setTrademark</span><span class="token punctuation">(</span>trademark<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  如果当前品牌已经在条件中了，直接结束</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>trademark<span class="token operator">===</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>trademark<span class="token punctuation">)</span> <span class="token keyword">return</span>                 <span class="token comment" spellcheck="true">//  更新options中的trademark为指定的值</span>        <span class="token comment" spellcheck="true">// this.options.trademark = trademark</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span><span class="token string">'trademark'</span><span class="token punctuation">,</span>trademark<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 重新请求获取数据列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getShopList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*         删除分类的条件        */</span>        <span class="token function">removeCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 更新分类相关数据u</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>category1Id <span class="token operator">=</span> <span class="token string">''</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>category2Id <span class="token operator">=</span> <span class="token string">''</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>category3Id <span class="token operator">=</span> <span class="token string">''</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>categoryName <span class="token operator">=</span> <span class="token string">''</span>          <span class="token comment" spellcheck="true">// 重新发起请求</span>          <span class="token comment" spellcheck="true">// this.getShopList()</span>          <span class="token comment" spellcheck="true">// 重新跳转到search，不再携带删除的条件所对应的参数(query)</span>          <span class="token comment" spellcheck="true">// this.$router.push({</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'search'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// query:this.$route.query,</span>            params<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">/*         删除关键字的条件        */</span>        <span class="token function">removeKeyword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 更新分类相关数据u</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>keyword <span class="token operator">=</span> <span class="token string">''</span>          <span class="token comment" spellcheck="true">// 重新发起请求</span>          <span class="token comment" spellcheck="true">// this.getShopList()</span>                    <span class="token comment" spellcheck="true">// 重新跳转到search，不再携带删除的条件所对应的参数(params)</span>          <span class="token comment" spellcheck="true">// this.$router.push({</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'search'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// params:this.$route.params,</span>            query<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 3) 在Search中分发事件</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'removeKeyword'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">/*         更新options中参数属性        */</span>        <span class="token function">updateParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 取出参数数据</span>          <span class="token keyword">const</span> <span class="token punctuation">{</span>keyword<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params          <span class="token keyword">const</span> <span class="token punctuation">{</span>category1Id<span class="token punctuation">,</span>category2Id<span class="token punctuation">,</span>category3Id<span class="token punctuation">,</span>categoryName<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query          <span class="token comment" spellcheck="true">// 保存到options中</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span>            keyword<span class="token punctuation">,</span>            category1Id<span class="token punctuation">,</span>            category2Id<span class="token punctuation">,</span>            category3Id<span class="token punctuation">,</span>            categoryName          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 管理排序相关</span><span class="token comment" spellcheck="true">//在computed中添加</span>     <span class="token comment" spellcheck="true">/*       得到包含当前分类项标识(orderFlag)和排序方式(orderType)的数组      */</span>     <span class="token function">orderArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在methods中添加</span>      <span class="token comment" spellcheck="true">/*       设置新的排序搜索      */</span>      <span class="token function">setOrder</span><span class="token punctuation">(</span>orderFlag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 得到当前的排序项和排序方式</span>        <span class="token keyword">let</span> <span class="token punctuation">[</span>flag<span class="token punctuation">,</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderArr        <span class="token comment" spellcheck="true">// 点击的是当前排序项：只需要切换orderType</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>orderFlag<span class="token operator">===</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            type <span class="token operator">=</span> type <span class="token operator">===</span><span class="token string">'desc'</span><span class="token operator">?</span><span class="token string">'asc'</span><span class="token punctuation">:</span><span class="token string">'desc'</span>          <span class="token comment" spellcheck="true">// console.log(type);</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 点击的不是当前排序项： 更新orderFlag为指定的值，orderType更新为desc</span>          flag <span class="token operator">=</span> orderFlag          type <span class="token operator">=</span> <span class="token string">'desc'</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 请求获取商品分页列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>order <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> type        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getShopList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span></code></pre><h5 id="分页组件"><a href="#分页组件" class="headerlink" title="分页组件"></a>分页组件</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// MyPagination 组件</span><span class="token comment" spellcheck="true">// Search父组件传递数据 同时初始化 页码数据</span>            <span class="token operator">&lt;</span>MyPagination              <span class="token punctuation">:</span>currentPage <span class="token operator">=</span> <span class="token string">"options.pageNo"</span>              <span class="token punctuation">:</span>pageSize <span class="token operator">=</span> <span class="token string">"options.pageSize"</span>              <span class="token punctuation">:</span>total <span class="token operator">=</span> <span class="token string">"total"</span>              <span class="token punctuation">:</span>showPageNo   <span class="token operator">=</span> <span class="token string">"5"</span>              @currentChange <span class="token operator">=</span> <span class="token string">"getShopList"</span>            <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>MyPagination<span class="token operator">></span><span class="token comment" spellcheck="true">// 接收数据</span>        props<span class="token punctuation">:</span><span class="token punctuation">{</span>         currentPage<span class="token punctuation">:</span><span class="token punctuation">{</span>             type<span class="token punctuation">:</span>Number<span class="token punctuation">,</span>             <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token number">1</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         total<span class="token punctuation">:</span><span class="token punctuation">{</span>             type<span class="token punctuation">:</span>Number<span class="token punctuation">,</span>             <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token number">0</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         pageSize<span class="token punctuation">:</span><span class="token punctuation">{</span>             type<span class="token punctuation">:</span>Number<span class="token punctuation">,</span>             <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token number">10</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         showPageNo<span class="token punctuation">:</span><span class="token punctuation">{</span>             type<span class="token punctuation">:</span>Number<span class="token punctuation">,</span>             <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//  要求传的值要是奇数</span>            validator<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">{</span>             myCurrentPage<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentPage<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//初始值由父组件来指定</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 设计算法 换页 </span><span class="token comment" spellcheck="true">// computed 计算总页数</span>        <span class="token function">totalPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span>total<span class="token punctuation">,</span>pageSize<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>total<span class="token operator">/</span>pageSize<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//计算首尾页</span>        <span class="token function">startEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> start<span class="token punctuation">,</span>end            <span class="token keyword">const</span> <span class="token punctuation">{</span>myCurrentPage<span class="token punctuation">,</span>showPageNo<span class="token punctuation">,</span>totalPages<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>            <span class="token comment" spellcheck="true">// 计算start</span>            <span class="token comment" spellcheck="true">/*             举例子            myCurrentPage,showPageNo,totalPages            4               5           8       23[4]56            start = 4-2            */</span>            <span class="token comment" spellcheck="true">//   start = myCurrentPage - (showPageNo-1)/2</span>            start <span class="token operator">=</span> myCurrentPage <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>showPageNo<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 如果myCurrentPage比较小，计算的结果可能小于1   start>=1</span>            <span class="token comment" spellcheck="true">/*             myCurrentPage,showPageNo,totalPages            4               5           8       [1]2345            */</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                start <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 计算end</span>            <span class="token comment" spellcheck="true">/*             myCurrentPage,showPageNo,totalPages            4               5           8       23[4]56            start = 2            end = 2 + 5 - 1            */</span>            end <span class="token operator">=</span> start <span class="token operator">+</span> showPageNo <span class="token operator">-</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">// end的最大值为totalPages</span>            <span class="token comment" spellcheck="true">/*             myCurrentPage,showPageNo,totalPages            8               5           8       45[6]78            start = 6   ==> 4            end = 10 ==> 超过了totalPages  8            */</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token operator">></span>totalPages<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 修改end 为 totalPages</span>                end <span class="token operator">=</span> totalPages                <span class="token comment" spellcheck="true">// 修正start    </span>                start <span class="token operator">=</span> end <span class="token operator">-</span> showPageNo <span class="token operator">+</span><span class="token number">1</span>                <span class="token comment" spellcheck="true">// 一旦总页数小于最大连续页码数 ==>  start&lt;1</span>                <span class="token comment" spellcheck="true">/*                 myCurrentPage,showPageNo,totalPages                5               5           4       12[3]4                end = 4                start = 0    ===> 1                */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    start <span class="token operator">=</span> <span class="token number">1</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>start<span class="token punctuation">,</span>end<span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         包含从start到end的数组        */</span>        <span class="token function">startEndArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span>start<span class="token punctuation">,</span>end<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startEnd            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> page<span class="token operator">=</span>start<span class="token punctuation">;</span>page<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span>page<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> arr        <span class="token punctuation">}</span></code></pre><h5 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Detail</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      ImageList<span class="token punctuation">,</span>      Zoom    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        skuId<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        skuNum<span class="token punctuation">:</span><span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 我们一般在beforeMount当中去处理数据</span>    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>skuId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>skuId    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'categoryView'</span><span class="token punctuation">,</span><span class="token string">'skuInfo'</span><span class="token punctuation">,</span><span class="token string">'spuSaleAttrList'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// categoryView(){</span>      <span class="token comment" spellcheck="true">//   return this.$store.getters.categoryView</span>      <span class="token comment" spellcheck="true">// }</span>      <span class="token function">imgList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>skuInfo<span class="token punctuation">.</span>skuImageList <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSkuDetailInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">getSkuDetailInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getSkuDetailInfo'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>skuId<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 排它处理用户点击悬着销售属性值 (谁变绿)</span>      <span class="token function">changeChecked</span><span class="token punctuation">(</span>spuSaleAttr<span class="token punctuation">,</span>spuSaleAttrList<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一步：多有的属性值全部变白</span>        spuSaleAttrList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>isChecked <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 第二步：点击的这个属性值变绿</span>        spuSaleAttr<span class="token punctuation">.</span>isChecked <span class="token operator">=</span> <span class="token string">'1'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 添加购物车按钮点击之后的逻辑</span>      <span class="token keyword">async</span> <span class="token function">addShopCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 发请求让后台给数据库的购物车数据表中添加一条数据</span>        <span class="token comment" spellcheck="true">// 根据添加成功还是失败来决定要不要条状到添加购物车成功页面</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span>skuId<span class="token punctuation">,</span>skuNum<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// this.$store.dispatch('addOrUpdateCart',{skuId,skuNum})</span>        <span class="token comment" spellcheck="true">// action当中异步函数的返回值，异步函数范沪指一定是promis</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'addOrUpdateCart'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>skuId<span class="token punctuation">,</span>skuNum<span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'添加购物车成功'</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 成功需要跳转 编程式导航跳转</span>          <span class="token comment" spellcheck="true">// 因为下个页面  添加购物车成功页面需要  商品购物车成功页面需要  商品数量和商品详情信息</span>          <span class="token comment" spellcheck="true">// 以后如果碰到的数据是简单数据，那么我们考虑路由传参</span>          <span class="token comment" spellcheck="true">// 如果碰到数据是浮渣数据 那么我们考虑存储手段</span>          <span class="token comment" spellcheck="true">// localStorage     setItem  getItem   removeItem  clear</span>          <span class="token comment" spellcheck="true">// sessionStorage   setItem  getItem   removeItem  clear</span>          <span class="token comment" spellcheck="true">// 区别：localStorage是永久存储   sessionStorage浏览器关闭就没了 </span>          <span class="token comment" spellcheck="true">// 序列化   将js数据转化为json数据</span>          sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'SKUINFO_KEY'</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>skuInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/addcartsuccess?skuNum='</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>skuNum<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//const result = await this.$store.dispath('addOrUpdateCart'{skuId,skuNum}) </span>        <span class="token comment" spellcheck="true">// if(result === 'ok'){  </span>        <span class="token comment" spellcheck="true">// }else{          </span>        <span class="token comment" spellcheck="true">// }</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>放大镜大图与小图</p><ul><li><p>交互</p><ul><li>图片列表的点击切换样式</li><li>图片列表点击大图要跟着切换  组件通信index下标</li></ul><p></p></li><li><p>放大镜</p><ul><li>​鼠标动 </li><li>​遮罩动<ul><li>求遮罩的位置</li><li>设置遮罩的位置</li></ul></li><li>​大图动<ul><li>大图反向移动遮罩的位置2倍</li></ul></li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Zoom组件</span>    props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'imgList'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        defaultIndex<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token comment" spellcheck="true">//显示图片的默认下标s</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'syncDefaultIndex'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>syncDefaultIndex<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">defaultImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、解决家报错  不能在上面直接写   imgList[defaultIndex].imgUrl</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imgList<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultIndex<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">syncDefaultIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultIndex <span class="token operator">=</span> index      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">move</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加移动事件。代表鼠标移动</span>        <span class="token comment" spellcheck="true">// 获取鼠标位置</span>        <span class="token keyword">let</span> mouseX <span class="token operator">=</span> event<span class="token punctuation">.</span>offsetX        <span class="token keyword">let</span> mouseY <span class="token operator">=</span> event<span class="token punctuation">.</span>offsetY        <span class="token comment" spellcheck="true">// 2、计算遮罩的位置让遮罩动</span>        <span class="token keyword">let</span> mask <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mask        <span class="token comment" spellcheck="true">// 蒙版</span>        <span class="token keyword">let</span> maskX <span class="token operator">=</span> mouseX <span class="token operator">-</span> mask<span class="token punctuation">.</span>offsetWidth<span class="token operator">/</span><span class="token number">2</span>        <span class="token keyword">let</span> maskY <span class="token operator">=</span> mouseY <span class="token operator">-</span> mask<span class="token punctuation">.</span>offsetHeight<span class="token operator">/</span><span class="token number">2</span>        <span class="token keyword">let</span> big <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>big        <span class="token comment" spellcheck="true">// 限定临界值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maskX <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          maskX <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>maskX <span class="token operator">></span> mask<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">{</span>          maskX <span class="token operator">=</span> mask<span class="token punctuation">.</span>offsetWidth        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maskY <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          maskY <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>maskY <span class="token operator">></span> mask<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">{</span>          maskY <span class="token operator">=</span> mask<span class="token punctuation">.</span>offsetHeight        <span class="token punctuation">}</span>        mask<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> maskX <span class="token operator">+</span><span class="token string">'px'</span>        mask<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> maskY <span class="token operator">+</span><span class="token string">'px'</span>        <span class="token comment" spellcheck="true">// 3、大图动        大图向着鼠标相反方向移动两倍</span>        big<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">-</span>maskX <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span>        big<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token operator">-</span>maskY <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span>              <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ImageList</span>    props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'imgList'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">{</span>        defaulIndex<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//  默认有橙色框框的图片下标</span>        swiperOptions<span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// direction: 'horizontal', // 垂直切换选项</span>          <span class="token comment" spellcheck="true">// loop: true, // 循环模式选项</span>          <span class="token comment" spellcheck="true">// autoplay:{  //自动轮播</span>          <span class="token comment" spellcheck="true">//   delay:4000,</span>          <span class="token comment" spellcheck="true">//   disableOnInteraction:false    //用户操作后是佛停止自动播放</span>          <span class="token comment" spellcheck="true">// },</span>          <span class="token comment" spellcheck="true">// 如果需要分页器</span>          <span class="token comment" spellcheck="true">// pagination: {</span>          <span class="token comment" spellcheck="true">//   el: '.swiper-pagination',</span>          <span class="token comment" spellcheck="true">// },</span>           slidesPerView<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>           slidesPerGroup<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 如果需要前进后退按钮</span>          navigation<span class="token punctuation">:</span> <span class="token punctuation">{</span>            nextEl<span class="token punctuation">:</span> <span class="token string">'.swiper-button-next'</span><span class="token punctuation">,</span>             prevEl<span class="token punctuation">:</span> <span class="token string">'.swiper-button-prev'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>     methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">changeDefaultIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaulIndex <span class="token operator">=</span> index        <span class="token comment" spellcheck="true">// 通过全局事件总线把选中的index传递给zoom</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'syncDefaultIndex'</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span></code></pre><p>ShopCart</p><pre class=" language-js"><code class="language-js">    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 重新发送请求</span>      <span class="token function">getCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getCartList'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 修改购物车中商品数量</span>      <span class="token keyword">async</span> <span class="token function">changeCartNum</span><span class="token punctuation">(</span>shopCart<span class="token punctuation">,</span>disNum<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 正对输入的数据是最终的商品熟练，我们得转化为变化的量</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 输入正数表示用户 想要的数量</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>disNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            disNum <span class="token operator">=</span> disNum <span class="token operator">-</span> shopCart<span class="token punctuation">.</span>skuNum          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            disNum <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">-</span>shopCart<span class="token punctuation">.</span>skuNum          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 输入负数</span>            <span class="token comment" spellcheck="true">//针对点击+-的数据，传递过来的是变化的量</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>disNum <span class="token operator">+</span> shopCart<span class="token punctuation">.</span>skuNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              disNum <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> shopCart<span class="token punctuation">.</span>skuNum            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 吧传递古来的数据全部转化为正确的变化的量之后就可以发起请求</span>          <span class="token comment" spellcheck="true">// 修改数据库数据</span>          <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'addOrUpdateCart'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>skuId<span class="token punctuation">:</span>shopCart<span class="token punctuation">.</span>skuId<span class="token punctuation">,</span>skuNum<span class="token punctuation">:</span>disNum<span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'修改数量成功'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 重新发起请求</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 修改购物车中商品的选中状态</span>      <span class="token keyword">async</span> <span class="token function">updateOne</span><span class="token punctuation">(</span>shopCart<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateCartChecked'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>skuId<span class="token punctuation">:</span>shopCart<span class="token punctuation">.</span>skuId<span class="token punctuation">,</span>isChecked<span class="token punctuation">:</span>shopCart<span class="token punctuation">.</span>isChecked<span class="token operator">?</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'修改状态成功'</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 删除购物车单个</span>      <span class="token keyword">async</span> <span class="token function">deleteOne</span><span class="token punctuation">(</span>shopCart<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'deleteCart'</span><span class="token punctuation">,</span>shopCart<span class="token punctuation">.</span>skuId<span class="token punctuation">)</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 删除购物车多个</span>      <span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'deleteCartAll'</span><span class="token punctuation">)</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'删除多个成功'</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// mapState使用数组   必须名字相同    数据只能总的state当中的数据才能使用，模块化后不能使用</span>      <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// shopCartList:state => state.shopcart.shopCartList[0].cartInfoList</span>        <span class="token comment" spellcheck="true">/*         出现意外问题        在购物车内刷新出现如下问题        TypeError: Cannot read properties of undefined (reading 'cartInfoList')        */</span>        shopCartList<span class="token punctuation">:</span>state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>shopcart<span class="token punctuation">.</span>shopCartList      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*       选择的数量      */</span>      <span class="token function">checkedNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopCartList<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>isChecked<span class="token punctuation">)</span><span class="token punctuation">{</span>            prev <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> prev        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*       总共支付      */</span>      <span class="token function">allMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopCartList<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>isChecked<span class="token punctuation">)</span><span class="token punctuation">{</span>            prev <span class="token operator">+</span><span class="token operator">=</span> item<span class="token punctuation">.</span>cartPrice <span class="token operator">*</span> item<span class="token punctuation">.</span>skuNum          <span class="token punctuation">}</span>          <span class="token keyword">return</span> prev         <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*       判断全选   可读  可写      */</span>      isAllCheck<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopCartList<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>isChecked<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">async</span> <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// this.$store.dispatch('updateCartChecked',cal?1:0)    是调用updateCartCheckedAll异步函数</span>          <span class="token comment" spellcheck="true">// 它的结果拿的是异步函数的返回值   固定的那个promise，不是函数return后面Promise.all的返回值promise</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateCartCheckedAll'</span><span class="token punctuation">,</span>val<span class="token operator">?</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'修改所有数据成功'</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>          <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span></code></pre><h5 id="交易订单-Trade"><a href="#交易订单-Trade" class="headerlink" title="交易订单 Trade"></a>交易订单 Trade</h5><pre class=" language-js"><code class="language-js">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        orderNo<span class="token punctuation">:</span><span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 定义函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTradeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">getTradeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getTradeInfo'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getAddress'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 修改默认收获地址,排它</span>      <span class="token function">changeDefault</span><span class="token punctuation">(</span>userAddress<span class="token punctuation">,</span>userAddressList<span class="token punctuation">)</span><span class="token punctuation">{</span>        userAddressList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>isDefault <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        userAddress<span class="token punctuation">.</span>isDefault <span class="token operator">=</span> <span class="token string">'1'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 提交订单  不使用vuex</span>      <span class="token keyword">async</span> <span class="token function">submitOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 带上交易编号和交易信息发送请求穿件订单</span>        <span class="token keyword">let</span> tradeNo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tradeInfo<span class="token punctuation">.</span>tradeNo        <span class="token keyword">let</span> tradeData <span class="token operator">=</span> <span class="token punctuation">{</span>          consignee<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultUserAddress<span class="token punctuation">.</span>consignee<span class="token punctuation">,</span>          consigneeTel<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultUserAddress<span class="token punctuation">.</span>phoneNum<span class="token punctuation">,</span>          deliveryAddress<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultUserAddress<span class="token punctuation">.</span>userAddress<span class="token punctuation">,</span>          paymentWay<span class="token punctuation">:</span><span class="token string">"ONLINE"</span><span class="token punctuation">,</span>          orderComment<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 购物车的详细信息 detailArrayList</span>          orderDetailList<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>detailArrayList        <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$API<span class="token punctuation">.</span><span class="token function">reqSubmitOrder</span><span class="token punctuation">(</span>tradeNo<span class="token punctuation">,</span>tradeData<span class="token punctuation">)</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this.orderNo = result.data    // 这里是是存储订单编号，存不存都行。因为订单编号是要带到下个页面的</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/pay?orderNo='</span><span class="token operator">+</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提交失败，错误信息：'</span><span class="token operator">+</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*  */</span>    computed<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// userAddressList 接口损毁</span>      <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'detailArrayList'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        tradeInfo<span class="token punctuation">:</span>state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>trade<span class="token punctuation">.</span>tradeInfo <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// mock 模拟userAddressList接口</span>        userAddressList<span class="token punctuation">:</span>state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>trade<span class="token punctuation">.</span>userAddressList <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 计算最终确定的用户信息，更具上面点击修改默认而发送变化的</span>      <span class="token function">defaultUserAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userAddressList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>isDefault <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="支付Pay"><a href="#支付Pay" class="headerlink" title="支付Pay"></a>支付Pay</h5><pre class=" language-js"><code class="language-js">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        orderNo<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        payInfo<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        payStatus<span class="token punctuation">:</span><span class="token number">0</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>orderNo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>orderNo    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPayInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token keyword">async</span> <span class="token function">getPayInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$API<span class="token punctuation">.</span><span class="token function">reqPayInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderNo<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>payInfo <span class="token operator">=</span> result<span class="token punctuation">.</span>data        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 1、点击按钮能够弹出消息盒子</span>      <span class="token comment" spellcheck="true">// 2、、生成二维码图片（请求回来的支付信息当中包含了一个生成二维码的所有的数据并不是图片url(微信给我们的一个数据)）</span>      <span class="token comment" spellcheck="true">// 3、轮询</span>      <span class="token keyword">async</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、点击立即支付后，先生成二维码</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> imgUrl <span class="token operator">=</span> <span class="token keyword">await</span> QRCode<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>payInfo<span class="token punctuation">.</span>codeUrl<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 2、 生成二维码url成功之后，再去弹出消息盒子</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>imgUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"/>`</span></span><span class="token punctuation">,</span> <span class="token string">'请使用微信扫码支付'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>              dangerouslyUseHTMLString<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              showClose<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>              showCancelButton<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>              cancelButtonText<span class="token punctuation">:</span><span class="token string">'支付遇到问题'</span><span class="token punctuation">,</span>              confirmButtonText<span class="token punctuation">:</span><span class="token string">'我已经成功支付'</span><span class="token punctuation">,</span>              center<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>              beforeClose<span class="token punctuation">:</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span>instance<span class="token punctuation">,</span>done<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token string">'confirm'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 点击确认按钮的逻辑</span>                  <span class="token comment" spellcheck="true">// if(this.payStatus !== 200){</span>                  <span class="token comment" spellcheck="true">//   // success    代表成功   绿色</span>                  <span class="token comment" spellcheck="true">//   // error    代表失败错误   红色</span>                  <span class="token comment" spellcheck="true">//   // warning    代表警告   橙色</span>                  <span class="token comment" spellcheck="true">//   // info       代表提示    灰色 </span>                  <span class="token comment" spellcheck="true">//   this.$message.success('请确保支付成功，支付成功会自动跳转')</span>                  <span class="token comment" spellcheck="true">// }</span>                  <span class="token comment" spellcheck="true">// 后门</span>                  <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token keyword">null</span>                  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/paysuccess'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token string">'cancel'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请联系前台小姐姐'</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">// 点击取消按钮的逻辑</span>                  <span class="token comment" spellcheck="true">// 清除定时器</span>                  <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token keyword">null</span>                  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// .then()   //点击了确认按钮后的操作</span>              <span class="token comment" spellcheck="true">// .catch(); //点击了取消按钮后的操作</span>              <span class="token comment" spellcheck="true">// 无论是点击确认按钮还是点击取消按钮，都会强制的关闭messageBox</span>                        <span class="token comment" spellcheck="true">// 3、设置循环定时器(轮询),发送请求看用户对于这个订单是否支付成功</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$API<span class="token punctuation">.</span><span class="token function">reqPayStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderNo<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 4、如果支付成功   </span>                          <span class="token comment" spellcheck="true">// 1)跳转支付成功页面   </span>                          <span class="token comment" spellcheck="true">// 2)清除定时器  </span>                          <span class="token comment" spellcheck="true">// 3)关闭消息盒子  </span>                          <span class="token comment" spellcheck="true">// 4)存储支付成功的状态  是为了后期用户点击按钮的时候的判断依据</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>payStatus <span class="token operator">=</span> <span class="token number">200</span>                  <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token keyword">null</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>$msgbox<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//关闭消息盒子</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/paysuccess'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 生成失败，不需要弹出</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 支付成功</span>          <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn-look"</span> to<span class="token operator">=</span><span class="token string">"/center"</span><span class="token operator">></span>查看订单<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>          <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn-goshop"</span> to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>继续购物<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre><h5 id="Login-和-Register"><a href="#Login-和-Register" class="headerlink" title="Login 和 Register"></a>Login 和 Register</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Login</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        phone<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span><span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取用户数据</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span>phone<span class="token punctuation">,</span>password<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>phone<span class="token operator">&amp;&amp;</span>password<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 发请求</span>            <span class="token comment" spellcheck="true">/*             13700000000            111111            */</span>           <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'userLogin'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>phone<span class="token punctuation">,</span>password<span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登录成功，准备跳转首页'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//  下面的需要和导航守卫配合去到想去而没有去到的地方</span>           <span class="token keyword">let</span> redirect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>redirect <span class="token operator">||</span> <span class="token string">'/'</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>redirect<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Register</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        phone<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        code<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        password2<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        isCheck<span class="token punctuation">:</span><span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> success <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$validator<span class="token punctuation">.</span><span class="token function">validateAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对所有表单项进行验证</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取用户信息</span>          <span class="token keyword">let</span> <span class="token punctuation">{</span>phone<span class="token punctuation">,</span>code<span class="token punctuation">,</span>password<span class="token punctuation">,</span>password2<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>          <span class="token comment" spellcheck="true">// if(phone &amp;&amp; code &amp;&amp; password &amp;&amp; password2 &amp;&amp; password === password2){</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 发请求注册用户</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'userRegister'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>phone<span class="token punctuation">,</span>code<span class="token punctuation">,</span>password<span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'注册成功'</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// }</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue前台PC项目其一</title>
      <link href="/posts/33425.html"/>
      <url>/posts/33425.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue前台PC"><a href="#Vue前台PC" class="headerlink" title="Vue前台PC"></a>Vue前台PC</h3><ul><li>来源b站尚硅谷<a href="https://www.bilibili.com/video/BV1Vf4y1T7bw?spm_id_from=333.337.search-card.all.click">点我跳转</a></li><li>项目以实现目标为主</li><li>优化留到最后</li></ul><h5 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h5><ol><li>vue版本 2.6.11,如果没有<code>vue-template-compiler</code>需要安装（用于 模板编译）</li><li>eslint错误级别禁用 在vue.config.js中 <code>lintOnSave:false</code> ,</li><li>引入 less预编译器,让vue能够识别less</li></ol><pre class=" language-css"><code class="language-css">   &lt;style lang=<span class="token string">"less"</span> scoped>   &lt;/style></code></pre><h4 id="项目文件夹"><a href="#项目文件夹" class="headerlink" title="项目文件夹"></a>项目文件夹</h4><blockquote><p>public<br>src</p><blockquote><p>api&#x2F;&#x2F;发送请求相关</p><blockquote><p>ajax.js&#x2F;&#x2F;axios二次封装</p><p>index.js&#x2F;&#x2F;包含应用的所有接口的接口请求函数</p><p>mockAjax.js&#x2F;&#x2F;mock模拟接口函数</p></blockquote><p>assets&#x2F;&#x2F;外部资源<br>components&#x2F;&#x2F;普通组件<br>mock&#x2F;&#x2F;mock模拟接口<br>pages&#x2F;&#x2F;路由组件<br>plugins&#x2F;&#x2F;插件</p><blockquote><p>element.js&#x2F;&#x2F;element-ui插件</p><p>swiper.js&#x2F;&#x2F;swiper轮播图</p><p>vaildate.js&#x2F;&#x2F; 表单验证插件的配置文件</p></blockquote><p>router&#x2F;&#x2F;注册路由相关</p><blockquote><p>index.js&#x2F;&#x2F;路由器对象</p><p>routes.js&#x2F;&#x2F;所有路由匹配的数组</p></blockquote><p>store&#x2F;&#x2F;vuex</p><blockquote><p>modules&#x2F;&#x2F;各 组件小模块</p><p>index.js&#x2F;&#x2F;vuex最核心的管理对象store </p></blockquote><p>utils&#x2F;&#x2F;工具包<br>App.js&#x2F;&#x2F;App<br>main.js&#x2F;&#x2F;主函数</p></blockquote><p>package.json<br>vue.config.js</p></blockquote><h3 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h3><h4 id="观察页面确定页面主体框架"><a href="#观察页面确定页面主体框架" class="headerlink" title="观察页面确定页面主体框架"></a>观察页面确定页面主体框架</h4><ul><li><p>所有的功能页面都是 上中下结构    上和下是不变化的，只有中间在变化<br>Home组件 结构<a href="https://pic1.xuehuaimg.com/proxy/https://cdn.jsdelivr.net/gh/0Shino0/0Shino0Picture/img/vue04_construction.jpg">点我查看Home组件结构</a></p></li><li><p><strong>第一个大组件 Home</strong></p></li><li><p><strong>组件  由上往下</strong></p></li></ul><blockquote><p>Header<br>Home</p><blockquote><p>TypeNav<br>ListContainer<br>TodayContainer<br>Rank<br>Like<br>Floor<br>Floor<br>Floor</p></blockquote><p>Footer</p></blockquote><h4 id="拆分组件"><a href="#拆分组件" class="headerlink" title="拆分组件"></a>拆分组件</h4><ul><li><h5 id="拆分静态组件-x3D-x3D-gt-普通组件和路由组件（）"><a href="#拆分静态组件-x3D-x3D-gt-普通组件和路由组件（）" class="headerlink" title="拆分静态组件 &#x3D;&#x3D;&gt; 普通组件和路由组件（）"></a>拆分静态组件 &#x3D;&#x3D;&gt; 普通组件和路由组件（）</h5><ol><li>普通组件  &#x3D;&#x3D;&gt; 局部注册  或  全局注册(main.js中注册)</li><li>路由组件  &#x3D;&#x3D;&gt; <ol><li>在routes 当中注册</li><li><code>&lt;a&gt;</code>&gt;标签 替换为 <code>&lt;router-link&gt;</code></li><li><code>router-view</code>选定路由组件展示区域</li></ol></li></ol></li></ul><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><ol><li><strong>二次封装axios</strong></li></ol><p><code>ajax.js</code></p><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">/*    axios二次封装   1. 配置通用的基础路径和超时   2. 显示请求进度条   3. 成功返回的数据不再是response, 而直接是响应体数据response.data   4. 统一处理请求错误, 具体请求也可以选择处理或不处理   */</span>   <span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> NProgress <span class="token keyword">from</span> <span class="token string">"nprogress"</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token string">'nprogress/nprogress.css'</span>   <span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store'</span>   <span class="token comment" spellcheck="true">/*1. 配置通用的基础路径和超时 */</span>   <span class="token comment" spellcheck="true">// service是一个能任意ajax请求的函数，当然可以作为对象使用</span>   <span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// http://gmall-h5-api.atguigu.cn/api/product/getBaseCategoryList</span>      baseURL<span class="token punctuation">:</span><span class="token string">'http://gmall-h5-api.atguigu.cn/api'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 基础路径</span>      timeout<span class="token punctuation">:</span><span class="token number">20000</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//超时事件</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 添加请求拦截器</span>   service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 2.显示请求进度条 */</span>      <span class="token comment" spellcheck="true">// 显示请求进度条: 在请求拦截器中</span>      NProgress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> userTempId <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>userTempId      <span class="token keyword">if</span><span class="token punctuation">(</span>userTempId<span class="token punctuation">)</span><span class="token punctuation">{</span>         config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>userTempId <span class="token operator">=</span> userTempId      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 携带登录后标识token  </span>      <span class="token keyword">let</span> token <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>token      <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span>         config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token <span class="token operator">=</span> token      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 必须返回config</span>      <span class="token keyword">return</span> config   <span class="token comment" spellcheck="true">//后面会根据返回的config,使用xhr对象发ajax请求</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 添加响应拦截器</span>   service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>      response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//请求成功的返回的回调</span>         <span class="token comment" spellcheck="true">// 隐藏请求进度条: 在响应拦截器的成功的回调中</span>         NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">/* 成功返回的数据不再是response，而直接是响应体数据response.data */</span>         <span class="token keyword">return</span> response<span class="token punctuation">.</span>data      <span class="token punctuation">}</span><span class="token punctuation">,</span>      error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//请求失败的返回的回调</span>         <span class="token comment" spellcheck="true">// 隐藏请求进度条: 在响应拦截器失败的回调中</span>         NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">/* 4.统一处理请求错误,具体请求也可以选中处理或不处理 */</span>         <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">'未知的请求错误'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// return new Promise(() => {})</span>         <span class="token comment" spellcheck="true">// return error //  不能这么写</span>         <span class="token comment" spellcheck="true">// throw error      //抛出错误</span>         <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//返回一个失败的Promise, 并将错误传递下去</span>      <span class="token punctuation">}</span>   <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// service.get('./xxx').then((result) => { </span>   <span class="token comment" spellcheck="true">//     // const result = response.data</span>   <span class="token comment" spellcheck="true">//  }).catch(( error ) => { </span>   <span class="token comment" spellcheck="true">//     // 做一些提示之外的特定工作</span>   <span class="token comment" spellcheck="true">//   })</span>   <span class="token comment" spellcheck="true">// 向外暴露 service</span>   <span class="token keyword">export</span> <span class="token keyword">default</span> service</code></pre><ol start="2"><li><strong>阅读接口文档</strong></li><li><strong>postman工具测试接口</strong><ol><li>postman是用来测试API接口的工具</li><li>postman也是一个活接口文档</li><li>使用步骤<br>(1) 启动 =&#x3D;=&gt; 选择登陆==&gt; cancel ==&#x3D;&gt; 进入主界面<br>(2) 输入url&#x2F;参数进行请求测试<br>(3) 注意post请求体参数需要指定为json格式<br>(4) 保存测试接口 &#x3D;&#x3D;&gt; 后面可以反复使用</li></ol></li><li><strong>接口函数</strong><ul><li>所有接口的请求函数模块，我们定义一个index.js去写</li><li>以后请求什么数据直接导入去调函数就可以<br>示例<br><code>index.js</code></li></ul></li></ol><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">/*    包含所有接口请求函数的模块   */</span>   <span class="token keyword">import</span> ajax <span class="token keyword">from</span> <span class="token string">'./ajax'</span>   <span class="token comment" spellcheck="true">//获取商品的三级分类列表</span>   <span class="token keyword">export</span> <span class="token keyword">const</span> reqBaseCategoryList <span class="token operator">=</span><span class="token function"> </span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>ajax<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/product/getBaseCategoryList'</span><span class="token punctuation">)</span></code></pre><ol start="5"><li><p><strong>发送请求</strong> &#x3D;&#x3D;&gt; 产生跨域</p><ol><li>解决跨域<br>vue.config.js<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//配置代理服务器</span>devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>  proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只对请求路由以/api开头的请求进行代理转发</span>      target<span class="token punctuation">:</span> <span class="token string">'http://182.92.128.115'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 转发的目标url</span>      changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 支持跨域</span><span class="token comment" spellcheck="true">// pathRewrite: {‘^/api’: ‘’}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ol></li><li><p><strong>是否用到 <code>vuex</code>管理数据</strong></p><ol><li><p>vuex</p><ul><li>以home组件为例</li><li>在store中 异步ajax获取数据</li><li><code>store/modules/home.js</code>  ( 如下代码)</li></ul><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">/*    vuex管理的home模块   */</span>   <span class="token keyword">import</span> <span class="token punctuation">{</span>reqBaseCategoryList<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api'</span>   <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>     baseCategoryList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 所有分类的数组</span>   <span class="token punctuation">}</span>   <span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*      接收保存分类列表     */</span>   <span class="token function">  RECEIVE_BASE_CATEGORY_LIST</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>       state<span class="token punctuation">.</span>baseCategoryList <span class="token operator">=</span> list     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*      异步获取商品三级分类列表     */</span>     <span class="token keyword">async</span><span class="token function"> getBaseCategoryList</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span><span class="token function"> reqBaseCategoryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token function"> </span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">      commit</span><span class="token punctuation">(</span><span class="token string">'RECEIVE_BASE_CATEGORY_LIST'</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>data<span class="token punctuation">)</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span>   <span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     state<span class="token punctuation">,</span>     actions<span class="token punctuation">,</span>     mutations<span class="token punctuation">,</span>     getters   <span class="token punctuation">}</span></code></pre><ul><li><p>在组件中</p><ul><li><p>dispatch</p></li><li><p><code>mapState</code> 和 <code>mapGetters</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*mapState,mapGetters是 vuex提供给我们的辅助函数    mapState 辅助函数帮助我们生成计算属性    mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：*/</span><span class="token comment" spellcheck="true">// 必须先引入</span><span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">,</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>     <span class="token comment" spellcheck="true">//计算属性中</span>      <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'detailArrayList'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        tradeInfo<span class="token punctuation">:</span>state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>trade<span class="token punctuation">.</span>tradeInfo <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// mock 模拟userAddressList接口</span>        userAddressList<span class="token punctuation">:</span>state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>trade<span class="token punctuation">.</span>userAddressList <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul></li><li><p>不使用vuex</p><ul><li>将状态直接定义在当前组件当中</li><li>异步ajax发送获取数据</li></ul></li></ol></li><li><p><strong>mock模拟数据接口</strong></p><ul><li>安装 <code>npm install mockjs</code></li><li>文档<ul><li><a href="http://mockjs.com/">mock-doc</a></li><li><a href="https://github.com/nuysoft/Mock">mock-github</a></li></ul></li><li>web前台<ul><li>后台向前台提供API接口, 只负责数据的提供和计算，而完全不处理展现</li><li>前台通过Http(Ajax)请求获取数据,　在浏览器端动态构建界面显示数据</li></ul></li><li>理解JSON数据结构<br>a. 结构: 名称, 数据类型<br>b. value<br>c. value可以变, 但结构不能变</li><li>利用axios 封装mock 接口函数</li><li>mockAjax与ajax只在基础baseUrl上有区别</li></ul><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">// 只需要将原来的替换 即可</span>   baseURL<span class="token punctuation">:</span><span class="token string">'http://gmall-h5-api.atguigu.cn/api'</span>   <span class="token operator">==</span><span class="token operator">></span>   baseURL<span class="token punctuation">:</span><span class="token string">'/mock'</span></code></pre><ul><li>在mockSever.js中 书写接口函数（格式如下）</li></ul></li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 利用mockjs提供mock接口*/</span><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token keyword">import</span> recommends <span class="token keyword">from</span> <span class="token string">'./recommends.json'</span><span class="token keyword">import</span> floors <span class="token keyword">from</span> <span class="token string">'./floors.json'</span><span class="token keyword">import</span> ranks <span class="token keyword">from</span> <span class="token string">'./ranks.json'</span><span class="token keyword">import</span> likes <span class="token keyword">from</span> <span class="token string">'./likes.json'</span><span class="token keyword">import</span> banners <span class="token keyword">from</span> <span class="token string">'./banners.json'</span><span class="token keyword">import</span> address <span class="token keyword">from</span> <span class="token string">'./address.json'</span><span class="token comment" spellcheck="true">// 提供今日接口</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/mock/recommends'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span>recommends<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 提供楼层接口</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/mock/floors'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span>floors<span class="token punctuation">}</span><span class="token punctuation">)</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/mock/ranks'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span>ranks<span class="token punctuation">}</span><span class="token punctuation">)</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/mock/likes'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span>likes<span class="token punctuation">}</span><span class="token punctuation">)</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/mock/banners'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span>banners<span class="token punctuation">}</span><span class="token punctuation">)</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/mock/address'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span>address<span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MockServer()'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="展示数据"><a href="#展示数据" class="headerlink" title="展示数据"></a>展示数据</h4><ul><li><p>普通数据</p><pre class=" language-js"><code class="language-js">v<span class="token operator">-</span><span class="token keyword">if</span>v<span class="token operator">-</span><span class="token keyword">for</span><span class="token punctuation">:</span><span class="token punctuation">(</span>v<span class="token operator">-</span>bind<span class="token punctuation">)</span>@<span class="token punctuation">(</span>click<span class="token punctuation">)</span></code></pre></li><li><p>需传递数据</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//组件通信</span><span class="token comment" spellcheck="true">//1. props 组件通信的方式</span>    <span class="token comment" spellcheck="true">//父 => 子</span>    <span class="token comment" spellcheck="true">//父组件中</span>    <span class="token operator">&lt;</span>Xxx <span class="token punctuation">:</span>data<span class="token operator">=</span> <span class="token string">"data"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//子组件接收数据</span>    props<span class="token punctuation">:</span><span class="token punctuation">{</span>        data<span class="token punctuation">:</span>数据类型    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2. vue自定义事件</span>    <span class="token comment" spellcheck="true">// 子 => 父</span>    <span class="token comment" spellcheck="true">// 在当前组件绑定自定义事件</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// xxxXxx为分发的事件</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>$xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xxxXxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxxXxx<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 使用 $once只能触发一次</span>       <span class="token comment" spellcheck="true">// this.$xxx.$once('xxxXxx',this.xxxXxx)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在子组件当中适当的位置去触发事件并传递参数</span>    <span class="token comment" spellcheck="true">// $emit(),在子组件当中去触发，子组件对象触发</span>    <span class="token comment" spellcheck="true">// xxx 为传递的数据</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'addComment'</span><span class="token punctuation">,</span>xxx<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//3. 通信方式 全局事件总线</span>    <span class="token comment" spellcheck="true">// 任意情况</span>    <span class="token comment" spellcheck="true">// 两个条件</span>        <span class="token comment" spellcheck="true">// - 1、所有的组件对象都能找到它</span>        <span class="token comment" spellcheck="true">// - 2、可以调用$on和$emit</span>    <span class="token comment" spellcheck="true">// 在主函数 vue 的对象中</span>       <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1) 创建或指定事件总线对象，保存到Vue的原型上</span>        Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//剩余操作 同 2</span>        <span class="token comment" spellcheck="true">//4. 通信方式 slot插槽</span>    <span class="token comment" spellcheck="true">// 组件可多次复用时使用</span><span class="token comment" spellcheck="true">//消息订阅(subscribe)与发布(publish) [一般不用，因为有全局事件总线]</span></code></pre></li></ul><h4 id="中点站"><a href="#中点站" class="headerlink" title="中点站"></a>中点站</h4><h5 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h5><p>拆分静态组件 &#x3D;&gt; 通过ajax.js书写接口函数获取数据 &#x3D;&gt; 利用vuex管理数据(数据少时也可以直接在当前组件中) &#x3D;&gt; 自定义事件&#x2F;通过vue指令 &#x3D;&gt; 传递&#x2F;渲染数据到页面</p><ul><li><p>通过上述的工作流程，我们已经可以解决绝大多数问题</p></li><li><p>由组件的视角我们需要</p><ul><li><p>Footer组件以及Header组件（ajax + vuex + v-for）</p></li><li><p>Home的部分子组件</p><ul><li><p><code>TypeNav</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//TypeNav需要在 Home以及Search 下都需要使用 => 在main.js中定义为全局组件</span><span class="token comment" spellcheck="true">//引入</span><span class="token keyword">import</span> TypeNav <span class="token keyword">from</span> <span class="token string">'@/components/TypeNav'</span><span class="token comment" spellcheck="true">// 注册全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>TypeNav<span class="token punctuation">.</span>name<span class="token punctuation">,</span>TypeNav<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 当点击TypeNav时我们需要跳转到搜索页面(携带参数),并且隐藏一级列表</span><span class="token comment" spellcheck="true">//在data中定义标识 数据 currentIndex isShowFirst</span>currentIndex<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span> <span class="token comment" spellcheck="true">// 默认为-2  表示当前选中的商品分类 商品分类有0-15</span>isShowFirst<span class="token punctuation">:</span>path <span class="token operator">===</span> <span class="token string">'/'</span> <span class="token comment" spellcheck="true">// bool 表示当前是否为 首页  </span><span class="token comment" spellcheck="true">//path为vue-router 指定的当前路径this.$route.path</span><span class="token comment" spellcheck="true">//定义方法改变</span>     <span class="token comment" spellcheck="true">/*     隐藏一级列表    */</span>    <span class="token function">hideFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 标识当前已经离开包含分类div了</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span>      <span class="token comment" spellcheck="true">// 如果当前不是首页，隐藏一级列表</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isShowFirst <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* 显示一级列表 */</span>    <span class="token function">showFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 标识当前已经进入包含分类div了</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>      <span class="token comment" spellcheck="true">//保证显示一级列表</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowFirst <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     显示指定下标的子分类列表    */</span>    <span class="token comment" spellcheck="true">// showSubList:_.throttle((index) => {  //不可以，原因在于箭头函数没有自己的this，且不能通过bind来指定特定的this</span>    showSubList<span class="token punctuation">:</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这个事件监听回调函数调用的频率太高</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'throttle'</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 只有当还没有离开整个分类的div是才更新下标</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/* {      trailing:'false'  //最后一次事件不延迟处理    } */</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义搜索方法</span><span class="token function">toSearch</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> categoryname<span class="token punctuation">,</span> category1id<span class="token punctuation">,</span> category2id<span class="token punctuation">,</span> category3id <span class="token punctuation">}</span> <span class="token operator">=</span>         target<span class="token punctuation">.</span>dataset<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// if(target.tagName.toUpperCase() === 'A'){</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>categoryname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//准备query参数</span>        <span class="token comment" spellcheck="true">// categoryName=图书、影像、电子书刊&amp;category1Id=1</span>        <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token punctuation">{</span>          categoryName<span class="token punctuation">:</span> categoryname<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>category1id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          query<span class="token punctuation">.</span>category1Id <span class="token operator">=</span> category1id<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>category2id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          query<span class="token punctuation">.</span>category2Id <span class="token operator">=</span> category2id<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>category3id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          query<span class="token punctuation">.</span>category3Id <span class="token operator">=</span> category3id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 准备一个用跳转的对象</span>        <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span><span class="token string">'search'</span><span class="token punctuation">,</span>          query<span class="token punctuation">,</span>          params<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params  <span class="token comment" spellcheck="true">//需要携带上当前已有params参数</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 跳转到search</span>        <span class="token comment" spellcheck="true">/*         从其他到搜索页：push()        从搜索到搜索页：replace()        */</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"search"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当前是搜索</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 隐藏一级列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hideFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>ListContainer</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// banner轮播图数据 由接口获取</span><span class="token comment" spellcheck="true">// template数据展示</span>          <span class="token operator">&lt;</span>swiper <span class="token punctuation">:</span>options<span class="token operator">=</span><span class="token string">"swiperOptions"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>swiper<span class="token operator">-</span>slide <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-slide"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"banner in bannerList"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"banner.id"</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>img <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"banner.imageUrl"</span> <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>swiper<span class="token operator">-</span>slide<span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-pagination"</span> slot<span class="token operator">=</span><span class="token string">"pagination"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-button-prev"</span> slot<span class="token operator">=</span><span class="token string">"button-prev"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-button-next"</span> slot<span class="token operator">=</span><span class="token string">"button-next"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>swiper<span class="token operator">></span><span class="token comment" spellcheck="true">// 利用 swiper 展示轮播图</span><span class="token comment" spellcheck="true">// data中定义</span>      swiperOptions<span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// direction: 'horizontal', // 垂直切换选项</span>          loop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 循环模式选项</span>          autoplay<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//自动轮播</span>            delay<span class="token punctuation">:</span><span class="token number">4000</span><span class="token punctuation">,</span>            disableOnInteraction<span class="token punctuation">:</span><span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//用户操作后是佛停止自动播放</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 如果需要分页器</span>          pagination<span class="token punctuation">:</span> <span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'.swiper-pagination'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 如果需要前进后退按钮</span>          navigation<span class="token punctuation">:</span> <span class="token punctuation">{</span>            nextEl<span class="token punctuation">:</span> <span class="token string">'.swiper-button-next'</span><span class="token punctuation">,</span>            prevEl<span class="token punctuation">:</span> <span class="token string">'.swiper-button-prev'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        </code></pre><p>具体可查看<a href="https://www.swiper.com.cn/">swiper官网</a></p></li><li><p><code>TodayRecommend</code> <code>Rand</code> <code>Like</code> <code>Floor</code> 后台获取数据 &#x3D;&gt; 展示(v-for)</p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析</title>
      <link href="/posts/41718.html"/>
      <url>/posts/41718.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue源码分析"><a href="#Vue源码分析" class="headerlink" title="Vue源码分析"></a>Vue源码分析</h3><p>对Vue源码，本人也在学习当中<br>下面是一些github上大佬的解析</p><h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><ul><li>Vue.js是一款MVVM框架，上手快速简单易用，通过响应式在修改数据的时候更新视图。- Vue.js的响应式原理依赖于Object.defineProperty，尤大大在Vue.js文档中就已经提到过，这也是Vue.js不支持IE8 以及更低版本浏览器的原因。Vue通过设定对象属性的 setter&#x2F;getter 方法来监听数据的变化，通过getter进行依赖收集，而每个setter方法就是一个观察者，在数据变更的时候通知订阅者更新视图。————<a href="https://github.com/answershuto/learnVue">github</a></li></ul><p>剖析github上某基友仿vue实现的mvvm库<br><a href="https://github.com/DMQ/mvvm">地址</a></p>]]></content>
      
      
      <categories>
          
          <category> web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue进阶</title>
      <link href="/posts/4795.html"/>
      <url>/posts/4795.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><pre class=" language-bash"><code class="language-bash">    1<span class="token punctuation">)</span>创建脚手架4/3的vue项目, 并运行    <span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli    安装脚手架4/3的版本    vue create vue-demo        使用安装的脚手架创建一个新的vue项目    <span class="token function">npm</span> run serve              运行创建的项目命令    2<span class="token punctuation">)</span>创建脚手架2的vue项目    <span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli-init    vue init webpack vue-demo        <span class="token function">npm</span> run dev </code></pre><p><strong>eslint禁用</strong><br>1、局部禁用</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 局部禁用某个错误提示</span>    <span class="token comment" spellcheck="true">/* eslint-disable no-unused-vars */</span></code></pre><p>2、全局禁用</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//package.json当中找到eslintConfig项，全局配置禁用某些错误提示</span>    <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"no-unused-vars"</span><span class="token punctuation">:</span><span class="token string">"off"</span>        <span class="token punctuation">}</span></code></pre><p>3、关闭</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//开发阶段直接关闭eslint的提示功能</span>    手动创建vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  写自己想要配置的东西去覆盖系统自带的</span>        <span class="token comment" spellcheck="true">// 关闭ESLint的规则</span>        lintOnSave<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span></code></pre><p>vue模板解析</p><pre class=" language-js"><code class="language-js">Vue渲染两种方式：​<span class="token number">1</span>、render：h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>​<span class="token number">2</span>、components注册组件，template解析，但是vue导入需要导入带解析器的版本</code></pre><h4 id="模块化与组件化概念"><a href="#模块化与组件化概念" class="headerlink" title="模块化与组件化概念"></a>模块化与组件化概念</h4><h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>1)理解: 向外提供特定功能的js程序, 一般就是一个js文件<br>2)为什么:  js代码更多更复杂<br>3)作用: 复用js, 简化js的编写, 提高js运行效率</p><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><p>1)理解: 用来实现特定(局部)界面功能效果的代码集合(html&#x2F;css&#x2F;js&#x2F;image)<br>2)为什么: 一个界面的功能很复杂<br>3)作用: 复用编码, 简化项目编码, 提高运行效率</p><p><strong>模块化</strong><br>当应用的js都以模块来编写的, 这个应用就是一个模块化的应用</p><p><strong>组件化</strong><br>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用, 应用的开发方式就是组件化的</p><h5 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h5><p>分两大步：<strong>静态页面实现</strong> 和  <strong>动态交互实现</strong></p><p>静态页面实现：</p><ol><li><p>拆分组件拆分页面 定义组件   最大化重用（html,css,图片）</p></li><li><p>组装组件     就是把各个组件组装起来放在App.vue里面</p></li><li><p>渲染组件     就是把组件拼装完后，不考虑数据，先展示出来</p></li></ol><p>动态组件界面：</p><ol><li><strong>初始化数据动态显示</strong><ul><li>初始化数据分析<ul><li>数据类型    一般我们的数据最终都是放在一个数组内部，数组内部放对象</li><li>数据名称    comments:[{},{},{}]</li><li>定义组件的原则<blockquote><ul><li>数据用到不是说展示就代表用，而是说数据的增删改查都叫用到数据</li><li>如果这个数据只是某一个组件用的，那么数据就在这一个组件当中定义</li><li>如果这个数据在某些个组件当中用的，那么就找这些个共同的祖先组件去定义</li></ul></blockquote></li><li><strong>注意</strong>：组件标签名和属性名大小写问题：<ul><li>基本规则：要么原样去写，要么转小写中间用-连接</li></ul></li></ul></li></ul></li></ol><pre class=" language-js"><code class="language-js">        AddComment        <span class="token operator">&lt;</span>AddComment<span class="token operator">/</span><span class="token operator">></span>  或者  <span class="token operator">&lt;</span>add<span class="token operator">-</span>comment<span class="token operator">></span></code></pre><ol><li><strong>用户的交互</strong></li></ol><ul><li>对于数据的操作：<ul><li>数据在哪，操作数据的方法就要在哪定义，而不是随便的在某一个组件当中去操作数据</li><li>想要操作数据的组件，可以通过调用操作数据的方法，间接去操作数据</li></ul></li><li>添加和删除：<ul><li>子组件添加事件和事件回调，事件回调当中去调用外部操作数据的方法</li><li>数据所在的组件去添加操作数据的方法</li></ul></li></ul><ol><li><strong>组件化编码的基本规范</strong></li></ol><blockquote><p>子组件里面不要去更新父组件当中的数据<br>1、分析数据在哪个组件<br>2、数据在哪个组件，那么更新数据的行为（方法）就在哪个组件<br>3、父组件的数据传递给子组件，是用来让子组件读取显示使用的，而不是让子组件去修改的（可以但是不该）<br>4、子组件需要更新数据，那么需要调用父组件传递过来的更新数据方法</p></blockquote><ol><li><strong>组件的使用</strong></li></ol><ul><li>模板页面</li></ul><pre class=" language-js"><code class="language-js">  <span class="token operator">&lt;</span>template<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 页面模板</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 2)JS模块对象</span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 3)样式</span>    <span class="token operator">&lt;</span>style<span class="token operator">></span>        <span class="token comment" spellcheck="true">// 样式定义</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h4 id="vue组件通信方式"><a href="#vue组件通信方式" class="headerlink" title="vue组件通信方式"></a>vue组件通信方式</h4><ul><li>组件关系  <ul><li>父子 </li><li>兄弟  </li><li>祖孙  </li><li>其它</li></ul></li></ul><h5 id="1-props-组件通信的方式："><a href="#1-props-组件通信的方式：" class="headerlink" title="1. props 组件通信的方式："></a>1. <strong>props 组件通信的方式：</strong></h5><ul><li><p>是组件通信最常用最简单的一种方式,最基础的通信，用的也比较多</p></li><li><p>父可以给子传递函数数据和非函数数据<br>​    1.  传递非函数数据，本质就是父亲给儿子传数据<br>​    2.  传递函数数据，本质是父亲想要儿子的数据，通过函数调用传参的方式把数据传递给父亲</p></li><li><p>使用场合：</p><blockquote><p>父子最好<br>父向非子后代传递，必须逐层去传递   麻烦<br>不是父子关系的组件，必须借助相同的父组件去通信  麻烦</p></blockquote></li><li><p>不足（不是父子就狠麻烦） 兄弟关系，就必须先把一个数据给了父亲，然后通过父亲再给另一个</p></li></ul><h5 id="2-vue自定义事件"><a href="#2-vue自定义事件" class="headerlink" title="2. vue自定义事件"></a>2. <strong>vue自定义事件</strong></h5><p>  a.  <code>$on(eventName, listener)</code>: 绑定自定义事件监听<br>  b.  <code>$emit(eventName, data)</code>: 分发自定义事件<br>  c.  <code>$off(eventName)</code>: 解绑自定义事件监听<br>  d.  <code>$once(eventName, listener)</code>: 绑定事件监听, 但只能处理一次<br>    - 事件类型 :  无数个  </p><ul><li>回调函数 ： 谁调用 （自己调用）  调用时候默认的参数 （有可能有也可能没有  如果调用时候传了参数，默认参数就有 如果没有传，那就没有（undefined））</li><li>使用方法</li></ul><pre class=" language-js"><code class="language-js">    父组件当中去给子组件对象绑定事件监听       @直接在组件标签对象当中去绑定，和绑定系统事件一致     $on，在mounted当中去绑定，但是需要获取到子组件标签对象（通过ref指定，然后获取到）     <span class="token function">$once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">和$on</span><span class="token punctuation">(</span><span class="token punctuation">)</span>类似，但是只能触发一次    在子组件当中适当的位置去触发事件并传递参数        <span class="token function">$emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>在子组件当中去触发，子组件对象触发            <span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>可以在销毁之前解绑事件</code></pre><ul><li>适用场合<ul><li>子向父传递数据，其余情况都不能用</li></ul></li></ul><h5 id="3-通信方式-全局事件总线"><a href="#3-通信方式-全局事件总线" class="headerlink" title="3. 通信方式 全局事件总线"></a>3. <strong>通信方式 全局事件总线</strong></h5><ul><li>事件总线(对象)满足的两个条件：<ul><li>1、所有的组件对象都能找到它  </li><li>2、可以调用$on和$emit</li></ul></li><li>原理<blockquote><p>本身自定义事件可以完成子向父之间的传递，因为父组件中可以看到子组件，可以为子组件绑定事件，子组件中可以触发事件<br>但是如果不是子向父，那么其余的就没办法了，因为两个组件互相是看不到的，没办法再其中一个给另外一个绑定事件<br>此时我们可以借助中间人，也就是他们都可以同时看到的一个人，就是全局事件总线（所有的组件对象都能看到</p></blockquote></li></ul><blockquote><p><strong>在接收数据的组件中，获取总线绑定事件</strong><br><strong>在发送数据的组件中，获取总线触发事件</strong></p></blockquote><ul><li>使用<ul><li>全局事件总线说到底就是个对象，我们通常就是用vm对象作为全局事件总线使用,把vm对象添加到Vue原型对象  就形成全局事件总线（vm）</li><li>示例</li></ul></li></ul><pre class=" language-js"><code class="language-js">    <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span>   <span class="token comment" spellcheck="true">//配置总线  就是把vm挂到Vue的原型上，让所有的组件对象都能找到他，进而调用$on和$emit  </span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>        render<span class="token punctuation">:</span>h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>适用场合： 任何场合</li></ul><h5 id="4-通信方式-slot插槽"><a href="#4-通信方式-slot插槽" class="headerlink" title="4. 通信方式 slot插槽"></a>4. <strong>通信方式 slot插槽</strong></h5><ul><li>简介<ul><li>一个组件会多次使用，但是又有少部分结构数据会发生变化，（当然可以用不同的子组件）那么就得通过父组件告诉子组件变化的内容是什么，此时就要用到这个插槽</li><li>子组件当中<slot>其实就是占位用的，让父组件给它填充内容，可以带标签</slot></li></ul></li><li><strong>默认插槽</strong>和<strong>具名插槽</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>vue当中内置的组件标签  <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>slot<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 默认插槽 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> slot内部的东西 是等待着父组件使用的时候给传递过来的 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>嘿嘿<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>​        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token operator">></span>​            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 具名插槽 <span class="token operator">--</span><span class="token operator">></span>​        <span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>​    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><ul><li><strong>作用域插槽</strong><blockquote><p>子组件的slot可以通过 属性传递值给父组件，然后父组件可以根据不同需求改变这个slot内部的显示结构<br>把子组件的值，传给父组件固定的区域进行操作<br>父组件的数据是给子组件展示的<br>子组件展示过程当中，数据的结构由父组件决定的。</p></blockquote></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(todo,index) in todos"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"todos.id"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>slot <span class="token punctuation">:</span>todo<span class="token operator">=</span><span class="token string">"todo"</span><span class="token operator">></span>                    <span class="token punctuation">{</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><ul><li>适用场合<pre class=" language-md"><code class="language-md">  1.当一个组件有不确定的结构时, 就需要使用slot技术了  2.注意: 插槽内容是在父组件中编译后, 再传递给子组件  3.如果决定结构的数据在父组件, 那用默认slot或命名命名slot    (1) 当只有一个不确定的结构时, 可以使用默认slot    (2) 当有多个不确定的结构时, 可以使用命名slot  4.如果决定结构的数据在子组件, 那需要使用作用域slot</code></pre></li></ul><h5 id="5-消息订阅-subscribe-与发布-publish"><a href="#5-消息订阅-subscribe-与发布-publish" class="headerlink" title="5. 消息订阅(subscribe)与发布(publish)"></a>5. <strong>消息订阅(subscribe)与发布(publish)</strong></h5><ol><li><a href="https://github.com/mroderick/PubSubJS">在线文档</a></li><li>下载: <code>npm install -S pubsub-js</code></li></ol><h4 id="vue中解决跨域"><a href="#vue中解决跨域" class="headerlink" title="vue中解决跨域"></a>vue中解决跨域</h4><p><strong>跨域：</strong><br><a href="https://yyshino.top/posts/20614.html#%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F">跨域是什么</a></p><p><strong>配置代理服务器解决跨域</strong><br>1、本身我们现在就跑在开发服务器 <code>webpack-dev-server</code> 而这个服务器带了一个模块，这个模块可以支持我们使用代理</p><p>2、原理：在浏览器发请求的时候，把这个请求发给服务器上的这个代理模块<br>      再由这个代理模块转发给我们真正的服务器<br>      这样的话，我们原来由浏览器直接发送请求到服务器就转化为服务器到服务器之间的请求</p><p>3、你要让代理转发，那么得告诉代理你的这个请求什么情况需要转发，配置以固定什么开头的路径需要代理转发，代理看到这个路径是以它开头就会帮你转发</p><p>4、代理转发的时候会把路径交给真正的请求服务器，作为请求路径，需要把固定的开头去除</p><pre class=" language-json"><code class="language-json">    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 支持跨域<span class="token punctuation">,</span> 如果协议/主机也不相同<span class="token punctuation">,</span> 必须加上        proxy<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"/api"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                target<span class="token operator">:</span> <span class="token string">"http://localhost:4000"</span><span class="token punctuation">,</span>                pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"^/api"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  //要看真正的后台接口路径当中有没有包含/api，有就不用去掉，没有就得去掉                changeOrigin<span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="vue-ajax"><a href="#vue-ajax" class="headerlink" title="vue-ajax"></a>vue-ajax</h4><p>vue-axios与axios官方库大同小异<br>不过多赘述,想了解的可以<br>    参考<a href="https://axios-http.com/zh/">axios文档</a><br>    我的博客<a href="https://yyshino.top/posts/20614.html">ajax-axios</a></p><h4 id="vueui组件库"><a href="#vueui组件库" class="headerlink" title="vueui组件库"></a>vueui组件库</h4><p><strong>1. 移动端UI组件库</strong><br>1)<code>Vant</code>  <a href="https://youzan.github.io/vant/#/zh-CN/">https://youzan.github.io/vant/#/zh-CN/</a><br>2)<code>Cube UI</code>  <a href="https://didi.github.io/cube-ui/#/zh-CN">https://didi.github.io/cube-ui/#/zh-CN</a><br>3)<code>Mint UI</code>  <a href="http://mint-ui.github.io/">http://mint-ui.github.io/</a> (经常不能访问)</p><p><strong>2. PC端UI组件库</strong><br>4)<code>Element UI</code>  <a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a><br>5)<code>IView UI</code>  <a href="https://www.iviewui.com/">https://www.iviewui.com/</a></p><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><ol><li><code>vue-router</code>的理解<ol><li>vue的一个插件库</li><li>专门用来实现一个SPA应用</li><li>基于vue的项目基本都会用到此库</li><li>中文文档: <a href="http://router.vuejs.org/zh-cn/">http://router.vuejs.org/zh-cn/</a></li><li>下载: <code>npm install vue-router -S</code></li></ol></li><li><code>SPA</code>的理解<ol><li>单页Web应用（single page web application，SPA）</li><li>整个应用只有一个完整的页面</li><li>点击页面中的链接不会刷新页面, 本身也不会向服务器发请求</li><li>当点击路由链接时, 只会做页面的局部更新</li><li>数据都需要通过ajax请求获取, 并在前端异步展现</li></ol></li></ol><ol start="3"><li><strong>VueRouter(): 用于创建路由器的构建函数</strong><pre class=" language-js"><code class="language-js"> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 多个配置项</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><strong>路由配置</strong><pre class=" language-js"><code class="language-js"> routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>   <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一般路由</span>     path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>     component<span class="token punctuation">:</span> About   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自动跳转路由</span>     path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      redirect<span class="token punctuation">:</span> <span class="token string">'/about'</span>   <span class="token punctuation">}</span> <span class="token punctuation">]</span></code></pre></li><li><strong>注册路由器</strong><pre class=" language-js"><code class="language-js"> <span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     router <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><strong>使用路由组件标签</strong></li></ol><ol><li><router-link>: 用来生成路由链接<pre class=" language-js"><code class="language-js">     <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/xxx"</span><span class="token operator">></span>Go to XXX<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre></router-link></li><li><router-view>: 用来显示当前路由组件界面<pre class=" language-js"><code class="language-js">     <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span></code></pre></router-view></li></ol><ol start="5"><li><p><strong>配置嵌套路由</strong></p><pre class=" language-js"><code class="language-js"> path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> home<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 嵌套路由</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>   <span class="token punctuation">{</span>     path<span class="token punctuation">:</span> <span class="token string">'news'</span><span class="token punctuation">,</span>     component<span class="token punctuation">:</span> News   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>     path<span class="token punctuation">:</span> <span class="token string">'message'</span><span class="token punctuation">,</span>     component<span class="token punctuation">:</span> Message   <span class="token punctuation">}</span> <span class="token punctuation">]</span></code></pre></li><li><p><strong>向路由组件传递参数</strong></p><ol><li>配置路由</li></ol></li></ol><pre class=" language-js"><code class="language-js">      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'mdetail/:id'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> MessageDetail        <span class="token punctuation">}</span>      <span class="token punctuation">]</span></code></pre><ol start="2"><li>路由路径<pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"'/home/message/mdetail/'+m.id"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>m<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre></li><li>路由组件中读取请求参数<br><code>this.$route.params.id</code></li></ol><ol start="7"><li><p>编程式路由导航</p><ol><li><code>this.$router.push(path)</code>: 相当于点击路由链接(可以返回到当前路由界面)</li><li><code>this.$router.replace(path)</code>: 用新路由替换当前路由(不可以返回到当前路由界面)</li><li><code>this.$router.back()</code>: 请求(返回)上一个记录路由</li><li><code>this.$router.go(-1)</code>: 请求(返回)上一个记录路由</li><li><code>this.$router.go(1)</code>: 请求下一个记录路由</li></ol></li><li><p>router 守卫</p></li></ol><p>适用场合<br><strong>校验token</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 全局前置导航守卫</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 全局前置导航守卫</span>    <span class="token comment" spellcheck="true">// to 代表准备驱动地方的路由对象</span>    <span class="token comment" spellcheck="true">// from 从哪个地方来的路由对象</span>    <span class="token comment" spellcheck="true">// next 是一个函数</span>    <span class="token comment" spellcheck="true">// next() 代表无条件放行</span>    <span class="token comment" spellcheck="true">// next(false) 代表不放行，停在原地</span>    <span class="token comment" spellcheck="true">// next('/')    next({path:'/'})    代表最终让它去哪</span>    <span class="token comment" spellcheck="true">// token校验</span>        <span class="token keyword">let</span> token <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>token    <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 代表登录了或者之前登录过</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 登录鼓励，又想去登录页，直接跳转到首页</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// !! 转化为bool值</span>            <span class="token keyword">let</span> hasuserInfo <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>userInfo            <span class="token keyword">if</span><span class="token punctuation">(</span>hasuserInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 此时 代表登录了 ， 去的不是登录页，用户信息存在，直接无条件放行</span>                <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                                                <span class="token comment" spellcheck="true">// 此时代表登录了，去的不是登录页，用户信息不存在   那我们要根据token发请求获取用户真实信息</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">await</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getUserInfo'</span><span class="token punctuation">)</span>                    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 出现错误 跳转到login页面，并清楚用户信息</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'用户的token过期'</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 清空用户信息</span>                    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'resetUserInfo'</span><span class="token punctuation">)</span>                        <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 代表用户没登录或者之前也没有登录过</span>                <span class="token comment" spellcheck="true">// 后期我们需要判断用户是不是订单相关的页面，如果是娜美就先登录</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><p>与redux大同小异</p><ol><li><a href="https://github.com/vuejs/vuex">github站点</a></li><li><a href="https://vuex.vuejs.org/zh-cn/">在线文档</a></li><li>简单来说: 对vue应用中多个组件的共享状态进行集中式的管理(读&#x2F;写)</li></ol><p><strong>状态管理</strong>是什么：</p><ul><li>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>，是一个官方插件。<br>它采用集中式存储管理应用的所有组件的状态（数据），并以相应的规则保证状态以一种可预测的方式发生变化。<br>​- 我们也可以认为它也是一种组件间通信的方式，并且适用于任意组件</li></ul><p><strong>适用场合</strong></p><ul><li>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</li><li>也就是说应用简单（组件比较少）就不需要使用（但是可以），如果应用复杂，使用就会带来很大的便捷</li></ul><p><strong>Vuex核心</strong>：把所有的共享状态数据拿出来放在Vuex中进行集中式管理</p><p>vuex简单模板</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1、安装</span><span class="token comment" spellcheck="true">// 2、引入并声明使用vuex插件</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3、向外暴露一个store的实例化对象</span><span class="token comment" spellcheck="true">// state是一个包含多个属性（不是方法）的对象，其实就是用来存储数据用的</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代表初始状态数据    是一个包含n个属性（不是方法）的对象</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// mutations也是一个对象，是一个包含了多个方法的对象，其实就是用这个里面的方法去直接操作数据的</span><span class="token comment" spellcheck="true">// 这个里面的方法不能包含  if  for  异步，是直接操作的</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代表直接修改数据的数据  是一个包含n个直接修改状态数据方法的对象 （用来让action的行为调用）</span>    <span class="token comment" spellcheck="true">// 注意：只能通过mutations的方法去直接修改，也就是说要想写state数据必须通过mutations</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// actions也是一个对象，是一个包含了多个方法的对象。这个对象内部的方法是用来和vue当中用户的操作去关联的</span><span class="token comment" spellcheck="true">// 这个里面的方法可以包含 if for 异步。</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代表用户行为数据    是一个包含n个用户行为回调方法的对象，（用来映射组件用户的行为回调函数）</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// getters也是一个对象，是一个包含了多个方法的对象。这个对象内部的每个方法对应了一个计算属性的get，就是</span><span class="token comment" spellcheck="true">// 通过state当中的数据  计算出来的一个新的想要的属性数据 </span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代表计算属性数据    是一个包含n个计算属性的方法的对象</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 包含了6个核心概念，</span>    <span class="token comment" spellcheck="true">// 现在讲4个</span>    state<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    actions<span class="token punctuation">,</span>    getters<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4、将暴露出去的store实例化对象引入到实例化Vue的配置对象(main.js)当中使用</span></code></pre><p><strong>注册store</strong></p><pre><code>  import store from &#39;./store&#39;  new Vue(&#123;    store, // 注册vuex的store对象  ==&gt; 所有组件对象都有一个$store属性  &#125;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/posts/43782.html"/>
      <url>/posts/43782.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>渐进式javaScript框架————<a href="https://cn.vuejs.org/">Vue</a></p><h4 id="与其他框架的关系"><a href="#与其他框架的关系" class="headerlink" title="与其他框架的关系"></a>与其他框架的关系</h4><ul><li>1)借鉴angular的<strong>模板</strong>和<strong>数据绑定技术</strong></li><li>2)借鉴react的<strong>组件化</strong>和<strong>虚拟DOM技术</strong></li></ul><h4 id="扩展插件"><a href="#扩展插件" class="headerlink" title="扩展插件"></a>扩展插件</h4><ul><li>1)<code>vue-cli</code>: vue脚手架</li><li>2)<code>vue-resource</code>(axios): ajax请求</li><li>3)<code>vue-router</code>: 路由</li><li>4)<code>vuex</code>: 状态管理</li><li>5)<code>vue-lazyload</code>: 图片懒加载</li><li>6)<code>vue-scroller</code>: 页面滑动相关</li><li>7)<code>mint-ui</code>: 基于vue的UI组件库(移动端)</li><li>8)<code>element-ui</code>: 基于vue的UI组件库(PC端)</li></ul><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这个挂载点一旦被VM挂载，那么内部就不是我们单纯的html，被称作模板 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 模板是由两部分组成 html <span class="token operator">+</span> js <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 模块语法   指令和差值 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指令是用来修改模板当中标签（属性   内容    样式） <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 差值是专门用来修改模板当中标签的内容值 <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 1.引入vue.js</span>    <span class="token comment" spellcheck="true">// 2.在body当中必须写一个挂载点</span>    <span class="token comment" spellcheck="true">// 3.实例化一个Vue的实例化对象，和挂载点进行挂载</span>    vm对象    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//被称作挂载点  本质上是一个css的选择器字符串，标识着vm要和谁去绑定挂载</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//vm对象和传递的配置对象是不是同一个</span> <span class="token comment" spellcheck="true">//不是同一个对象</span> <span class="token comment" spellcheck="true">//数据代理：使用vm代理了配置对象当中data的数据，vm身上也有和data当中同名的属性模  板当中访问的都是vm身上的属性</span> <span class="token comment" spellcheck="true">//vm代理了data当中的数据，找vm获取数据其实最终还是拿的data当中的属性值</span> <span class="token comment" spellcheck="true">//修改vm的数据其实本质是在修改data当中的数据</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token template-string"><span class="token string">``</span></span><span class="token template-string"><span class="token string">`#### 01-差值`</span></span><span class="token template-string"><span class="token string">``</span></span>js    <span class="token comment" spellcheck="true">// 差值  {{}}</span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><h4 id="02-数据的绑定"><a href="#02-数据的绑定" class="headerlink" title="02-数据的绑定"></a>02-数据的绑定</h4><p>指令<br><strong>单向数据绑定</strong></p><ul><li>功能: 指定变化的属性值</li><li>完整写法:  <code>v-bind:xxx=&#39;yyy&#39;</code> &#x2F;&#x2F;yyy会作为表达式解析执行</li><li>简洁写法:  <code>:xxx=&#39;yyy&#39;</code></li></ul><p><strong>双向数据绑定</strong></p><ul><li><code>v-model</code></li></ul><p><img src="/posts/vue01/MVVM.png" alt="MVVM"><br>一般情况下只针对表单类才使用双向数据绑定<br>    <strong>MVVM</strong> 说的就是双向数据绑定模型<br>        M代表model就是我们的<strong>数据</strong><br>        V代表的view 就是我们的<strong>页面</strong><br>        Vm代表的就是Vue的<strong>实例化对象</strong><br>双向数据绑定：数据可以从data流向页面    页面的数据被更新，也会从页面流向data<br>    (当data的数据更改后，又会重新流向页面)</p><h4 id="2-5自动获取表单"><a href="#2-5自动获取表单" class="headerlink" title="2.5自动获取表单"></a>2.5自动获取表单</h4><p>示例</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 数据绑定的两种方法    简单来说就是点击文字可以让 input生效 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第一种 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>model默认收集的其实是你表单元素当中的value值 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"in1"</span><span class="token operator">></span>用户名：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"in1"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.username"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第二种 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>label<span class="token operator">></span>        密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.password"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> name相同时 单选框才会绑定在一组 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>model默认收集的其实是你表单元素当中的value值<span class="token punctuation">,</span>因此需要给radio添加value属性 <span class="token operator">--</span><span class="token operator">></span>    性别：    <span class="token operator">&lt;</span>label<span class="token operator">></span>        男：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"male"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.gender"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>label<span class="token operator">></span>        女：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"female"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.gender"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    爱好：    <span class="token operator">&lt;</span>label<span class="token operator">></span>        ☀<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"sum"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.favas"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>label<span class="token operator">></span>        卍<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"N解"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.favas"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>label<span class="token operator">></span>        ♬<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"music"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.favas"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> select 这个标签他的value值是选中的option的value值 <span class="token operator">--</span><span class="token operator">></span>    城市：    <span class="token operator">&lt;</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.cityId"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>option <span class="token punctuation">:</span>value<span class="token operator">=</span><span class="token string">"city.id"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(city,index) in citys"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"city.id"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>city<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>textarea cols<span class="token operator">=</span><span class="token string">"30"</span> rows<span class="token operator">=</span><span class="token string">"10"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">></span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            citys<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'北京'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'上海'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'深圳'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 代表收集的数据</span>            userInfo<span class="token punctuation">:</span><span class="token punctuation">{</span>                username<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>                password<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>                gender<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>                favas<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//favas 必须是一个数组 因为它需要收集多个数据</span>                cityId<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>                desc<span class="token punctuation">:</span><span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    url<span class="token punctuation">:</span><span class="token string">'后台给你的接口地址'</span><span class="token punctuation">,</span>                    method<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>                    data<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="03-计算属性和watch监视"><a href="#03-计算属性和watch监视" class="headerlink" title="03-计算属性和watch监视"></a>03-计算属性和watch监视</h4><ul><li>1.计算属性<ul><li>1)在computed属性对象中定义计算属性的方法</li><li>2)在页面中使用来显示计算的结果</li></ul></li><li>2.watch<ul><li>1)通过通过vm对象的$watch()或watch配置来监视指定的属性</li><li>2)当属性变化时, 回调函数自动调用, 在函数内部进行计算</li></ul></li></ul><p>示例</p><pre class=" language-js"><code class="language-js">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      姓：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"firstName"</span><span class="token operator">></span>      名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"lastName"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第一种方法不用 使用js的拼接 数据在模板当中 <span class="token keyword">this</span>全部指向的是vm 只不过模板当中的<span class="token keyword">this</span>可以省略 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> lastName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第二种方法不用 封装函数去写 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第三种方法重要：计算属性 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第四种方法：watch监视 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName2<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用computed异步放回数据，不行 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName3<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用watch异步更新数据，可行 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName4<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 计算属性的<span class="token keyword">set</span>方法 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"fullName"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">></span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>          <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                  firstName<span class="token punctuation">:</span><span class="token string">'li'</span><span class="token punctuation">,</span>                  lastName<span class="token punctuation">:</span><span class="token string">'huazhou'</span><span class="token punctuation">,</span>                  fullName2<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//监视的时候必须有这个属性,属性值是什么不确定,后面根据监视去给他赋值</span>                  fullName4<span class="token punctuation">:</span><span class="token string">''</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          methods<span class="token punctuation">:</span><span class="token punctuation">{</span>              <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'方法被调用了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//在vue中所有的函数内部的this都指向vm，因为这些方法或者函数都会被vm代理</span>                  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 当我需要一个数据,但是这个数据我又没有，并且这个数据又目前计算而来的，那就要用计算属性</span>          computed<span class="token punctuation">:</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 计算属性的完整写法</span>              fullName<span class="token punctuation">:</span><span class="token punctuation">{</span>                  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">// 当计算属性的数据能被修改时候使用（表单类元素在双向绑定计算属性值）</span>                  <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 目前没用</span>                      <span class="token keyword">let</span> arr <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 如果计算属性当中只有get方法，那么可以简写为如下方法</span>              <span class="token comment" spellcheck="true">// 计算属性的j简写写法</span>                  <span class="token comment" spellcheck="true">// fullName(){</span>                  <span class="token comment" spellcheck="true">//     console.log('computed被调用了');</span>                  <span class="token comment" spellcheck="true">//     return this.firstName + '-' + this.lastName</span>                  <span class="token comment" spellcheck="true">// },</span>                  <span class="token comment" spellcheck="true">// computed内部只能是同步放回数据，不能异步放回数据 </span>                  <span class="token function">fullName3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">null</span>                      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//函数体\</span>                        a <span class="token operator">=</span> <span class="token string">'嘿嘿'</span>                      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>                      <span class="token keyword">return</span> a                  <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//使用方法去获取姓名和使用计算属性去计算姓名的区别(贼重要)</span>          <span class="token comment" spellcheck="true">// 对于方法调用：</span>          <span class="token comment" spellcheck="true">// 你使用了几次方法调用，那么这个方法被调用了几次</span>          <span class="token comment" spellcheck="true">// 对于计算属性：</span>          <span class="token comment" spellcheck="true">// 你使用了不管多少次计算属性，计算属性的get方法只调用一次</span>          <span class="token comment" spellcheck="true">// 计算属性一定存在缓存，这些缓存使用多次的时候效率比使用方法高的多</span>          <span class="token comment" spellcheck="true">// 推荐重要</span>          watch<span class="token punctuation">:</span><span class="token punctuation">{</span>              firstName<span class="token punctuation">:</span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 这个对象是一个配置对象</span>                  <span class="token comment" spellcheck="true">// 当数据发生改变的时候会自动调用hander回调</span>                  <span class="token function">handler</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>odlVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span>fullName2 <span class="token operator">=</span> newVal <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                      <span class="token comment" spellcheck="true">// </span>                      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//函数体</span>                          <span class="token keyword">this</span><span class="token punctuation">.</span>fullName4 <span class="token operator">=</span> <span class="token string">'嘿嘿'</span>                      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  immediate<span class="token punctuation">:</span><span class="token boolean">true</span>   <span class="token comment" spellcheck="true">//配置这个配置项的作用是无论监视到属性发生不发生变化，都要强制执行一次回调</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// lastName:{</span>              <span class="token comment" spellcheck="true">// }</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 第二种方式使用watch，不推荐</span>      vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'lastName'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//this决定是否可以使用箭头函数</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fullName2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> newVal      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// computed是   计算属性,一般是没有这个值但是想要用这个值，那么根据已有的去做计算</span>      <span class="token comment" spellcheck="true">// watch   是   监视属性,监视的属性已经后期要更改的属性都没有必须有</span>      <span class="token comment" spellcheck="true">// 通常能用computed的场合都可以使用watch去解决，但是能用watch解决的computed不一定能解决</span>      <span class="token comment" spellcheck="true">// computed函数当中只能使用同步，而watch当中可以是同步也可以是异步  </span>      <span class="token comment" spellcheck="true">// 当我们去比较computed和watch的时候起始比较的是计算属性的get方法</span>      <span class="token comment" spellcheck="true">// 计算熟悉的set没什么说的，其实仅仅是对计算的属性添加了监视（当计算属性的值修改后会，调用set）</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="04-实现动态样式效果"><a href="#04-实现动态样式效果" class="headerlink" title="04-实现动态样式效果"></a>04-实现动态样式效果</h4><ul><li><strong>class绑定</strong><pre class=" language-js"><code class="language-js">  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'xxx'</span>  <span class="token number">2</span><span class="token punctuation">)</span>表达式是字符串<span class="token punctuation">:</span> <span class="token string">'classA'</span>  <span class="token number">3</span><span class="token punctuation">)</span>表达式是对象<span class="token punctuation">:</span> <span class="token punctuation">{</span>classA<span class="token punctuation">:</span>isA<span class="token punctuation">,</span> classB<span class="token punctuation">:</span> isB<span class="token punctuation">}</span>  <span class="token number">4</span><span class="token punctuation">)</span>表达式是数组<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'classA'</span><span class="token punctuation">,</span> <span class="token string">'classB'</span><span class="token punctuation">]</span></code></pre></li><li><strong>style绑定</strong><pre class=" language-js"><code class="language-js">  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"{ color: activeColor, fontSize: fontSize + 'px' }"</span>  <span class="token number">2</span><span class="token punctuation">)</span>其中activeColor<span class="token operator">/</span>fontSize是data属性</code></pre></li></ul><h4 id="04-5-过渡和动画"><a href="#04-5-过渡和动画" class="headerlink" title="04.5-过渡和动画"></a>04.5-过渡和动画</h4><p><img src="/posts/Vue01/transition.png" alt="transition原理图"></p><p><code>xxx-enter-active</code>: 指定<strong>显示</strong>的transition<br><code>xxx-leave-active</code>: 指定<strong>隐藏</strong>的transition<br><code>xxx-enter</code>&#x2F;<code>xxx-leave-to</code>: 指定<strong>隐藏时</strong>的样式</p><pre class=" language-vue"><code class="language-vue">在进入/离开的过渡中，会有 6 个 class 切换。    v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。    v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。    v-enter-to：2.1.8 版及以上定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。    v-leave：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。    v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。    v-leave-to：2.1.8 版及以上定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <transition>，则 v- 是这些类名的默认前缀。如果你使用了 <transition name="my-transition">，那么 v-enter 会替换为 my-transition-enter。v-enter-active 和 v-leave-active 可以控制进入/离开过渡的不同的缓和曲线</code></pre><p>——————取自<a href="https://cn.vuejs.org/v2/guide/transitions.html">Vue官网</a></p><h4 id="05-条件渲染和列表渲染"><a href="#05-条件渲染和列表渲染" class="headerlink" title="05-条件渲染和列表渲染"></a>05-条件渲染和列表渲染</h4><h5 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h5><p>指令</p><pre class=" language-js"><code class="language-js">    v<span class="token operator">-</span><span class="token keyword">if</span>与v<span class="token operator">-</span><span class="token keyword">else</span>    v<span class="token operator">-</span>show</code></pre><ul><li>比较v-if与v-show<ul><li>3)如果需要频繁切换 v-show 较好</li><li>4)当条件不成立时, v-if的所有子节点不会解析(项目中使用)</li></ul></li></ul><h5 id="列表显示"><a href="#列表显示" class="headerlink" title="列表显示"></a>列表显示</h5><ul><li><p>指令</p><pre class=" language-vue"><code class="language-vue">  数组: v-for / index  对象: v-for / key</code></pre></li><li><p>列表的更新显示</p><ul><li>删除item</li><li>替换item</li></ul></li><li><p>高级用法(列表的<strong>过滤</strong>以及<strong>排序</strong>)</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入过滤的条件"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"keyword"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(persons,index) in newPersons"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"persons.id"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>persons<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>persons<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>persons<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"test(1)"</span><span class="token operator">></span>按年龄升序<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"test(2)"</span><span class="token operator">></span>按年龄降序<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"test(0)"</span><span class="token operator">></span>按原样排序<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sortType = 1"</span><span class="token operator">></span>按年龄升序<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sortType = 2"</span><span class="token operator">></span>按年龄降序<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sortType = 0"</span><span class="token operator">></span>按原样排序<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">></span>        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//消除启动浏览器的生产提示信息</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            keyword<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            persons<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'zhaoliying'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'yanmi'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'qiwei'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'dilireba'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 排序首先要设计这个数据，标致用户点击到底是什么排序类型</span>            <span class="token comment" spellcheck="true">// </span>            sortType<span class="token punctuation">:</span><span class="token number">0</span>      <span class="token comment" spellcheck="true">//0 -1 2  0代表原样  1代表升序  2代表降序</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当函数当中如果只有一行代码，可以省略函数，直接把代码写在上面 </span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sortType <span class="token operator">=</span> num            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">newPersons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//判断是否简写（数据是否可改）（是否需要set）</span>                <span class="token keyword">let</span> <span class="token punctuation">{</span>keyword<span class="token punctuation">,</span>persons<span class="token punctuation">,</span>sortType<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token comment" spellcheck="true">// 根据获取的两个计算新的数据</span>                <span class="token comment" spellcheck="true">//函数和方法最重要的是三要素</span>                <span class="token comment" spellcheck="true">//功能      从原数组当中过滤一个新的数组</span>                <span class="token comment" spellcheck="true">// 参数     回调函数（同步的回调） </span>                            <span class="token comment" spellcheck="true">// 回调函数的参数：当前项的索引  当前遍历的数组</span>                            <span class="token comment" spellcheck="true">// 功能：对遍历的每一项执行回调函数</span>                            <span class="token comment" spellcheck="true">// 返回值：返回的是一个布尔值,(布尔值,条件表达式)，根据这个布尔值的真假来决定当前遍历的这项</span>                            <span class="token comment" spellcheck="true">// 要不要收集到数组中</span>                                <span class="token comment" spellcheck="true">// 返回值      返回的是新的数组</span>                <span class="token comment" spellcheck="true">// 什么是运算符 什么是表达式</span>                <span class="token comment" spellcheck="true">// 参与运算的符号</span>                <span class="token comment" spellcheck="true">// 由变量或者常量和运算符组成的是在就是表达式   表达式都是有值的</span>                <span class="token comment" spellcheck="true">// 非箭头函数</span>                <span class="token comment" spellcheck="true">// let arr = persons.filter(function(item,index){</span>                <span class="token comment" spellcheck="true">//     return item.name.indexOf(keyword) !== -1</span>                <span class="token comment" spellcheck="true">// })</span>                <span class="token comment" spellcheck="true">// 箭头函数</span>                <span class="token keyword">let</span> arr <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// 在过滤的基础上排序完成再返回</span>                 <span class="token comment" spellcheck="true">//   if(sortType === 1){</span>                 <span class="token comment" spellcheck="true">//     return a.age - b.age</span>                 <span class="token comment" spellcheck="true">//   }else{</span>                 <span class="token comment" spellcheck="true">//       return b.age - a.age</span>                 <span class="token comment" spellcheck="true">//   }</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sortType <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> sortType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> a<span class="token punctuation">.</span>age <span class="token operator">-</span> b<span class="token punctuation">.</span>age <span class="token punctuation">:</span> b<span class="token punctuation">.</span>age <span class="token operator">-</span> a<span class="token punctuation">.</span>age<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> arr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="06-深入了解Vue的响应式数据"><a href="#06-深入了解Vue的响应式数据" class="headerlink" title="06-深入了解Vue的响应式数据"></a>06-深入了解Vue的响应式数据</h4><ul><li>在vue当中 一开始data中的属性数据都是响应式的<ul><li><strong>数组的数据</strong>   说的每个数组当中元素整体</li><li><strong>对象的数据</strong>   说的对象的属性</li></ul></li></ul><p>Vue 当中处理响应式数据对于数组和对象是不一样的</p><ul><li><p>1、如果修改的是对象的属性，随便改，都是响应式的。<br>因为Vue一开始就为data当中所有的属性通过<code>Object.defineProperty</code>添加了<code>get</code>和<code>set</code></p></li><li><p>2、数组修改的时候，必须使用<strong>特定的几个方法</strong>才能是响应式，如果直接通过下标操作数组的数据，不是响应式式</p><ul><li>为什么数组的方法就可以响应式？</li><li>此splice非原生的splice，vue当中给数组部分方法添加了修改页面的功能(重写方法)<pre class=" language-vue"><code class="language-vue">push() pop() shift() unshift() splice() sort() reverse()</code></pre>方法的语法以及使用并没有改变，简单的用法.可以参考我这篇文章 <a href="https://0shino0.github.io/2022/05/13/javascript/">js数组总结</a></li></ul></li></ul><p><strong>总结</strong></p><pre class=" language-vue"><code class="language-vue">    面试高频点    总结 vue在对待数组和对象的时候处理响应式是不一样的     对象是通过Object.defineProperty添加了get和set    数组  重写数组的方法</code></pre><h4 id="07-Vue事件相关"><a href="#07-Vue事件相关" class="headerlink" title="07-Vue事件相关"></a>07-Vue事件相关</h4><p><strong>绑定监听</strong><br>1)<code>v-on:xxx=&quot;fun&quot;</code><br>2)<code>@xxx=&quot;fun&quot;</code><br>3)<code>@xxx=&quot;fun(参数)&quot;</code><br>4)默认事件形参: <code>event</code><br>5)隐含属性对象: <code>$event</code></p><p><strong>事件修饰符</strong><br>1)<code>.prevent</code> : 阻止事件的默认行为 event.preventDefault()<br>2)<code>.stop</code> : 停止事件冒泡 event.stopPropagation()</p><p><strong>按键修饰符</strong><br>1)<code>.keycode</code> : 操作的是某个keycode值的键<br>2)<code>.keyName</code> : 操作的某个按键名的键(少部分)</p><p>示例</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件初始写法 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token punctuation">:</span>click<span class="token operator">=</span><span class="token string">"test1"</span><span class="token operator">></span>test1<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件写法可以简写 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"test1"</span><span class="token operator">></span>test1<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件回调函数如果我们想要传递自己的参数<span class="token punctuation">,</span>那么默认的事件对象的参数会被覆盖 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"test3('Kanade')"</span><span class="token operator">></span>test3<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件回调函数如果我们想要传递自己的参数<span class="token punctuation">,</span>而且还想要用到事件对象，此时需要手动传递事件对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"test4('Kanade',$event)"</span><span class="token operator">></span>test4<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件的阻止冒泡 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"width:200px;height:200px;background:red"</span> @click<span class="token operator">=</span><span class="token string">"outer"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"width:100px;height:100px;background:blue"</span> @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"inner"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件当中取消浏览器默认行为 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.bilibili.com"</span> @click<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"cancelDefault"</span><span class="token operator">></span>点我去学习<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 键盘事件都用在表单元素或者document身上 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> @keyup<span class="token punctuation">.</span>enter<span class="token operator">=</span><span class="token string">"keyEnter"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token operator">></span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>       <span class="token comment" spellcheck="true">//配置不用提示开发帮本的信息</span>    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">test1</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">test3</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">test4</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// event.stopPropagation();</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">cancelDefault</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// event.preventDefault();</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">keyEnter</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//</span>                <span class="token comment" spellcheck="true">// if(event.keyCode === 13 ){</span>                <span class="token comment" spellcheck="true">//     console.log('回车了');</span>                <span class="token comment" spellcheck="true">// }</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'回车了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="08-Vue生命周期"><a href="#08-Vue生命周期" class="headerlink" title="08-Vue生命周期"></a>08-Vue生命周期</h4><img src="/posts/vue01/lifecycle.png" alt="Vue生命周期" style="zoom:50%;"><p>1)初始化显示</p><pre class=" language-vue"><code class="language-vue">    beforeCreate()    created()    beforeMount()    mounted()</code></pre><p>2)更新状态: <code>this.xxx = value</code></p><pre class=" language-vue"><code class="language-vue">    beforeUpdate()    updated()</code></pre><p>3)销毁vue实例: <code>vm.$destory()</code></p><pre class=" language-vue"><code class="language-vue">    beforeDestory()    destoryed()</code></pre><p>常用钩子<br>1)<code>mounted()</code>: 发送<strong>ajax请求</strong>, <strong>启动定时器</strong>等<strong>异步</strong>任务<br>2)<code>beforeDestory()</code>: 做收尾工作, 如: <strong>清除定时器</strong></p><p>示例</p><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">"pp"</span> v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">></span>我爱你<span class="token punctuation">{</span><span class="token punctuation">{</span>isShow<span class="token operator">?</span><span class="token string">'刘亦菲'</span><span class="token punctuation">:</span><span class="token string">'杨幂'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"destory"</span><span class="token operator">></span>点我卸载组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// template:'&lt;p>{{isShow}}&lt;/p>',</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    isShow<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//必须在某个特定的场合下 自己手动调用vm.$destroy()方法  才能进入销毁的阶段</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 初始化阶段有两个钩子 beforeCreate    created</span>            <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 初始化之前最大的特点是数据还没有代理好，打印不到</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 初始化之后数据就可以被访问了</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 挂载阶段,挂在前和挂载后</span>            <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这个钩子用的是最多的</span>                <span class="token comment" spellcheck="true">// 一般用于发送ajax请求获取数据</span>                <span class="token comment" spellcheck="true">// 还用于开启定时器</span>                <span class="token comment" spellcheck="true">// 添加一些事件</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//函数体</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 前两个阶段完成 代表初始化展示页面就完成了</span>            <span class="token comment" spellcheck="true">// 页面数据更新前和页面数据更新后 不是vm的数据</span>            <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 页面更新前 vm 的数据已经做了更新了，但此时数据还没有更新过来</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>pp<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 页面更新前 vm 的数据已经做了更新了，页面的数据也更新过来了</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>pp<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 销毁阶段</span>            <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 销毁之前</span>                <span class="token comment" spellcheck="true">// 一般这个钩子用的也是比较频繁,通常是在销毁前解绑事件监听  取消定时器等操作</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//定时器管理模块会把这个定时器给停止，但是并没有把这个编号从timer当中销毁</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 销毁之后</span>            <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 没什么用</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'vm销毁了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="09-Vue可复用性和组合"><a href="#09-Vue可复用性和组合" class="headerlink" title="09-Vue可复用性和组合"></a>09-Vue可复用性和组合</h4><h5 id="Vue的内置指令以及自定义指令"><a href="#Vue的内置指令以及自定义指令" class="headerlink" title="Vue的内置指令以及自定义指令"></a>Vue的内置指令以及自定义指令</h5><p><strong>常用内置指令</strong><br><code>v-text</code> : 更新元素的 textContent<br><code>v-html</code> : 更新元素的 innerHTML<br><code>v-if</code> : 如果为true, 当前标签才会输出到页面<br><code>v-else</code>: 如果为false, 当前标签才会输出到页面<br><code>v-show</code> : 通过控制display样式来控制显示&#x2F;隐藏<br><code>v-for</code> : 遍历数组&#x2F;对象<br><code>v-on</code> : 绑定事件监听, 一般简写为@<br><code>v-bind</code> : 强制绑定解析表达式, 可以省略v-bind<br><code>v-model</code> : 双向数据绑定<br><code>ref</code> : 指定唯一标识, vue对象通过$els属性访问这个元素对象<br><code>v-cloak</code> : 防止闪现, 与css配合: [v-cloak] { display: none }</p><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p>可以用全局方法 <code>Vue.filter()</code> 注册一个自定义过滤器，它接收两个参数：<strong>过滤器 ID</strong> 和<strong>过滤器函数</strong>。过滤器函数以值为参数，返回转换后的值</p><h5 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h5><p>全局注册</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 注册一个全局自定义指令 `v-focus`</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当被绑定的元素插入到 DOM 中时……</span>    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 聚焦元素</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>局部注册</p><pre class=" language-js"><code class="language-js">    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>    focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指令的定义</span>        inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="10-Vue-Cli引言"><a href="#10-Vue-Cli引言" class="headerlink" title="10-Vue Cli引言"></a>10-Vue Cli引言</h4><p>定义非单文件组件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 全局注册</span>    <span class="token comment" spellcheck="true">// 1、定义组件  (定义的组件之后都是全局组件)   本质上是根据一个配置对象定义返回一个函数，后期是当构造函数使用</span>    <span class="token comment" spellcheck="true">// 麻烦写法</span>    <span class="token keyword">const</span> VueComponent <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 组件配置对象和Vue配置对象很相似，除了el</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 组件的配置对象当中data只能写函数</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                count<span class="token punctuation">:</span><span class="token number">0</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 组件当中不能写对象</span>            count<span class="token punctuation">:</span><span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;div>&lt;h2>I love you &lt;/h2>&lt;button @click="count++">你爱了{{count}}次&lt;/button>&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3.使用</span>    <span class="token comment" spellcheck="true">// 定义组件的简单写法（定义带注册）</span>    <span class="token comment" spellcheck="true">// 1、定义带注册</span>    <span class="token comment" spellcheck="true">// 本质上 内部还是使用extend生成一个函数，然后再去和mybutton绑定</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'mybutton'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 组件配置对象和Vue配置对象很相似，除了el</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 组件的配置对象当中data只能写函数</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                count<span class="token punctuation">:</span><span class="token number">0</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// data:{                                       </span>        <span class="token comment" spellcheck="true">//     // 组件当中不能写对象</span>        <span class="token comment" spellcheck="true">//     count:0</span>        <span class="token comment" spellcheck="true">// },</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;div>&lt;h2>I love you &lt;/h2>&lt;button @click="count++">你爱了{{count}}次&lt;/button>&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2、使用</span>    <span class="token comment" spellcheck="true">// 一般情况下  我们定义的都是全局组件   因为这个组件只在一个地方用到</span>    <span class="token comment" spellcheck="true">// 但是当一个组件被多个组件都使用的时候，我们定义为全局组件比较方便</span><span class="token comment" spellcheck="true">// 局部注册</span><span class="token comment" spellcheck="true">// 在vm组件中注册</span></code></pre><p>→→→→→<a href="https://yyshino.top/posts/4795.html">Vue脚手架</a></p>]]></content>
      
      
      <categories>
          
          <category> web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React高级</title>
      <link href="/posts/4944.html"/>
      <url>/posts/4944.html</url>
      
        <content type="html"><![CDATA[<h3 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h3><h4 id="三、路由的基本使用"><a href="#三、路由的基本使用" class="headerlink" title="三、路由的基本使用"></a>三、路由的基本使用</h4><pre class=" language-jsx"><code class="language-jsx">    <span class="token number">1</span><span class="token punctuation">.</span>明确好界面中的导航区、展示区    <span class="token number">2</span><span class="token punctuation">.</span>导航区的a标签改为Link标签                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xxxxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>    <span class="token number">3</span><span class="token punctuation">.</span>展示区写Route标签进行路径的匹配                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/xxxx<span class="token punctuation">'</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Demo<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>    <span class="token number">4</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">></span></span>的最外侧包裹了一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span><span class="token punctuation">></span></span>或<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HashRouter</span><span class="token punctuation">></span></span></code></pre><h4 id="四、路由与一般组件"><a href="#四、路由与一般组件" class="headerlink" title="四、路由与一般组件"></a>四、路由与一般组件</h4><pre class=" language-jsx"><code class="language-jsx">    <span class="token number">1</span><span class="token punctuation">.</span>写法不同：                一般组件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Demo</span><span class="token punctuation">/></span></span>                路由组件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/demo<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Demo<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>    <span class="token number">2</span><span class="token punctuation">.</span>存放位置不同：                一般组件：components                路由组件：pages    <span class="token number">3</span><span class="token punctuation">.</span>接收到的props不同：                一般组件：写组件标签时传递了什么，就能收到什么                路由组件：接收到三个固定的属性                    history<span class="token punctuation">:</span>                        go<span class="token punctuation">:</span> ƒ <span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>                        goBack<span class="token punctuation">:</span> ƒ <span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        goForward<span class="token punctuation">:</span> ƒ <span class="token function">goForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        push<span class="token punctuation">:</span> ƒ <span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span>                        replace<span class="token punctuation">:</span> ƒ <span class="token function">replace</span><span class="token punctuation">(</span>pastate<span class="token punctuation">)</span>                    location<span class="token punctuation">:</span>                        pathname<span class="token punctuation">:</span> <span class="token string">"/about"</span>                        search<span class="token punctuation">:</span> <span class="token string">""</span>                        state<span class="token punctuation">:</span> undefined                    match<span class="token punctuation">:</span>                        params<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                        path<span class="token punctuation">:</span> <span class="token string">"/about"</span>                        url<span class="token punctuation">:</span> <span class="token string">"/about"</span></code></pre><h4 id="五、NavLink与封装NavLink"><a href="#五、NavLink与封装NavLink" class="headerlink" title="五、NavLink与封装NavLink"></a>五、NavLink与封装NavLink</h4><pre class=" language-jsx"><code class="language-jsx">                <span class="token number">1</span><span class="token punctuation">.</span>NavLink可以实现路由链接的高亮，通过activeClassName指定样式名</code></pre><h4 id="六、Switch的使用"><a href="#六、Switch的使用" class="headerlink" title="六、Switch的使用"></a>六、Switch的使用</h4><pre class=" language-jsx"><code class="language-jsx">                <span class="token number">1</span><span class="token punctuation">.</span>通常情况下，path和component是一一对应的关系。                <span class="token number">2</span><span class="token punctuation">.</span><span class="token function">Switch可以提高路由匹配效率</span><span class="token punctuation">(</span>单一匹配<span class="token punctuation">)</span>。</code></pre><h4 id="七、解决多级路-径刷新页面样式丢失的问题"><a href="#七、解决多级路-径刷新页面样式丢失的问题" class="headerlink" title="七、解决多级路 径刷新页面样式丢失的问题"></a>七、解决多级路 径刷新页面样式丢失的问题</h4><pre class=" language-jsx"><code class="language-jsx">                <span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">public</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html 中 引入样式时不写 <span class="token punctuation">.</span><span class="token operator">/</span> 写 <span class="token operator">/</span> （常用）                <span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">public</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html 中 引入样式时不写 <span class="token punctuation">.</span><span class="token operator">/</span> 写 <span class="token operator">%</span>PUBLIC_URL<span class="token operator">%</span> （常用）                <span class="token number">3</span><span class="token punctuation">.</span>使用HashRouter</code></pre><h4 id="八、路由的严格匹配与模糊匹配"><a href="#八、路由的严格匹配与模糊匹配" class="headerlink" title="八、路由的严格匹配与模糊匹配"></a>八、路由的严格匹配与模糊匹配</h4><pre class=" language-jsx"><code class="language-jsx">                <span class="token number">1</span><span class="token punctuation">.</span>默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）                <span class="token number">2</span><span class="token punctuation">.</span>开启严格匹配：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>                <span class="token number">3</span><span class="token punctuation">.</span>严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</code></pre><h4 id="九、Redirect的使用"><a href="#九、Redirect的使用" class="headerlink" title="九、Redirect的使用"></a>九、Redirect的使用</h4><pre class=" language-jsx"><code class="language-jsx">                <span class="token number">1</span><span class="token punctuation">.</span>一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由                <span class="token number">2</span><span class="token punctuation">.</span>具体编码：                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span></code></pre><h4 id="十、嵌套路由"><a href="#十、嵌套路由" class="headerlink" title="十、嵌套路由"></a>十、嵌套路由</h4><pre class=" language-jsx"><code class="language-jsx">                <span class="token number">1</span><span class="token punctuation">.</span>注册子路由时要写上父路由的path值                <span class="token number">2</span><span class="token punctuation">.</span>路由的匹配是按照注册路由的顺序进行的</code></pre><h4 id="十一、向路由组件传递参数"><a href="#十一、向路由组件传递参数" class="headerlink" title="十一、向路由组件传递参数"></a>十一、向路由组件传递参数</h4><pre class=" language-jsx"><code class="language-jsx">                <span class="token number">1</span><span class="token punctuation">.</span>params参数                            <span class="token function">路由链接</span><span class="token punctuation">(</span>携带参数<span class="token punctuation">)</span>：<span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">'/demo/test/tom/18'</span><span class="token punctuation">}</span><span class="token operator">></span>详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>                            <span class="token function">注册路由</span><span class="token punctuation">(</span>声明接收<span class="token punctuation">)</span>：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/demo/test/:name/:age<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>                            接收参数：<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params                <span class="token number">2</span><span class="token punctuation">.</span>search参数                            <span class="token function">路由链接</span><span class="token punctuation">(</span>携带参数<span class="token punctuation">)</span>：<span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">'/demo/test?name=tom&amp;age=18'</span><span class="token punctuation">}</span><span class="token operator">></span>详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>                            <span class="token function">注册路由</span><span class="token punctuation">(</span>无需声明，正常注册即可<span class="token punctuation">)</span>：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/demo/test<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>                            接收参数：<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search                            备注：获取到的search是urlencoded编码字符串，需要借助querystring解析                <span class="token number">3</span><span class="token punctuation">.</span>state参数                            <span class="token function">路由链接</span><span class="token punctuation">(</span>携带参数<span class="token punctuation">)</span>：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>pathname<span class="token punctuation">:</span><span class="token string">'/demo/test'</span><span class="token punctuation">,</span>state<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">}</span><span class="token punctuation">></span></span>详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>                            <span class="token function">注册路由</span><span class="token punctuation">(</span>无需声明，正常注册即可<span class="token punctuation">)</span>：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/demo/test<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>                            接收参数：<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state                            备注：刷新也可以保留住参数</code></pre><h4 id="十二、编程式路由导航"><a href="#十二、编程式路由导航" class="headerlink" title="十二、编程式路由导航"></a>十二、编程式路由导航</h4><pre class=" language-jsx"><code class="language-jsx">    借助<span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history对象上的API对操作路由跳转、前进、后退            <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">goForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="十三、BrowserRouter与HashRouter的区别"><a href="#十三、BrowserRouter与HashRouter的区别" class="headerlink" title="十三、BrowserRouter与HashRouter的区别"></a>十三、BrowserRouter与HashRouter的区别</h4><pre class=" language-jsx"><code class="language-jsx">        <span class="token number">1</span><span class="token punctuation">.</span>底层原理不一样：                    BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。                    HashRouter使用的是URL的哈希值。        <span class="token number">2</span><span class="token punctuation">.</span>path表现形式不一样                    BrowserRouter的路径中没有#<span class="token punctuation">,</span>例如：localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>demo<span class="token operator">/</span>test                    HashRouter的路径包含#<span class="token punctuation">,</span>例如：localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>#<span class="token operator">/</span>demo<span class="token operator">/</span>test        <span class="token number">3</span><span class="token punctuation">.</span>刷新后对路由state参数的影响                    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BrowserRouter没有任何影响，因为state保存在history对象中。                    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HashRouter刷新后会导致路由state参数的丢失！！！        <span class="token number">4</span><span class="token punctuation">.</span>备注：HashRouter可以用于解决一些路径错误相关的问题。</code></pre><h4 id="十四、antd的按需引入-自定主题"><a href="#十四、antd的按需引入-自定主题" class="headerlink" title="十四、antd的按需引入+自定主题"></a>十四、antd的按需引入+自定主题</h4><pre class=" language-jsx"><code class="language-jsx">    <span class="token number">1</span><span class="token punctuation">.</span>安装依赖：yarn add react<span class="token operator">-</span>app<span class="token operator">-</span>rewired customize<span class="token operator">-</span>cra babel<span class="token operator">-</span>plugin<span class="token operator">-</span><span class="token keyword">import</span> less less<span class="token operator">-</span>loader    <span class="token number">2</span><span class="token punctuation">.</span>修改<span class="token keyword">package</span><span class="token punctuation">.</span>json            <span class="token operator">...</span><span class="token punctuation">.</span>                <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired start"</span><span class="token punctuation">,</span>                    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired build"</span><span class="token punctuation">,</span>                    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired test"</span><span class="token punctuation">,</span>                    <span class="token string">"eject"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts eject"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token number">3</span><span class="token punctuation">.</span>根目录下创建config<span class="token operator">-</span>overrides<span class="token punctuation">.</span>js            <span class="token comment" spellcheck="true">//配置具体的修改规则</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> override<span class="token punctuation">,</span> fixBabelImports<span class="token punctuation">,</span>addLessLoader<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'customize-cra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span>                <span class="token function">fixBabelImports</span><span class="token punctuation">(</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    libraryName<span class="token punctuation">:</span> <span class="token string">'antd'</span><span class="token punctuation">,</span>                    libraryDirectory<span class="token punctuation">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>                    style<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">addLessLoader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    lessOptions<span class="token punctuation">:</span><span class="token punctuation">{</span>                        javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        modifyVars<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'@primary-color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">4</span><span class="token punctuation">.</span>备注：不用在组件里亲自引入样式了，即：<span class="token keyword">import</span> <span class="token string">'antd/dist/antd.css'</span>应该删掉</code></pre><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>  1.redux是一个独立专门用于做状态管理的JS库(不react插件库)<br>  2.它可以用在react、angular、vue等项目中，但本与react配合使用<br>  3.作用：集中式管理react应用中多个组件共享的态</p><h4 id="什么时候需要使用"><a href="#什么时候需要使用" class="headerlink" title="什么时候需要使用"></a>什么时候需要使用</h4><p>  1.某个组件的状态，需要让其他组件可以随时拿到（共享）。<br>  2.一个组件需要改变另一个组件的状态（通信）。<br>  3.总体原则：能不用就不用, 如果不用比较吃力才考虑使用。</p><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p><img src="/posts/react3/redux.png" alt="redux"></p><h4 id="redux的三个核心概念"><a href="#redux的三个核心概念" class="headerlink" title="redux的三个核心概念"></a>redux的三个核心概念</h4><h5 id="action"><a href="#action" class="headerlink" title="action"></a>action</h5><p>1.动作的对象<br>2.包含2个属性</p><pre class=" language-jsx"><code class="language-jsx">    type：标识属性<span class="token punctuation">,</span> 值为字符串<span class="token punctuation">,</span> 唯一<span class="token punctuation">,</span> 必要属性    data：数据属性<span class="token punctuation">,</span> 值类型任意<span class="token punctuation">,</span> 可选属性</code></pre><p>3.例子：</p><pre class=" language-jsx"><code class="language-jsx">    <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'ADD_STUDENT'</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'tom'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h5 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h5><p>1.用于初始化状态、加工状态。<br>2.加工时，根据旧的state和action， 产生新的state的纯函数。</p><h5 id="store"><a href="#store" class="headerlink" title="store"></a>store</h5><p>1.将state、action、reducer联系在一起的对象<br>2.如何得到此对象?</p><pre class=" language-jsx"><code class="language-jsx">    <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">import</span> <span class="token punctuation">{</span>createStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span>    <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducers'</span>    <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span></code></pre><p>3.此对象的功能?</p><pre class=" language-jsx"><code class="language-jsx">    <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 得到state    <span class="token number">2</span><span class="token punctuation">)</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">:</span> 分发action<span class="token punctuation">,</span> 触发reducer调用<span class="token punctuation">,</span> 产生新的state    <span class="token number">3</span><span class="token punctuation">)</span><span class="token function">subscribe</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">:</span> 注册监听<span class="token punctuation">,</span> 当产生了新的state时<span class="token punctuation">,</span> 自动调用</code></pre><h4 id="redux的核心API"><a href="#redux的核心API" class="headerlink" title="redux的核心API"></a>redux的核心API</h4><h5 id="createstore"><a href="#createstore" class="headerlink" title="createstore()"></a>createstore()</h5><p>作用：创建包含指定reducer的store对象</p><h5 id="store对象"><a href="#store对象" class="headerlink" title="store对象"></a>store对象</h5><p>1.作用: redux库最核心的管理对象<br>2.它内部维护着:</p><pre class=" language-​jsx"><code class="language-​jsx">    1)state​ 2)reducer</code></pre><p>3.核心方法:</p><pre class=" language-jsx"><code class="language-jsx">​<span class="token number">1</span><span class="token punctuation">)</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>​<span class="token number">2</span><span class="token punctuation">)</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>​<span class="token number">3</span><span class="token punctuation">)</span><span class="token function">subscribe</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span></code></pre><p>4.具体编码:</p><pre class=" language-jsx"><code class="language-jsx">​<span class="token number">1</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>​<span class="token number">2</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span><span class="token string">'INCREMENT'</span><span class="token punctuation">,</span> number<span class="token punctuation">}</span><span class="token punctuation">)</span>​<span class="token number">3</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span></code></pre><h5 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware()"></a>applyMiddleware()</h5><p>作用：应用上基于redux的中间件(插件库)</p><h5 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers()"></a>combineReducers()</h5><p>作用：合并多个reducer函数</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="1-setState"><a href="#1-setState" class="headerlink" title="1. setState"></a>1. setState</h4><h5 id="setState更新状态的2种写法"><a href="#setState更新状态的2种写法" class="headerlink" title="setState更新状态的2种写法"></a>setState更新状态的2种写法</h5><pre class=" language-jsx"><code class="language-jsx">    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">setState</span><span class="token punctuation">(</span>stateChange<span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>对象式的setState            <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">stateChange为状态改变对象</span><span class="token punctuation">(</span>该对象可以体现出状态的更改<span class="token punctuation">)</span>            <span class="token number">2</span><span class="token punctuation">.</span>callback是可选的回调函数<span class="token punctuation">,</span> <span class="token function">它在状态更新完毕、界面也更新后</span><span class="token punctuation">(</span>render调用后<span class="token punctuation">)</span>才被调用                        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">setState</span><span class="token punctuation">(</span>updater<span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>函数式的setState            <span class="token number">1</span><span class="token punctuation">.</span>updater为返回stateChange对象的函数。            <span class="token number">2</span><span class="token punctuation">.</span>updater可以接收到state和props。            <span class="token number">4</span><span class="token punctuation">.</span>callback是可选的回调函数<span class="token punctuation">,</span> <span class="token function">它在状态更新、界面也更新后</span><span class="token punctuation">(</span>render调用后<span class="token punctuation">)</span>才被调用。    总结<span class="token punctuation">:</span>        <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">对象式的setState是函数式的setState的简写方式</span><span class="token punctuation">(</span>语法糖<span class="token punctuation">)</span>        <span class="token number">2</span><span class="token punctuation">.</span>使用原则：                <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>如果新状态不依赖于原状态 <span class="token operator">===</span><span class="token operator">></span> 使用对象方式                <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>如果新状态依赖于原状态 <span class="token operator">===</span><span class="token operator">></span> 使用函数方式                <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">如果需要在setState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>执行后获取最新的状态数据<span class="token punctuation">,</span>                     要在第二个callback函数中读取</code></pre><hr><h4 id="2-lazyLoad"><a href="#2-lazyLoad" class="headerlink" title="2. lazyLoad"></a>2. lazyLoad</h4><h5 id="路由组件的lazyLoad"><a href="#路由组件的lazyLoad" class="headerlink" title="路由组件的lazyLoad"></a>路由组件的lazyLoad</h5><pre class=" language-jsx"><code class="language-jsx">    <span class="token comment" spellcheck="true">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===> 路由组件代码会被分开打包</span>    <span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/pages/Login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//2.通过&lt;Suspense>指定在加载得到路由打包文件前显示一个自定义loading界面</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback={&lt;h1</span><span class="token punctuation">></span></span>loading<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xxx<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Xxxx<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span></code></pre><hr><h4 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3. Hooks"></a>3. Hooks</h4><h5 id="1-React-Hook-x2F-Hooks是什么"><a href="#1-React-Hook-x2F-Hooks是什么" class="headerlink" title="1. React Hook&#x2F;Hooks是什么?"></a>1. React Hook&#x2F;Hooks是什么?</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Hook是React <span class="token number">16.8</span><span class="token punctuation">.</span><span class="token number">0</span>版本增加的新特性<span class="token operator">/</span>新语法<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 可以让你在函数组件中使用 state 以及其他的 React 特性</code></pre><h5 id="2-三个常用的Hook"><a href="#2-三个常用的Hook" class="headerlink" title="2. 三个常用的Hook"></a>2. 三个常用的Hook</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> State Hook<span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Effect Hook<span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Ref Hook<span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="3-State-Hook"><a href="#3-State-Hook" class="headerlink" title="3. State Hook"></a>3. State Hook</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> State Hook让函数组件也可以有state状态<span class="token punctuation">,</span> 并进行状态数据的读写操作<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 语法<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token punctuation">[</span>xxx<span class="token punctuation">,</span> setXxx<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>initValue<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>说明<span class="token punctuation">:</span>        参数<span class="token punctuation">:</span> 第一次初始化指定的值在内部作缓存        返回值<span class="token punctuation">:</span> 包含<span class="token number">2</span>个元素的数组<span class="token punctuation">,</span> 第<span class="token number">1</span>个为内部当前状态值<span class="token punctuation">,</span> 第<span class="token number">2</span>个为更新状态值的函数<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">setXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2</span>种写法<span class="token punctuation">:</span>        <span class="token function">setXxx</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">:</span> 参数为非函数值<span class="token punctuation">,</span> 直接指定新的状态值<span class="token punctuation">,</span> 内部用其覆盖原来的状态值        <span class="token function">setXxx</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> newValue<span class="token punctuation">)</span><span class="token punctuation">:</span> 参数为函数<span class="token punctuation">,</span> 接收原本的状态值<span class="token punctuation">,</span> 返回新的状态值<span class="token punctuation">,</span> 内部用其覆盖原来的状态值</code></pre><h5 id="4-Effect-Hook"><a href="#4-Effect-Hook" class="headerlink" title="4. Effect Hook"></a>4. Effect Hook</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Effect Hook <span class="token function">可以让你在函数组件中执行副作用操作</span><span class="token punctuation">(</span>用于模拟类组件中的生命周期钩子<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> React中的副作用操作<span class="token punctuation">:</span>        发ajax请求数据获取        设置订阅 <span class="token operator">/</span> 启动定时器        手动更改真实DOM<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 语法和说明<span class="token punctuation">:</span>         <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 在此可以执行任何带副作用操作</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在组件卸载前执行</span>            <span class="token comment" spellcheck="true">// 在此做一些收尾工作, 比如清除定时器/取消订阅等</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>stateValue<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果指定的是[], 回调函数只会在第一次render()后执行</span>    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 可以把 useEffect Hook 看做如下三个函数的组合        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><h5 id="5-Ref-Hook"><a href="#5-Ref-Hook" class="headerlink" title="5. Ref Hook"></a>5. Ref Hook</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Ref Hook可以在函数组件中存储<span class="token operator">/</span>查找组件内的标签或任意其它数据<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 语法<span class="token punctuation">:</span> <span class="token keyword">const</span> refContainer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 作用<span class="token punctuation">:</span>保存标签对象<span class="token punctuation">,</span>功能与React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样</code></pre><hr><h4 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. Fragment</h4><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre class=" language-jsx"><code class="language-jsx">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><blockquote><p>可以不用必须有一个真实的DOM根标签了</p></blockquote><hr><h4 id="5-Context"><a href="#5-Context" class="headerlink" title="5. Context"></a>5. Context</h4><h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><blockquote><p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p></blockquote><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token number">1</span><span class="token punctuation">)</span> 创建Context容器对象：    <span class="token keyword">const</span> XxxContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token number">2</span><span class="token punctuation">)</span> 渲染子组时，外面包裹xxxContext<span class="token punctuation">.</span>Provider<span class="token punctuation">,</span> 通过value属性给后代组件传递数据：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>数据<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        子组件    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xxxContext.Provider</span><span class="token punctuation">></span></span>    <span class="token number">3</span><span class="token punctuation">)</span> 后代组件读取数据：    <span class="token comment" spellcheck="true">//第一种方式:仅适用于类组件 </span>      <span class="token keyword">static</span> contextType <span class="token operator">=</span> xxxContext  <span class="token comment" spellcheck="true">// 声明接收context</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token comment" spellcheck="true">// 读取context中的value数据</span>          <span class="token comment" spellcheck="true">//第二种方式: 函数组件与类组件都可以</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxContext.Consumer</span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>          value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// value就是context中的value数据</span>            要显示的内容          <span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xxxContext.Consumer</span><span class="token punctuation">></span></span></code></pre><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><pre class=" language-jsx"><code class="language-jsx">    在应用开发中一般不用context<span class="token punctuation">,</span> 一般都它的封装react插件</code></pre><hr><h4 id="6-组件优化"><a href="#6-组件优化" class="headerlink" title="6. 组件优化"></a>6. 组件优化</h4><h5 id="Component的2个问题"><a href="#Component的2个问题" class="headerlink" title="Component的2个问题"></a>Component的2个问题</h5><blockquote><ol><li><p>只要执行setState(),即使不改变状态数据, 组件也会重新render()</p></li><li><p>只当前组件重新render(), 就会自动重新render子组件 &#x3D;&#x3D;&gt; 效率低</p></li></ol></blockquote><h5 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h5><blockquote><p> 只有当组件的state或props数据发生改变时才重新render()</p></blockquote><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><blockquote><p> Component中的shouldComponentUpdate()总是返回true</p></blockquote><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><pre class=" language-jsx"><code class="language-jsx">    办法<span class="token number">1</span><span class="token punctuation">:</span>         <span class="token function">重写shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法        比较新旧state或props数据<span class="token punctuation">,</span> 如果有变化才返回<span class="token boolean">true</span><span class="token punctuation">,</span> 如果没有返回<span class="token boolean">false</span>    办法<span class="token number">2</span><span class="token punctuation">:</span>          使用PureComponent        <span class="token function">PureComponent重写了shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 只有state或props数据有变化才返回<span class="token boolean">true</span>        注意<span class="token punctuation">:</span>             只是进行state和props数据的浅比较<span class="token punctuation">,</span> 如果只是数据对象内部数据变了<span class="token punctuation">,</span> 返回<span class="token boolean">false</span>              不要直接修改state数据<span class="token punctuation">,</span> 而是要产生新数据    项目中一般使用PureComponent来优化</code></pre><hr><h4 id="7-render-props"><a href="#7-render-props" class="headerlink" title="7. render props"></a>7. render props</h4><h5 id="如何向组件内部动态传入带内容的结构-标签"><a href="#如何向组件内部动态传入带内容的结构-标签" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)?"></a>如何向组件内部动态传入带内容的结构(标签)?</h5><pre class=" language-jsx"><code class="language-jsx">    Vue中<span class="token punctuation">:</span>         使用slot技术<span class="token punctuation">,</span> 也就是通过组件标签体传入结构  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BB</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AA</span><span class="token punctuation">></span></span>    React中<span class="token punctuation">:</span>        使用children props<span class="token punctuation">:</span> 通过组件标签体传入结构        使用render props<span class="token punctuation">:</span> 通过组件标签属性传入结构<span class="token punctuation">,</span> 一般用render函数属性</code></pre><h5 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a>children props</h5><pre class=" language-jsx"><code class="language-jsx">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>B</span><span class="token punctuation">></span></span>xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>B</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>A</span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>    问题<span class="token punctuation">:</span> 如果B组件需要A组件内的数据<span class="token punctuation">,</span> <span class="token operator">==</span><span class="token operator">></span> 做不到 </code></pre><h5 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h5><pre class=" language-jsx"><code class="language-jsx">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>C data<span class="token punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>C</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>A</span><span class="token punctuation">></span></span>    A组件<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>内部state数据<span class="token punctuation">)</span><span class="token punctuation">}</span>    C组件<span class="token punctuation">:</span> 读取A组件传入的数据显示 <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span> </code></pre><hr><h4 id="8-错误边界"><a href="#8-错误边界" class="headerlink" title="8. 错误边界"></a>8. 错误边界</h4><h5 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h5><p>错误边界：用来捕获后代组件错误，渲染出备用页面</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p><h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><p>getDerivedStateFromError配合componentDidCatch</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 生命周期函数，一旦后台组件报错，就会触发</span><span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在render之前触发</span>    <span class="token comment" spellcheck="true">// 返回新的state</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        hasError<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">componentDidCatch</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 统计页面的错误。发送请求发送到后台去</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="9-组件通信方式总结"><a href="#9-组件通信方式总结" class="headerlink" title="9. 组件通信方式总结"></a>9. 组件通信方式总结</h4><h5 id="方式："><a href="#方式：" class="headerlink" title="方式："></a>方式：</h5><pre class=" language-jsx"><code class="language-jsx">        props：            <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children props            <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>render props        消息订阅<span class="token operator">-</span>发布：            pubs<span class="token operator">-</span>sub、event等等        集中式管理：            redux、dva等等        conText<span class="token punctuation">:</span>            生产者<span class="token operator">-</span>消费者模式</code></pre><h5 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系"></a>组件间的关系</h5><pre class=" language-jsx"><code class="language-jsx">        父子组件：props        <span class="token function">兄弟组件</span><span class="token punctuation">(</span>非嵌套组件<span class="token punctuation">)</span>：消息订阅<span class="token operator">-</span>发布、集中式管理        <span class="token function">祖孙组件</span><span class="token punctuation">(</span>跨级组件<span class="token punctuation">)</span>：消息订阅<span class="token operator">-</span><span class="token function">发布、集中式管理、conText</span><span class="token punctuation">(</span>用的少<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diffing算法原理</title>
      <link href="/posts/62098.html"/>
      <url>/posts/62098.html</url>
      
        <content type="html"><![CDATA[<h3 id="Diffing算法"><a href="#Diffing算法" class="headerlink" title="Diffing算法"></a>Diffing算法</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><pre class=" language-jsx"><code class="language-jsx">    <span class="token operator">-</span> 当对比两棵树时，React 首先比较两棵树的根节点。不同类型的根节点元素会有不同的形态。    对比不同类型的元素    <span class="token operator">-</span> 当根节点为不同类型的元素时，React 会拆卸原有的树并且建立起新的树。举个例子，当一个    元素从 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> 变成 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span>，从 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Article</span><span class="token punctuation">></span></span> 变成 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comment</span><span class="token punctuation">></span></span>，或从 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">></span></span> 变成 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 都会触发一个完整的重建流程。    <span class="token operator">-</span> 当卸载一棵树时，对应的 DOM 节点也会被销毁。组件实例将执行 <span class="token function">componentWillUnmoun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    方法。当建立一棵新的树时，对应的 DOM 节点会被创建以及插入到 DOM 中。组件实例将执行     <span class="token function">UNSAFE_componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，紧接着 <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法。所有与之前的    树相关联的 state 也会被销毁。</code></pre><p>———— <a href="https://zh-hans.reactjs.org/docs/reconciliation.html#the-diffing-algorithm">react文档</a></p><hr><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><ul><li><p>1:  diffing 算法最小颗粒度是标签  (只可以精确到标签的位置)<br>  diffing 算法最小颗粒度是标签  (会一直递归循环遍历下去)</p></li><li><p>2：只要状态改变就会触发 render 函数 (实时修改状态)  (状态修改就会触发render函数);<br>在React&#x2F;Vue 中 key属性有什么作用？ (index 的内部原理是什么？)</p></li></ul><h5 id="渲染中key的选择"><a href="#渲染中key的选择" class="headerlink" title="渲染中key的选择"></a>渲染中key的选择</h5><ul><li><p>3.开发中如何选择key?:</p><ul><li><p>​     1.最好使用每条数据的唯一标识作为key,比如id、手机号、身份证号、学号等唯一值。</p></li><li><p>​     2.如果确定只是简单的展示数据,用index也是可以的。</p></li></ul><pre class=" language-jsx"><code class="language-jsx">  经典面试题<span class="token punctuation">:</span>        <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> react<span class="token operator">/</span>vue中的key有什么作用<span class="token operator">?</span> <span class="token punctuation">(</span>key的内部原理是什么<span class="token operator">?</span><span class="token punctuation">)</span>        <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 为什么遍历列表时<span class="token punctuation">,</span> key最好不要用index<span class="token operator">?</span>                <span class="token number">1</span><span class="token punctuation">.</span>虚拟DOM中key的作用            <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>简单的说<span class="token punctuation">:</span>key是虚拟DOM对象的标识<span class="token punctuation">,</span>在更新显示时key起着极其重要的作用。                        <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>详细的说<span class="token punctuation">:</span>当状态中的数据发生变化时<span class="token punctuation">,</span> react会根据【新数据】生成【新的虚拟DOM】<span class="token punctuation">,</span>            随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较<span class="token punctuation">,</span>比较规则如下<span class="token punctuation">:</span>                                    a<span class="token punctuation">.</span>I旧虚拟DOM中找到了与新虚拟DOM相同的key<span class="token punctuation">:</span>                                <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>若虚拟DOM中内容没变<span class="token punctuation">,</span>直接使用之前的真实DOM                                <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>若虚拟DOM中内容变了<span class="token punctuation">,</span>则生成新的真实DOM<span class="token punctuation">,</span>随后替换掉页面中之前的真实DOM                                                b<span class="token punctuation">.</span>旧虚拟DOM中未找到与新虚拟DOM相同的key                        根据数据创建新的真实DOM<span class="token punctuation">,</span>随后渲染到到页面                                <span class="token number">2</span><span class="token punctuation">.</span>用index作为key可能会引发的问题<span class="token punctuation">:</span>                    <span class="token number">1</span><span class="token punctuation">.</span>若对数据进行<span class="token punctuation">:</span>逆序添加、逆序删除等破坏顺序操作<span class="token punctuation">:</span>                            会产生没有必要的真实DOM更新<span class="token operator">==</span><span class="token operator">></span>界面效果没问题<span class="token punctuation">,</span>但效率低。                                        <span class="token number">2</span><span class="token punctuation">.</span>如果结构中还包含输入类的DOM<span class="token punctuation">:</span>                            会产生错误DOM更新<span class="token operator">==</span><span class="token operator">></span>界面有问题。                                                <span class="token number">3</span><span class="token punctuation">,</span>注意<span class="token operator">!</span>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作<span class="token punctuation">,</span>                    仅用于渲染列表用于展示<span class="token punctuation">,</span>使用index作为key是没有问题的。</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> web基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础</title>
      <link href="/posts/35233.html"/>
      <url>/posts/35233.html</url>
      
        <content type="html"><![CDATA[<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>React 是一个用于构建用户界面的 JavaScript 库。</p><ul><li>声明式： React 让创建交互式 UI 变得轻松。为应用程序中的每个状态设计简单的视图，当你的数据发生变化时，React 将有效地更新和呈现正确的组件。声明式视图使您的代码更可预测、更易于理解和更易于调试。</li><li>基于组件：构建管理其状态的封装组件，然后将它们组合成复杂的 UI。由于组件逻辑是用 JavaScript 而不是模板编写的，因此您可以轻松地通过应用程序传递丰富的数据并将状态保持在 DOM 之外。</li><li>一次学习，随处编写：我们不对您的技术堆栈的其余部分做出假设，因此您可以在 React 中开发新功能而无需重写现有代码。React 还可以使用 Node 在服务器上呈现，并使用React Native为移动应用程序提供动力。</li></ul><h4 id="jsx语法规则"><a href="#jsx语法规则" class="headerlink" title="jsx语法规则:"></a>jsx语法规则:</h4><ul><li><p>1.创建虚拟DOM时，不要用引号</p></li><li><p>2.标签中想混入js表达式，需要用{}包裹</p></li><li><p>3.根标签只能有一个</p></li><li><p>4.标签必须闭合</p></li><li><p>5.样式的类名，不要用class，必须用className</p></li><li><p>6.内联的样式要用下列形式 ( 双括号会报错所以采取图片的形式展现 )<br><img src="/posts/react/style.png" alt="style"></p></li><li><p>7.标签可以随意的编写:</p><ul><li><p>(1).若标签首字母是【小写】的,则react会尝试将当前的jsx标签对应成一个html标签</p><ul><li><p>​                  若对应成了,直接渲染,展示</p></li><li><p>​                  若无法对应,直接报错</p></li></ul></li></ul></li><li><p>​(1).若标签首字母是【大写】的,react会查找Haha组件的定义的位置</p><ul><li><p>​若找见了,直接渲染Haha组件</p></li><li><p>​若未找见,报错(Haha is not defined)</p></li></ul></li></ul><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><h5 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h5><pre class=" language-jsx"><code class="language-jsx">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">//1.定义组件(函数式组件)</span>            <span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处的this是undefined，因为经过babel的编译后，开启了严格模式。</span>            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是用函数定义的组件（适用于【简单组件】的定义）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">MyComponent2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处的this是undefined，因为经过babel的编译后，开启了严格模式。</span>            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是用函数定义的组件（适用于【简单组件】的定义<span class="token number">2</span>）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//2.渲染组件到页面</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent2</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/*             执行了ReactDOM.render后，发生了什么？            1.React发现了&lt;MyComponent/>标签，去寻找MyComponent组件定义的位置，发现MyComponent是用函数定义的。            2.React调用MyComponent并获取MyComponent返回的虚拟DOM，随后转为真实DOM，随后渲染到页面。            */</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h5><pre class=" language-jsx"><code class="language-jsx">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">//定义组件</span>        <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//render是放在哪里的？ —————— MyComponent的原型对象上，是给MyComponent的实例对象用的。</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//MyComponent的实例对象 &lt;==> MyComponent组件实例对象</span>                <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是用类定义的组件（适用于【复杂组件】的定义）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//渲染组件到页面</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*                 执行了ReactDOM.render后，发生了什么？                        1.React发现了&lt;MyComponent/>标签，去寻找MyComponent组件定义的位置，发现MyComponent是用类定义的。                        2.React new了一个MyComponent实例对象--m                        3.通过m调用到了MyComponent原型上的render方法，并获取到了返回的虚拟DOM，随后转为真实DOM，放在页面。        */</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="生命周期相关"><a href="#生命周期相关" class="headerlink" title="生命周期相关"></a>生命周期相关</h5><p><strong>旧</strong>(react16.4之前)</p><ol><li>初始化阶段: 由ReactDOM.render()触发—初次渲染<br>   1.constructor()<br> 2.componentWillMount()<br> 3.render()<br> 4.&#x3D;&#x3D;componentDidMount() ====&gt; 常用<br>                        一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息&#x3D;&#x3D;</li><li>更新阶段: 由组件内部this.setSate()或父组件render触发this.forceUpdate()<br>1.shouldComponentUpdate() 注意：强制更新不走“阀门”<br>2.componentWillUpdate()<br>3.&#x3D;&#x3D;render()&#x3D;&#x3D;<br>  componentDidUpdate()</li><li>卸载组件: 由ReactDOM.unmountComponentAtNode()触发<ol><li>&#x3D;&#x3D;componentWillUnmount()  ====&gt; 常用&#x3D;&#x3D;</li></ol></li></ol><p>  &#x3D;&#x3D;一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息&#x3D;&#x3D;</p><p><img src="/posts/react/react-life-old.png" alt="react生命周期(旧)"></p><ul><li><strong>新</strong>(react16.4之后)</li></ul><p><img src="/posts/react/react-life-new.png" alt="react生命周期(新)"></p><h5 id="组件总结"><a href="#组件总结" class="headerlink" title="组件总结"></a>组件总结</h5><ul><li><strong>最重要的三组件</strong><ul><li>componentDidMount() </li><li>render()</li><li>componentWillUnmount()</li></ul></li></ul><p> <strong>组件的三大属性</strong></p><ul><li><p><strong>state</strong></p><ul><li><p>用来存储状态</p></li><li><p>严重注意:<strong>状态(state)中值是不能直接修改的</strong>！！！下面这一行就是直接修改</p></li><li><pre class=" language-jsx"><code class="language-jsx">  <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>需要通过this.setState()方法来修改</strong></p></li></ul></li><li><p><strong>props</strong></p><ul><li>用于接收标签中传递的数据</li></ul></li><li><p><strong>refs</strong></p><ul><li><p>简介：对标签的一种标识，用于获取数据。类式标签中的id</p></li><li><p><strong>三种形式</strong></p><ul><li>字符串形式:</li></ul><pre class=" language-jsx"><code class="language-jsx">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击按钮提示输入<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>回调形式(推荐):</strong></li></ul><pre class=" language-jsx"><code class="language-jsx">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> c<span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击按钮提示输入<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span></code></pre><ul><li>createRef形式:</li></ul><pre class=" language-jsx"><code class="language-jsx">    container1 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//创建一个createRef() ，只能存储一个ref</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>container1<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击按钮提示输入<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>点我提示数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>container2<span class="token punctuation">}</span></span> <span class="token attr-name">onBlur</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData2<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击焦点提示输入<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token punctuation">)</span>                <span class="token punctuation">}</span></code></pre></li></ul></li></ul><h5 id="React中的事件处理"><a href="#React中的事件处理" class="headerlink" title="React中的事件处理"></a>React中的事件处理</h5><ul><li>通过onXxx属性指定事件处理函数(注意大小写)</li></ul><p>​         1)React使用的是自定义(合成)事件, 而不是使用的原生DOM事件      ———————— 为了更好的兼容性</p><p>​         2)React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ———————— 为了提高效率</p><ul><li>通过event.target得到发生事件的DOM元素对象</li></ul><h5 id="受控组件和非受控组件"><a href="#受控组件和非受控组件" class="headerlink" title="受控组件和非受控组件"></a>受控组件和非受控组件</h5><ul><li><p>非受控的概念：现用现取</p></li><li><p>受控的概念：组件中输入类的DOM，随着用户的输入，将输入的值维护到state中</p></li></ul><p><strong>高阶函数_函数的柯里化</strong></p><ul><li><strong>高阶函数</strong>：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数</li></ul><p>​        1.若A函数，接收的<strong>参数是一个函数</strong>，那么A就可以称之为高阶函数。</p><p>​        2.若A函数，调用的<strong>返回值依然是一个函数</strong>，那么A就可以称之为高阶函数。</p><p>​        常见的有：Promise、setTimeout、arr.forEach()…..</p><ul><li><strong>函数的柯里化</strong>：通过函数调用继续返回函数的方式，实现<strong>多次接收参数最后 统一处理 的函数编码形式</strong></li></ul><h3 id="React脚手架"><a href="#React脚手架" class="headerlink" title="React脚手架"></a>React脚手架</h3><h4 id="react脚手架包含内容"><a href="#react脚手架包含内容" class="headerlink" title="react脚手架包含内容"></a>react脚手架包含内容</h4><ol><li><p>xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目</p><ol><li><p>包含了所有需要的配置（语法检查、jsx编译、devServer…）</p></li><li><p>下载好了所有相关的依赖</p></li><li><p>可以直接运行一个简单效果</p></li></ol></li><li><p>react提供了一个用于创建react项目的脚手架库: create-react-app</p></li><li><p>项目的整体技术架构为:  react + webpack + es6 + eslint</p></li><li><p>使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</p></li></ol><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="创建项目并启动"><a href="#创建项目并启动" class="headerlink" title="创建项目并启动"></a>创建项目并启动</h5><ul><li><p><strong>第一步</strong>，全局安装：</p><pre class=" language-jsx"><code class="language-jsx">    npm i <span class="token operator">-</span>g create<span class="token operator">-</span>react<span class="token operator">-</span>app</code></pre></li><li><p><strong>第二步</strong>，切换到想创项目的目录，使用命令：</p><pre class=" language-jsx"><code class="language-jsx">    create<span class="token operator">-</span>react<span class="token operator">-</span>app hello<span class="token operator">-</span>react</code></pre></li><li><p><strong>第三步</strong>，进入项目文件夹：</p><pre class=" language-jsx"><code class="language-jsx">    cd hello<span class="token operator">-</span>react</code></pre></li><li><p><strong>第四步</strong>，启动项目：</p><pre class=" language-jsx"><code class="language-jsx">    npm start</code></pre></li></ul><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><pre class=" language-jsx"><code class="language-jsx">    <span class="token keyword">public</span> <span class="token operator">--</span><span class="token operator">--</span> 静态资源文件夹            favicon<span class="token punctuation">.</span>icon <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 网站页签图标            index<span class="token punctuation">.</span>html <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 主页面            logo192<span class="token punctuation">.</span>png <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> logo图            logo512<span class="token punctuation">.</span>png <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> logo图            manifest<span class="token punctuation">.</span>json <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 应用加壳的配置文件            robots<span class="token punctuation">.</span>txt <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 爬虫协议文件    src <span class="token operator">--</span><span class="token operator">--</span> 源码文件夹            App<span class="token punctuation">.</span>css <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> App组件的样式            App<span class="token punctuation">.</span>js <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> App组件            App<span class="token punctuation">.</span>test<span class="token punctuation">.</span>js <span class="token operator">--</span><span class="token operator">--</span> 用于给App做测试            index<span class="token punctuation">.</span>css <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 样式            index<span class="token punctuation">.</span>js <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 入口文件            logo<span class="token punctuation">.</span>svg <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> logo图            reportWebVitals<span class="token punctuation">.</span>js                <span class="token operator">--</span><span class="token operator">-</span> <span class="token function">页面性能分析文件</span><span class="token punctuation">(</span>需要web<span class="token operator">-</span>vitals库的支持<span class="token punctuation">)</span>            setupTests<span class="token punctuation">.</span>js                <span class="token operator">--</span><span class="token operator">--</span> <span class="token function">组件单元测试的文件</span><span class="token punctuation">(</span>需要jest<span class="token operator">-</span>dom库的支持<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/posts/15317.html"/>
      <url>/posts/15317.html</url>
      
        <content type="html"><![CDATA[<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles，它们均为静态资源，用于展示你的内容。————<a href="https://webpack.docschina.org/concepts/">webpack文档</a></li></ul><h4 id="简单的配置文件"><a href="#简单的配置文件" class="headerlink" title="简单的配置文件"></a>简单的配置文件</h4><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/*     1. 该文件是webpack的配置文件，所有的webpack的任务、用到的loader、plugins都要配置在这里    2. 该文件要符合CJS模块化规范     */</span>    <span class="token comment" spellcheck="true">// 引入Node中一个内置的path模块，专门用于解决路劲问题</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 引入html-webpack-plugin ，用于加工html文件</span>    <span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 引入</span>    <span class="token comment" spellcheck="true">// const Webpack = require('webpack');</span>    <span class="token comment" spellcheck="true">// const WebpackDevServer = require('webpack-dev-server');</span>    <span class="token comment" spellcheck="true">//css  相关loader配置</span>    <span class="token keyword">const</span> baseCssLoader <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 使用CJS的模块化规范，暴露一个对象，该对象就是webpack的详细配置对象（规则）</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//工作模式</span>    entry<span class="token punctuation">:</span> <span class="token string">'./src/js/app.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//入口</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//出口（输出）</span>        path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//输出文件的路径</span>        filename<span class="token punctuation">:</span> <span class="token string">'js/app.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//输出文件名字</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// module.rules中配置的一个一个的loader</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// 配置解析css</span>        <span class="token punctuation">{</span>            test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">...</span>baseCssLoader<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置解析less</span>        <span class="token punctuation">{</span>            test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token operator">...</span>baseCssLoader<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// creates style nodes from JS strings and translates CSS into CommonJS</span>            <span class="token string">'less-loader'</span>  <span class="token comment" spellcheck="true">// compiles Less to CSS</span>        <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置解析样式中的图片</span>        <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|gif|bmp)$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            loader<span class="token punctuation">:</span><span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span><span class="token punctuation">{</span>                outputPath<span class="token punctuation">:</span><span class="token string">'imgs'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//配置图片加工后，，存放的位置</span>                <span class="token comment" spellcheck="true">// publicPath:'/build/imgs'  //配置图片引入时前缀的路径</span>                name<span class="token punctuation">:</span><span class="token string">'[hash:5].[ext]'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//配置生成图片的名字+后缀</span>                limit<span class="token punctuation">:</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span>    <span class="token comment" spellcheck="true">//图片大小，小于8kb时，将图片转为base64编码 </span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置解析html中的图片</span>        <span class="token punctuation">{</span>            test<span class="token punctuation">:</span><span class="token regex">/\.(html)$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'html-loader'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置解析字体文件</span>        <span class="token punctuation">{</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/\.(html|less|css|js|json|png|jpg|bmp|gif)$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            loader<span class="token punctuation">:</span><span class="token string">'file-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span><span class="token punctuation">{</span>                outputPath<span class="token punctuation">:</span><span class="token string">'media'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//配置图片加工后，，存放的位置</span>                <span class="token comment" spellcheck="true">// publicPath:'/build/imgs'  //配置图片引入时前缀的路径</span>                name<span class="token punctuation">:</span><span class="token string">'[hash:5].[ext]'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//配置生成图片的名字+后缀</span>                            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// plugins中专门用于配置插件，插件必须经过实例化这一环节</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'./src/index.html'</span>  <span class="token comment" spellcheck="true">//模板的位置</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 配置devServer</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// static:'./build',</span>        port<span class="token punctuation">:</span><span class="token number">5500</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//开启服务器的端口号</span>        open<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//自动打开浏览器</span>        hot<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token comment" spellcheck="true">//模块热更新(热膜替换)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/posts/13229.html"/>
      <url>/posts/13229.html</url>
      
        <content type="html"><![CDATA[<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><ul><li><p>定义：<strong>箭头函数表达式</strong>的语法比<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function">函数表达式</a>更简洁，并且没有自己的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">this</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments">arguments</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super">super</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target">new.target</a>。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</p></li><li><p>特点：</p><pre class=" language-js"><code class="language-js">  <span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">this</span> 的值是静态的 <span class="token punctuation">(</span>等于 外层作用域下<span class="token keyword">this</span>的值<span class="token punctuation">)</span>  <span class="token keyword">let</span> getName2 <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  getName2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token number">2</span><span class="token punctuation">.</span>不能作为构造函数使用  <span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">3</span><span class="token punctuation">.</span>不能使用 arguments  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//arguments是一个伪数组</span>  <span class="token punctuation">}</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">4</span><span class="token punctuation">.</span>箭头函数简写  一 不写小括号，当新参有且只有一个的时候  二 不写花括号<span class="token punctuation">,</span> 当代码体只有一条语句的时候<span class="token punctuation">,</span> 并且语句的执行结果为函数返回值的 <span class="token punctuation">(</span>如果不  <span class="token keyword">let</span> pow <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h5 id="…运算符"><a href="#…运算符" class="headerlink" title="…运算符"></a>…运算符</h5><pre class=" language-js"><code class="language-js">      <span class="token comment" spellcheck="true">// ...运算符    是扩展运算符</span>         <span class="token comment" spellcheck="true">//  打包和拆包    要么是数组要么是对象</span>         <span class="token comment" spellcheck="true">// 对于打包只有一种情况是打包并且打包只能打包数组</span></code></pre><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 数组的打包和拆包</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 拆包     数组可以直接拆包</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数组打包</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 对象只能拆包     不能直接拆包</span>      <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span><span class="token string">'zly'</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span><span class="token number">33</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><h5 id="暴露模块的方式"><a href="#暴露模块的方式" class="headerlink" title="暴露模块的方式"></a>暴露模块的方式</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//使用【分别暴露】</span>  <span class="token keyword">export</span> <span class="token keyword">const</span> teacher1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'强哥'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span>  <span class="token keyword">export</span> <span class="token keyword">const</span> teacher2 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'歌神'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用【统一暴露】</span>  <span class="token keyword">const</span> stu1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'王宇'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'宇航'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span>  <span class="token keyword">export</span> <span class="token punctuation">{</span>stu1<span class="token punctuation">,</span>stu2<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用【默认暴露】</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>      school<span class="token punctuation">:</span><span class="token string">'尚硅谷'</span><span class="token punctuation">,</span>      address<span class="token punctuation">:</span><span class="token string">'宏福科技园'</span><span class="token punctuation">,</span>      subjects<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'前端'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'大数据'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h5 id="引入暴露模块方式"><a href="#引入暴露模块方式" class="headerlink" title="引入暴露模块方式"></a>引入暴露模块方式</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//引入【分别暴露】的模块</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span>showData<span class="token punctuation">,</span>showMsg<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module1'</span>    <span class="token comment" spellcheck="true">//引入【分别暴露】的模块+重命名</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>data <span class="token keyword">as</span> data2<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module2'</span>    <span class="token comment" spellcheck="true">//引入【分别暴露】+ 打包引入</span>  <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> module1 <span class="token keyword">from</span> <span class="token string">'./module1'</span>    <span class="token comment" spellcheck="true">//引入【统一暴露】支持上面三种引入方式</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>school <span class="token keyword">as</span> d<span class="token punctuation">,</span>getLaoliu<span class="token punctuation">,</span>person<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module3'</span>    <span class="token comment" spellcheck="true">//引入【默认暴露】</span>  <span class="token keyword">import</span> module4 <span class="token keyword">from</span> <span class="token string">'./module4'</span>    <span class="token comment" spellcheck="true">//引入多种暴露方式的模块</span>  <span class="token keyword">import</span> module5<span class="token punctuation">,</span><span class="token punctuation">{</span>teacher1<span class="token punctuation">,</span>teacher2<span class="token punctuation">,</span>stu1<span class="token punctuation">,</span>stu2<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module5'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX_AXIOS</title>
      <link href="/posts/20614.html"/>
      <url>/posts/20614.html</url>
      
        <content type="html"><![CDATA[<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>Asynchronous JavaScript + XML（异步JavaScript和XML）, 其本身不是一种新技术，而是一个在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的‘新’方法，包括: HTML 或 XHTML,  CSS, JavaScript, DOM, XML, XSLT, 以及最重要的 XMLHttpRequest。当使用结合了这些技术的AJAX模型以后， 网页应用能够快速地将增量更新呈现在用户界面上，而不需要重载（刷新）整个页面。这使得程序能够更快地回应用户的操作。<br>尽管X在Ajax中代表XML, 但由于JSON的许多优势，比如更加轻量以及作为Javascript的一部分，目前JSON的使用比XML更加普遍。JSON和XML都被用于在Ajax模型中打包信息。<br>————<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX">MDN文档</a></li><li><strong>实现界面无刷新获取数据</strong></li></ul><h4 id="利用Ajax发送请求"><a href="#利用Ajax发送请求" class="headerlink" title="利用Ajax发送请求"></a>利用Ajax发送请求</h4><h5 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h5><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 发送 ajax请求</span>        <span class="token comment" spellcheck="true">//1.创建Xhr实例对象</span>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定监听</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  函数体</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                    content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;h3></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3>`</span></span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 2.指定发送请求的: method、url、参数</span>        <span class="token comment" spellcheck="true">/*            1.形如：key=value&amp;key=value 就是query参数是surlencoded编码            2.形如：/xx/xxx/老刘/18 就是params参数        */</span>        <span class="token comment" spellcheck="true">// xhr.open('GET', 'http:///127.0.0.1:8080/test_get?name=老刘&amp;age=18');   // 携带query参数</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http:///127.0.0.1:8080/test_get2/老刘/18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>携带                <span class="token comment" spellcheck="true">// 3.发送请求</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h5><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 发送 ajax请求</span>        <span class="token comment" spellcheck="true">//1.创建Xhr实例对象</span>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定监听</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  函数体</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                    content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;h3></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>xhr<span class="token punctuation">.</span>response<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3>`</span></span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 2.指定发送请求的: method、url、参数</span>        <span class="token comment" spellcheck="true">/*            1.形如：key=value&amp;key=value 就是query参数是surlencoded编码            2.形如：/xx/xxx/老刘/18 就是params参数        */</span>        <span class="token comment" spellcheck="true">// xhr.open('GET', 'http:///127.0.0.1:8080/test_get?name=老刘&amp;age=18'); //携带query参数</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http:///127.0.0.1:8080/test_post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>携带                <span class="token comment" spellcheck="true">//追加响应头用于标识携带参数的编码形式---urlencoded</span>        <span class="token comment" spellcheck="true">// xhr.setRequestHeader('Content-type','application/x-www-form-urlencoded')</span>        <span class="token comment" spellcheck="true">//追加响应头用于标识携带参数的编码形式---json</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span><span class="token string">'application/json'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 3.发送请求</span>        <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'老刘'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// xhr.send('name=老刘&amp;age=18'); //携带urlencoded编码形式的请求体参数</span>        <span class="token comment" spellcheck="true">//send中的参数 为请求体参数</span>        <span class="token comment" spellcheck="true">//send中 参数的 编码格式为 urlencoded</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//携带json编码形式的请求参数</span></code></pre><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><ul><li>Axios 是一个基于 promise 网络请求库，作用于node.js 和浏览器中。 它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h4><ul><li>从浏览器创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF<br>————<a href="https://axios-http.com/zh/docs/intro">Axios官网</a></li></ul></li></ul><h4 id="三种参数"><a href="#三种参数" class="headerlink" title="三种参数"></a>三种参数</h4><ul><li><code>params</code><br>  参数是路径的一部分，并且这个参数只能在url路径当中出现</li><li><code>query</code><br> 查询参数<br> 这个参数可以出现在url当中也可以 出现在配置项当中配置url当中是 ? 后面的 key &#x3D; value &amp;key &#x3D;value在配置项当中 配置项的名称叫做params</li><li><code>body</code><br>  请求体参数<br>  通常用在post和put当中，只能在配置对象当中配置;<br>  data这个配置项就是你的body请求体参数,这个数据必须是一个对象</li></ul><p>注意：</p><ul><li>携带query参数时，编写的配置项叫做params</li><li>携带params参数时，就需要自己手动拼在url中<h4 id="利用Axios发送请求"><a href="#利用Axios发送请求" class="headerlink" title="利用Axios发送请求"></a>利用Axios发送请求</h4></li></ul><h5 id="get请求-1"><a href="#get请求-1" class="headerlink" title="get请求"></a>get请求</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向给定ID的用户发起请求</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理成功情况</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理错误情况</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 总是会执行</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 上述请求也可以按以下方式完成（可选）</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      ID<span class="token punctuation">:</span> <span class="token number">12345</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 总是会执行</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 支持async/await用法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="post请求-1"><a href="#post请求-1" class="headerlink" title="post请求"></a>post请求</h5><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Flintstone'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>发起多个并发请求<span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345/permissions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> acct <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> perm <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><h4 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h4><pre class=" language-js"><code class="language-js">    axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 添加请求拦截器</code></pre><p>1.是什么？</p><ul><li>在真正<strong>发请求前</strong>执行的一个回调函数</li></ul><p>2.作用：</p><ul><li>对所有的请求做统一的处理：追加请求头、追加参数、界面loading提示等等</li></ul><h4 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h4><pre class=" language-js"><code class="language-js">    axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 添加响应拦截器</code></pre><p>1.是什么？</p><ul><li>得到响应之后执行的一组回调函数</li></ul><p>2.作用：</p><p>​- <strong>若请求成功，对成功的数据进行处理</strong></p><p>​- <strong>若请求失败，对失败进行统一的操作</strong></p><h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><ul><li>async awiat  是使用<strong>同步代码实现异步效果</strong></li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>async 函数返回的是promise</li><li>async 函数返回值不看 return <strong>必然返回promise</strong></li><li>async  函数返回的promise是成功还是失败   看return</li><li>return的结果代表promise是成功还是失败</li></ul><p>1、如果return是一个非promise的值   代表async函数返回的promise是成功<br>    - 成功的结果是return的结果</p><p>2、如果返回的是成功的promise   代表async函数返回的promise函数返- mise也是成功的（他们不是一个promise）</p><ul><li>成功的结果是return的promise的成功结果</li></ul><p>3、如果返回的是失败的promise   代表async函数返回的promise是失败的</p><ul><li>失败的原因是return的promise失败的原因</li></ul><p>4、如果throw出错误，代表async函数返回的promise是失败的</p><ul><li>失败的原因是抛出的错误的原因</li></ul><h4 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h4><h5 id="1、配置代理服务器"><a href="#1、配置代理服务器" class="headerlink" title="1、配置代理服务器"></a>1、配置代理服务器</h5><pre class=" language-js"><code class="language-js">    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//只用与开发环境</span>      proxy<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">'api'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//支队请求路由以/api开头的其你去进行代理转发</span>          target<span class="token punctuation">:</span><span class="token string">'http://gmall-h5-api.atguigu.cn'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//转发的目标url</span>          changeOrigin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//支持跨域</span>          <span class="token comment" spellcheck="true">// pathRewrite:{'^/api':''}     // 后台接口都有/api</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="2、jsonp解决跨域"><a href="#2、jsonp解决跨域" class="headerlink" title="2、jsonp解决跨域"></a>2、jsonp解决跨域</h5><p><strong>跨域</strong><br>1、是什么<br>​浏览器上的<strong>同源策略</strong></p><p><strong>特点：</strong><br>​1、跨域只存在于浏览器<br>​2、不在浏览器发请求是不会存在跨域问题的<br>​3、<code>http</code>请求分为两大类： 普通<code>http</code>请求和<code>ajax</code>请求（跨域是出现在ajax请求）</p><p><strong>1、普通请求和<code>ajax</code>请求区别</strong><br>​普通请求  一般只有get（a标签和地址栏输入回车）和 <code>post</code>(<code>form</code>表单)  页面会刷新  不会跨域<br>​<code>ajax</code>请求  一般 <code>get</code>  <code>post</code>  <code>delete</code>  <code>put</code>  一般都是异步发送的  页面不刷新  局部更新</p><p><strong>2、在什么地方会出现跨域</strong><br>    浏览器给服务器发ajax请求会跨域 因为跨域（同源策略）只存在于浏览器<br>    服务器给服务器发ajax请求不会</p><p><strong>3、什么条件会跨域</strong><br>    同源（协议  ip  端口一致）不跨域<br>    不同源就跨域（三个中间有一个不一样就跨域）<br>    <a href="http://localhost:8080/">http://localhost:8080/</a>     ——-  》 github    </p><p><strong>4、解决跨域：</strong><br>前端可以解决、后端解决。一般后端解决比前端解决容易</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 1.创建script节点</span>         <span class="token keyword">const</span> scriptNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 2.给节点指定src属性（请求地址）</span>         scriptNode<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:8080/test_jsonp?callback=peiqi'</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 3.将节点放入界面</span>         document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span>         window<span class="token punctuation">.</span>peiqi <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//5.移除已经使用过的script节点</span>         document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptNode<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//总结：Jsonp解决跨域，本质上是避开了 xhr 不受同源策略的限制 利用</span>    <span class="token comment" spellcheck="true">//script 标签发起请求，拿到数据</span></code></pre><h5 id="3、cors解决跨域（后端）"><a href="#3、cors解决跨域（后端）" class="headerlink" title="3、cors解决跨域（后端）"></a>3、cors解决跨域（后端）</h5><pre class=" language-js"><code class="language-js">  node<span class="token punctuation">.</span>js    <span class="token comment" spellcheck="true">//在后端服务器 添加特殊响应头</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Expose-Origin'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//引入cors包</span>    <span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//可以直接为所有请求添加特殊响应头</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/posts/35944.html"/>
      <url>/posts/35944.html</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。这个简单模型是早期Web成功的有功之臣，因为它使开发和部署非常地直截了当。                    ————百度</li></ul><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h5 id="利用http模块创建一个简单的服务器"><a href="#利用http模块创建一个简单的服务器" class="headerlink" title="利用http模块创建一个简单的服务器"></a>利用http模块创建一个简单的服务器</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 1.引入 http 模块</span>  <span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.调用方法 创建服务器对象</span>  <span class="token comment" spellcheck="true">/*       * request 请求报文的封装对象      * response 响应报文的封装对象  */</span>  <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello HTTP server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.监听端口  启动服务</span>  <span class="token comment" spellcheck="true">/*       端口号    计算的服务端口窗口  总共65536个  8000 3000 9000 8080      默认端口 80       ctrl + c 停止服务  */</span>  server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器已经启动，端口 8000 坚挺中......'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  </code></pre><h5 id="将服务器拆分为-不同组件"><a href="#将服务器拆分为-不同组件" class="headerlink" title="将服务器拆分为 不同组件"></a>将服务器拆分为 不同组件</h5><p>  主函数 <strong><code>app.js</code></strong></p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">server</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 回调函数 <strong><code>callback.js</code></strong></p><pre class=" language-js"><code class="language-js">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello NPM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p> 服务对象 <strong><code>server.js</code></strong></p><pre class=" language-js"><code class="language-js">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.调用方法 创建服务器对象</span>        <span class="token comment" spellcheck="true">/*         * request 请求报文的封装对象        * response 响应报文的封装对象        */</span>        <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./callback'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> serverCb <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./serverOkCallback'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.监听端口  启动服务</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> serverCb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>  监听端口 <strong><code>serverOkCallback.js</code></strong></p><pre class=" language-js"><code class="language-js">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器已经启动，端口坚挺中......'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>  在<code>server.js</code>中我们可以做很多事情</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 获取请求报文  GET    /s?wd=关键字 (URL)   HTTP/1.1</span>    <span class="token comment" spellcheck="true">// 1.请求的类型</span>    <span class="token comment" spellcheck="true">// console.log(request.method);</span>    <span class="token comment" spellcheck="true">// console.log(request.method);</span>    <span class="token comment" spellcheck="true">// 2.请求的URL</span>    <span class="token comment" spellcheck="true">// console.log(request.url);</span>    <span class="token comment" spellcheck="true">// 3.HTTP协议版本</span>    <span class="token comment" spellcheck="true">// console.log(request.httpVersion);</span>    <span class="token comment" spellcheck="true">// 4.获取URL中的路径部分</span>    <span class="token comment" spellcheck="true">// 二 调用方法获取参数</span>    <span class="token comment" spellcheck="true">// console.log(url.parse(request.url).pathname); </span>    <span class="token comment" spellcheck="true">// 5.获取查询字符串</span>    <span class="token comment" spellcheck="true">// console.log(url.parse(request.url,true).query);</span>    <span class="token comment" spellcheck="true">// 6.请求头信息</span>    <span class="token comment" spellcheck="true">// console.log(request.headers);</span></code></pre><p>  也可以添加事件</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 提取请求体数据 POST请求</span>    <span class="token comment" spellcheck="true">// 1.声明一个字符串变量</span>    <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.绑定data事件</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>chunk <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拼接</span>        body <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3.绑定end事件</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 qs 对象的方法</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'body recevie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/46563.html"/>
      <url>/posts/46563.html</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/zhengze/zhengze.png" alt="zhengze"></p>]]></content>
      
      
      <categories>
          
          <category> web基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript</title>
      <link href="/posts/9809.html"/>
      <url>/posts/9809.html</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="遍历相关"><a href="#遍历相关" class="headerlink" title="遍历相关"></a>遍历相关</h4><pre class=" language-js"><code class="language-js">        <span class="token operator">-</span> <span class="token keyword">for</span>          最基本的循环    用来专门遍历数组的      可以使用<span class="token keyword">break</span>和<span class="token keyword">continue</span>        <span class="token operator">-</span> <span class="token keyword">for</span> <span class="token keyword">in</span>       专门用来遍历对象的属性的，这个属性能遍历到还是遍历不到要看这个属性是不是          ​     <span class="token comment" spellcheck="true">// for in 效率最低，因为除了遍历自身以外还要遍历原型</span>        <span class="token operator">-</span> <span class="token keyword">for</span> <span class="token keyword">of</span>                 <span class="token operator">-</span> ​     <span class="token comment" spellcheck="true">// 专门遍历可迭代的数据  ...  (能用可迭代，就用三点) </span>          <span class="token operator">-</span> ​     <span class="token comment" spellcheck="true">// 数组有迭代器</span>          <span class="token operator">-</span> ​     <span class="token comment" spellcheck="true">// 对象没有</span>        <span class="token operator">-</span> forEach      是一个数组的方法，效率极高  但是不可以使用<span class="token keyword">break</span>和<span class="token keyword">continue</span></code></pre><h4 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h4><h5 id="every"><a href="#every" class="headerlink" title="every"></a>every</h5><h5 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">  <span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> radix<span class="token punctuation">)</span>   解析一个字符串并返回指定基数的十进制整数， radix 是<span class="token number">2</span><span class="token operator">-</span><span class="token number">36</span>之间的整数，表示被解析字符串的基数。</code></pre></li><li><p>语法参数</p><pre class=" language-js"><code class="language-js">    <span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span>    参数        string    <span class="token function">要被解析的值。如果参数不是一个字符串，则将其转换为字符串</span><span class="token punctuation">(</span>使用  ToString 抽象操作<span class="token punctuation">)</span>。字符串开头的空白符将会被忽略。    radix 可选    从 <span class="token number">2</span> 到 <span class="token number">36</span>，表示字符串的基数。例如指定 <span class="token number">16</span> 表示被解析值是十六进制数。请注意，<span class="token number">10</span>不是默认值！文章后面的描述解释了当参数 radix 不传时该函数的具体行为。</code></pre></li><li><p>返回值</p><pre class=" language-js"><code class="language-js">    从给定的字符串中解析出的一个整数。        或者 <span class="token number">NaN</span>，当        radix 小于 <span class="token number">2</span> 或大于 <span class="token number">36</span> ，或        第一个非空格字符不能转换为数字。        <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将'123'看作5进制数，返回十进制数38 => 1*5^2 + 2*5^1 + 3*5^0 = 38</span></code></pre></li></ul><h5 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">  方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 <span class="token template-string"><span class="token string">`true`</span></span>，否则返回 <span class="token template-string"><span class="token string">`false`</span></span>。</code></pre><ul><li>语法以及参数</li></ul><pre class=" language-js"><code class="language-js">  arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>valueToFind<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>  valueToFind      需要查找的元素值。            备注：使用 <span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>比较字符串和字符时是区分大小写的。        fromIndex 可选      从fromIndex 索引处开始查找 valueToFind。如果为负值，则按升序从 array<span class="token punctuation">.</span>length <span class="token operator">+</span> fromIndex 的索引开始搜 （即使从末尾开始往前跳 fromIndex 的绝对值个索引，然后往后搜寻）。默认为 <span class="token number">0</span>。</code></pre><ul><li>返回值</li></ul><pre class=" language-js"><code class="language-js">  返回一个布尔值 Boolean 。  <span class="token punctuation">]</span>如果在数组中（或 fromIndex 指定的范围中）找到了 valueToFind，则返回 <span class="token boolean">true</span>，否则返回 <span class="token boolean">false</span>。  <span class="token number">0</span> 的值将全部视为相等，与符号无关（即 <span class="token operator">-</span><span class="token number">0</span> 与 <span class="token number">0</span> 和 <span class="token operator">+</span><span class="token number">0</span> 相等），  但 <span class="token boolean">false</span> 不被认为与 <span class="token number">0</span> 相等。  备注： <span class="token function">技术上来讲，includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 使用 零值相等 算法来确定是否找到给定的元素。</code></pre><ul><li>示例</li></ul><pre class=" language-js"><code class="language-js">  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre></li><li><p>注意</p></li></ul><pre class=" language-js"><code class="language-js">  fromIndex 大于等于数组长度  如果 fromIndex 大于等于数组的长度，则将直接返回 <span class="token boolean">false</span>，且不搜索该数组。  计算出的索引小于 <span class="token number">0</span>  如果 fromIndex 为负值，计算出的索引将作为开始搜索searchElement的位置。如果计算出的索引小于 <span class="token number">0</span>，则整个数组都会被搜索。  作为通用方法的 <span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法有意设计为通用方法。它不要求<span class="token keyword">this</span>值是数组对象，所以它可以被用于其他类型的对象 <span class="token punctuation">(</span>比如类数组对象<span class="token punctuation">)</span>。下面的例子展示了 在函数的 arguments 对象上调用的 <span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法。</code></pre><h5 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">   <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</code></pre></li><li><p>语法以及参数</p><pre class=" language-js"><code class="language-js">  arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>    参数    callback      在数组每一项上执行的函数，接收 <span class="token number">3</span> 个参数：        element          当前遍历到的元素。      index可选          当前遍历到的索引。      array可选          数组本身。    thisArg可选      执行回调时用作<span class="token keyword">this</span> 的对象。 </code></pre></li><li><p>返回值</p><pre class=" language-js"><code class="language-js">  数组中第一个满足所提供测试函数的元素的值，否则返回 undefined。</code></pre></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find">MDN</a></p></li></ul><h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h5><ul><li><p><strong>描述</strong></p><pre class=" language-js"><code class="language-js">  <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF<span class="token number">-16</span>代码单元值序列时构建的</code></pre></li><li><p><strong>语法及参数</strong></p><pre class=" language-js"><code class="language-js">  arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span>compareFunction<span class="token punctuation">]</span><span class="token punctuation">)</span>    参数  compareFunction 可选      用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。        firstEl          第一个用于比较的元素。      secondEl          第二个用于比较的元素。    返回值  排序后的数组。请注意，数组已原地排序，并且不进行复制。</code></pre></li><li><p><strong>注意</strong></p><pre class=" language-js"><code class="language-js">  也会影响原数组，默认会按照Unicode编码进行排序    带有compareFunction 参数时<span class="token punctuation">,</span>      如果 <span class="token function">compareFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 小于 <span class="token number">0</span> ，那么 a 会被排列到 b 之前；      如果 <span class="token function">compareFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 等于 <span class="token number">0</span> ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 <span class="token number">2003</span> 年之前的版本）；      如果 <span class="token function">compareFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 大于 <span class="token number">0</span> ， b 会被排列到 a 之前。      <span class="token function">compareFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。            、、、通俗理解      比较函数应该具有两个参数 a 和 b，其返回值如下：  若 a 小于 b，即 a <span class="token operator">-</span> b 小于零，则返回一个小于零的值，数组将按照升序排列。  若 a 等于 b，则返回 <span class="token number">0</span>。  若 a 大于 b<span class="token punctuation">,</span> 即 a <span class="token operator">-</span> b 大于零，则返回一个大于零的值，数组将按照降序排列。</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">MDN</a></p><p><a href="https://www.cnblogs.com/saifei/p/9043821.html">简单使用</a></p></li></ul><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><ul><li><p><strong>描述</strong></p><pre class=" language-js"><code class="language-js">  <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法创建一个新的数组，新数组中的元素是通过<span class="token operator">==</span>检查指定数组中符合条件<span class="token operator">==</span>的所有元素。</code></pre></li><li><p><strong>语法以及参数</strong></p><pre class=" language-js"><code class="language-js">  array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span>   必须。函数，数组中的每个元素都会执行这个函数  函数参数<span class="token punctuation">:</span>      currentValue 必须。当前元素的值      index 可选。当前元素的索引值      arr 可选。当前元素属于的数组对象  thisValue 可选。对象作为该执行回调时使用，传递给函数，用作 <span class="token string">"this"</span> 的值。      如果省略了 thisValue ，<span class="token string">"this"</span> 的值为 <span class="token string">"undefined"</span>    返回值  一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</code></pre></li><li><p><strong>总结</strong></p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//用作过滤器</span>  array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>过滤条件<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span></code></pre></li><li><p><strong>注意：</strong> filter() 不会对空数组进行检测。</p></li><li><p><strong>注意：</strong> filter() 不会改变原始数组。</p></li></ul><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><ul><li><p>语法:</p><pre class=" language-js"><code class="language-js">  <span class="token operator">-</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>preValue<span class="token punctuation">,</span> current<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>initialValue<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 箭头函数</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 回调函数</span>    <span class="token function">reduce</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 内联回调函数</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span>    arr<span class="token punctuation">:</span>当前操作的数组    <span class="token operator">==</span><span class="token operator">**</span>preValue<span class="token operator">**</span><span class="token punctuation">:</span><span class="token operator">**</span>第一次<span class="token operator">**</span>执行回调时为给定的<span class="token operator">**</span>初始值initialValue<span class="token operator">**</span><span class="token punctuation">,</span><span class="token operator">**</span>以后是上一次执行回调时的返回值<span class="token operator">**</span>。<span class="token operator">==</span>    ​<span class="token operator">==</span>备注<span class="token punctuation">:</span>若<span class="token operator">**</span>没有传入initialValue<span class="token operator">**</span><span class="token punctuation">,</span>则第一次的preValue值是数组中<span class="token operator">**</span>第一个元素的值<span class="token operator">**</span>。<span class="token operator">==</span>     <span class="token operator">**</span>current 表示当前正在处理的元素<span class="token punctuation">;</span><span class="token operator">**</span>    index 表示当前正在处理的数组元素的索引<span class="token punctuation">,</span>若传入了initialValue值<span class="token punctuation">,</span>则为<span class="token number">0</span><span class="token punctuation">,</span>否则为<span class="token number">1</span><span class="token punctuation">;</span>    array  <span class="token function">当前操作的数组</span><span class="token punctuation">(</span>就是arr<span class="token punctuation">)</span>    <span class="token operator">**</span>initialValue 表示初始值。一般做数学时设置为<span class="token number">0</span><span class="token punctuation">,</span>若为筛选最值可以不传。</code></pre></li><li><p><strong>用于数据分析</strong></p><pre class=" language-js"><code class="language-js">      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 数组求和 </span>    <span class="token comment" spellcheck="true">/* const x = arr.reduce((preValue,current)=>{      console.log(preValue,current);      return preValue+current    })    console.log(x); */</span>    <span class="token comment" spellcheck="true">// 数组中偶数的和----(条件求和)</span>    <span class="token comment" spellcheck="true">// const x = arr.reduce((preValue,current)=>preValue+(current % 2 === 0 ? current:0),0)</span>    <span class="token comment" spellcheck="true">// console.log(x);</span>    <span class="token comment" spellcheck="true">//数组中偶数有几个---(条件统计)</span>    <span class="token comment" spellcheck="true">// const x = arr.reduce((preValue,current)=>preValue+(current%2===0 ? 1:0),0)</span>    <span class="token comment" spellcheck="true">// console.log(x);</span>    <span class="token comment" spellcheck="true">// 数组中所有偶数的积</span>    <span class="token comment" spellcheck="true">// const x = arr.reduce((preValue,current)=>preValue*(current%2===0 ? current:1),1)</span>    <span class="token comment" spellcheck="true">// console.log(x);</span>    <span class="token comment" spellcheck="true">// 数组中最小值----(筛选最值)</span>    <span class="token operator">/</span><span class="token operator">*</span> <span class="token keyword">const</span> x <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>preValue<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>preValue<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>preValue<span class="token punctuation">,</span>current<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>map</strong></p><ul><li><p><strong>描述</strong></p><pre class=" language-js"><code class="language-js">  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</code></pre></li><li><p><strong>语法</strong></p><pre class=" language-js"><code class="language-js">  <span class="token keyword">var</span> new_array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//为new_array返回元素</span>        <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>参数</strong></p><pre class=" language-js"><code class="language-js">  <span class="token template-string"><span class="token string">`callback`</span></span>  生成新数组元素的函数，使用三个参数：       <span class="token template-string"><span class="token string">`currentValue`</span></span>        <span class="token template-string"><span class="token string">`callback`</span></span> 数组中正在处理的当前元素。         <span class="token template-string"><span class="token string">`index`</span></span>可选          <span class="token template-string"><span class="token string">`callback`</span></span> 数组中正在处理的当前元素的索引。      <span class="token template-string"><span class="token string">`array`</span></span>可选          <span class="token template-string"><span class="token string">`map`</span></span> 方法调用的数组。      <span class="token template-string"><span class="token string">`thisArg`</span></span>可选    执行 <span class="token template-string"><span class="token string">`callback`</span></span> 函数时值被用作<span class="token template-string"><span class="token string">`this`</span></span>。</code></pre></li><li><p><strong>返回值</strong></p><pre class=" language-js"><code class="language-js">  一个由原数组每个元素执行回调函数的结果组成的新数组。</code></pre></li><li><p>例</p><pre class=" language-js"><code class="language-js">  简单用法  <span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// pass a function to map</span>  <span class="token keyword">const</span> map1 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// expected output: Array [2, 8, 18, 32]</span></code></pre></li><li><p><strong>注意：</strong> </p><pre class=" language-js"><code class="language-js">  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 不会对空数组进行检测。  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 不会改变原始数组。</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">官方文档</a></p></li></ul></li></ul><h5 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h5><ul><li><p>该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p></li><li><p>可以将要添加的元素作为方法的参数传递，</p></li><li><p>这样这些元素将会自动添加到数组的末尾 </p></li><li><p>该方法会将数组新的长度作为返回值返回</p></li></ul><h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h5><ul><li>该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回</li></ul><h5 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h5><ul><li><p>向数组开头添加一个或多个元素，并返回新的数组长度</p></li><li><p>向前边插入元素以后，其他的元素索引会依次调整</p></li></ul><h5 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h5><p> 可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h5><p>可以用来从数组提取指定元素</p><ul><li>该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</li><li>参数：<br>1.截取开始的位置的索引,  包含  开始索引<br>2.截取结束的位置的索引,  不包含  结束索引<ul><li><p>第二个参数可以省略不写,此时会截取从开始索引往后的所有元素</p></li><li><p>索引可以传递一个负值，如果传递一个负值，则从后往前计算<br>-1 倒数第一个<br>-2 倒数第二个</p></li></ul></li></ul><h5 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h5><ul><li>描述（增删改一体化）</li></ul><pre class=" language-js"><code class="language-js">  可以用于删除数组中的指定元素    <span class="token operator">-</span> 参数：            第一个，表示开始位置的索引            第二个，表示删除的数量            第三个  及以后。。                可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</code></pre><ul><li>注意</li></ul><pre class=" language-js"><code class="language-js">  <span class="token function">使用splice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>会影响到原数组，会将指定元素从原数组中删除，被删除的元素作为返回值返回</code></pre><p>​     </p><h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><ul><li><p>可以连接两个或多个数组，并将新的数组返回</p><ul><li>该方法不会对原数组产生影响</li></ul></li></ul><h5 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h5><p>该方法可以将数组转换为一个字符串</p><ul><li>该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回</li><li>在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符</li></ul><pre class=" language-js"><code class="language-js">        如果不指定连接符，则默认使用<span class="token punctuation">,</span>作为连接符</code></pre><h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h5><p> 该方法用来反转数组（前边的去后边，后边的去前边）<br>      - 该方法会直接修改原数组</p><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">  <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法返回调用它的 String 对象中<span class="token operator">**</span>第一次出现的指定值的索引<span class="token operator">**</span>，从 <span class="token operator">**</span>fromIndex<span class="token operator">**</span> 处进行搜索。如果未找到该值，则返回 <span class="token operator">-</span><span class="token number">1</span>。</code></pre></li><li><p><strong>语法</strong></p><pre class=" language-js"><code class="language-js">  str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchValue <span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>参数</strong></p><pre class=" language-js"><code class="language-js">  searchValue      要被查找的字符串值。如果没有提供确切地提供字符串，searchValue 会被强制设置为 <span class="token string">"undefined"</span>， 然后在当前字符串中查找这个值。举个例子：<span class="token string">'undefined'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 将会返回<span class="token number">0</span>，因为 undefined 在位置<span class="token number">0</span>处被找到，但是 <span class="token string">'undefine'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 将会返回 <span class="token operator">-</span><span class="token number">1</span> ，因为字符串 <span class="token string">'undefined'</span> 未被找到。        fromIndex 可选      数字表示开始查找的位置。可以是任意整数，默认值为 <span class="token number">0</span>。如果 fromIndex 的值小于 <span class="token number">0</span>，或者大于 str<span class="token punctuation">.</span>length ，那么查找分别从 <span class="token number">0</span> 和str<span class="token punctuation">.</span>length 开始。（译者注：  fromIndex 的值小于 <span class="token number">0</span>，等同于为空情况； fromIndex 的值大于或等于 str<span class="token punctuation">.</span>length ，那么结果会直接返回 <span class="token operator">-</span><span class="token number">1</span> 。）举个例子，<span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> 返回 <span class="token number">4</span> ，因为它是从位置<span class="token number">0</span>处开始查找，然后 o 在位置<span class="token number">4</span>处被找到。另一方面，<span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> （或 fromIndex 填入任何大于<span class="token number">11</span>的值）将会返回 <span class="token operator">-</span><span class="token number">1</span> ，因为开始查找的位置<span class="token number">11</span>处，已经是这个字符串的结尾了。 </code></pre></li><li><p><strong>返回值</strong></p><pre class=" language-js"><code class="language-js">  查找的字符串 searchValue 的第一次出现的索引，如果没有找到，则返回 <span class="token operator">-</span><span class="token number">1</span>。    若被查找的字符串 searchValue 是一个空字符串，将会产生“奇怪”的结果。如果 fromIndex 值为空，或者 fromIndex 值小于被查找的字符串的长度，返回值和以下的 fromIndex 值一样：              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 0</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 0</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 3</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 8</span>                另外，如果 fromIndex 值大于等于字符串的长度，将会直接返回字符串的长度（str<span class="token punctuation">.</span>length）：              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 11</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 11</span>              <span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 11</span>                从前面一个例子可以看出，被查找的值是空值时，Javascript将直接返回指定的索引值。从后面一个例子可以看出，被查找的值是空值时，Javascript将直接返回字符串的长度。</code></pre></li><li><p><strong>注意</strong></p><pre class=" language-js"><code class="language-js">  字符串中的字符被从左向右索引。第一个字符的索引（index）是 <span class="token number">0</span>，变量名为 stringName 的字符串的最后一个字符的索引是 stringName<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    indexOf 方法是区分大小写的    注意 <span class="token number">0</span> 并不会被当成 <span class="token boolean">true</span> ，<span class="token operator">-</span><span class="token number">1</span> 不会被当成 <span class="token boolean">false</span> 。所以当检测某个字符串是否存在于另一个字符串中时，可使用下面的方法：          <span class="token string">'Blue Whale'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Blue'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">// true</span>          <span class="token string">'Blue Whale'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Bloe'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">// false</span>          <span class="token operator">~</span><span class="token punctuation">(</span><span class="token string">'Blue Whale'</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Bloe'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 0, 这是一种错误用法</span></code></pre></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">MDN文档</a></p></li></ul><h5 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h5><ul><li><p>描述</p><pre class=" language-js"><code class="language-js">  <span class="token template-string"><span class="token string">`trim()`</span></span>方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 <span class="token punctuation">(</span>space<span class="token punctuation">,</span> tab<span class="token punctuation">,</span> no<span class="token operator">-</span><span class="token keyword">break</span> space 等<span class="token punctuation">)</span> 以及所有行终止符字符（如 LF，CR等）。</code></pre><pre class=" language-js"><code class="language-js">  <span class="token template-string"><span class="token string">`trim()`</span></span> 方法返回一个从两头去掉空白字符的字符串，并不影响原字符串本身。</code></pre></li><li><p>语法</p><pre class=" language-js"><code class="language-js">  str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>返回值</p><pre class=" language-js"><code class="language-js">  一个代表调用字符串两端去掉空白的新字符串。</code></pre></li><li><p>兼容久环境、</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><h4 id="元素的大小和位置"><a href="#元素的大小和位置" class="headerlink" title="元素的大小和位置"></a>元素的大小和位置</h4><h5 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h5><ul><li><p><strong>client</strong>系列</p><pre class=" language-js"><code class="language-js">    页可见区域宽： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>    网页可见区域高： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span></code></pre></li><li><p><strong>offset</strong>系列</p><pre class=" language-js"><code class="language-js">    网页可见区域宽： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth   <span class="token punctuation">(</span>包括边线的宽<span class="token punctuation">)</span><span class="token punctuation">;</span>    网页可见区域高： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetHeight <span class="token punctuation">(</span>包括边线的宽<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>scroll</strong>系列</p><pre class=" language-js"><code class="language-js">    网页正文全文宽： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span>    网页正文全文高： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>    网页被卷去的高： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    网页被卷去的左： document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span></code></pre></li></ul><h5 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h5><pre class=" language-js"><code class="language-js">  网页正文部分上： window<span class="token punctuation">.</span>screenTop<span class="token punctuation">;</span>  网页正文部分左： window<span class="token punctuation">.</span>screenLeft<span class="token punctuation">;</span>  屏幕分辨率的高： window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height<span class="token punctuation">;</span>  屏幕分辨率的宽： window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  屏幕可用工作区高度： window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>availHeight<span class="token punctuation">;</span></code></pre><h4 id="React打基础"><a href="#React打基础" class="headerlink" title="React打基础"></a>React打基础</h4><p>js &#x3D;&gt; jsx</p><pre class=" language-js"><code class="language-js">map<span class="token operator">-</span> 参数<span class="token operator">-</span> <span class="token template-string"><span class="token string">`callback`</span></span>  <span class="token operator">-</span> 生成新数组元素的函数，使用三个参数：     <span class="token operator">-</span> <span class="token template-string"><span class="token string">`currentValue`</span></span>    <span class="token operator">-</span>   <span class="token template-string"><span class="token string">`callback`</span></span> 数组中正在处理的当前元素。   <span class="token operator">-</span> <span class="token template-string"><span class="token string">`index`</span></span>可选      <span class="token operator">-</span> <span class="token template-string"><span class="token string">`callback`</span></span> 数组中正在处理的当前元素的索引。    <span class="token operator">-</span> <span class="token template-string"><span class="token string">`array`</span></span>可选      <span class="token operator">-</span> <span class="token template-string"><span class="token string">`map`</span></span> 方法调用的数组。  <span class="token operator">-</span> <span class="token template-string"><span class="token string">`thisArg`</span></span>可选  <span class="token operator">-</span> 执行 <span class="token template-string"><span class="token string">`callback`</span></span> 函数时值被用作<span class="token template-string"><span class="token string">`this`</span></span>。  </code></pre><h4 id="Vue打基础"><a href="#Vue打基础" class="headerlink" title="Vue打基础"></a>Vue打基础</h4><p>js &#x3D;&gt; vue</p><pre class=" language-js"><code class="language-js">object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//返回的是参数对象的属性组成的数组，可以用数组的方法forEach去遍历对象</span><span class="token comment" spellcheck="true">//例如</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Object.defineProperty</span>        <span class="token comment" spellcheck="true">// 这个方法在为对象添加或者修改     属性为响应式属性</span>        <span class="token comment" spellcheck="true">/*         语法            Object.defineProperty(obj, prop, descriptor)              参数                obj                    要定义属性的对象。                prop                    要定义或修改的属性的名称或 Symbol 。                descriptor                    要定义或修改的属性描述符。               返回值                    被传递给函数的对象。        */</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
