<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTTP</title>
      <link href="/2022/05/14/http/"/>
      <url>/2022/05/14/http/</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。这个简单模型是早期Web成功的有功之臣，因为它使开发和部署非常地直截了当。                    ————百度</li></ul><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h5 id="利用http模块创建一个简单的服务器"><a href="#利用http模块创建一个简单的服务器" class="headerlink" title="利用http模块创建一个简单的服务器"></a>利用http模块创建一个简单的服务器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法 创建服务器对象</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    * request 请求报文的封装对象</span></span><br><span class="line"><span class="comment">    * response 响应报文的封装对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request,response</span>)&#123;</span><br><span class="line"></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello HTTP server&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3.监听端口  启动服务</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    端口号    计算的服务端口窗口  总共65536个  8000 3000 9000 8080</span></span><br><span class="line"><span class="comment">    默认端口 80 </span></span><br><span class="line"><span class="comment">    ctrl + c 停止服务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已经启动，端口 8000 坚挺中......&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="将服务器拆分为-不同组件"><a href="#将服务器拆分为-不同组件" class="headerlink" title="将服务器拆分为 不同组件"></a>将服务器拆分为 不同组件</h5><p>  主函数 <strong><code>app.js</code></strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const server = require(&#x27;./server&#x27;);</span><br><span class="line"></span><br><span class="line">server(8000);</span><br></pre></td></tr></table></figure><p> 回调函数 <strong><code>callback.js</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = (request,response) =&gt;&#123;</span><br><span class="line">    response.end(&#x27;Hello NPM&#x27;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 服务对象 <strong><code>server.js</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function (port) &#123;</span><br><span class="line">    const http = require(&#x27;http&#x27;);</span><br><span class="line"></span><br><span class="line">    // 2.调用方法 创建服务器对象</span><br><span class="line">    /* </span><br><span class="line">    * request 请求报文的封装对象</span><br><span class="line">    * response 响应报文的封装对象</span><br><span class="line">    */</span><br><span class="line">    const callback = require(&#x27;./callback&#x27;);</span><br><span class="line">    const serverCb = require(&#x27;./serverOkCallback&#x27;)</span><br><span class="line">    const server = http.createServer(callback);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 3.监听端口  启动服务</span><br><span class="line">    server.listen(port, serverCb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  监听端口 <strong><code>serverOkCallback.js</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = () =&gt;&#123;</span><br><span class="line">    console.log(&#x27;服务器已经启动，端口坚挺中......&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  在<code>server.js</code>中我们可以做很多事情</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 获取请求报文  GET    /s?wd=关键字 (URL)   HTTP/1.1</span><br><span class="line">// 1.请求的类型</span><br><span class="line">// console.log(request.method);</span><br><span class="line">// console.log(request.method);</span><br><span class="line"></span><br><span class="line">// 2.请求的URL</span><br><span class="line">// console.log(request.url);</span><br><span class="line"></span><br><span class="line">// 3.HTTP协议版本</span><br><span class="line">// console.log(request.httpVersion);</span><br><span class="line"></span><br><span class="line">// 4.获取URL中的路径部分</span><br><span class="line">// 二 调用方法获取参数</span><br><span class="line">// console.log(url.parse(request.url).pathname); </span><br><span class="line"></span><br><span class="line">// 5.获取查询字符串</span><br><span class="line">// console.log(url.parse(request.url,true).query);</span><br><span class="line"></span><br><span class="line">// 6.请求头信息</span><br><span class="line">// console.log(request.headers);</span><br></pre></td></tr></table></figure><p>  也可以添加事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 提取请求体数据 POST请求</span><br><span class="line"></span><br><span class="line">// 1.声明一个字符串变量</span><br><span class="line">let body = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">// 2.绑定data事件</span><br><span class="line">request.on(&#x27;data&#x27;,chunk =&gt;&#123;</span><br><span class="line">    // 拼接</span><br><span class="line">    body += chunk.toString();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 3.绑定end事件</span><br><span class="line">request.on(&#x27;end&#x27;,()=&gt;&#123;</span><br><span class="line">    console.log(body);</span><br><span class="line">    // 调用 qs 对象的方法</span><br><span class="line">    console.log(qs.parse(body));</span><br><span class="line">    response.end(&#x27;body recevie&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2022/05/14/zheng-ze-biao-da-shi/"/>
      <url>/2022/05/14/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="/.io//zheng-ze-biao-da-shi%5Czhengze.png" alt="正则表达式"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript</title>
      <link href="/2022/05/13/javascript/"/>
      <url>/2022/05/13/javascript/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="元素的大小和位置"><a href="#元素的大小和位置" class="headerlink" title="元素的大小和位置"></a>元素的大小和位置</h4><h5 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h5><ul><li><p><strong>client</strong>系列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">页可见区域宽： document.body.clientWidth;</span><br><span class="line">网页可见区域高： document.body.clientHeight;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>offset</strong>系列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">网页可见区域宽： document.body.offsetWidth   (包括边线的宽);</span><br><span class="line">网页可见区域高： document.body.offsetHeight (包括边线的宽);</span><br></pre></td></tr></table></figure></li><li><p><strong>scroll</strong>系列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">网页正文全文宽： document.body.scrollWidth;</span><br><span class="line">网页正文全文高： document.body.scrollHeight;</span><br><span class="line">网页被卷去的高： document.body.scrollTop;</span><br><span class="line">网页被卷去的左： document.body.scrollLeft;</span><br></pre></td></tr></table></figure></li></ul><h5 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h5>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">网页正文部分上： window.screenTop;</span><br><span class="line">网页正文部分左： window.screenLeft;</span><br><span class="line">屏幕分辨率的高： window.screen.height;</span><br><span class="line">屏幕分辨率的宽： window.screen.width;</span><br><span class="line">屏幕可用工作区高度： window.screen.availHeight;</span><br></pre></td></tr></table></figure><h4 id="遍历相关"><a href="#遍历相关" class="headerlink" title="遍历相关"></a>遍历相关</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">for</span>          最基本的循环    用来专门遍历数组的      可以使用<span class="keyword">break</span>和<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">for</span> <span class="keyword">in</span>       专门用来遍历对象的属性的，这个属性能遍历到还是遍历不到要看这个属性是不是</span><br><span class="line">  ​     <span class="comment">// for in 效率最低，因为除了遍历自身以外还要遍历原型</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">for</span> <span class="keyword">of</span>       </span><br><span class="line">  - ​     <span class="comment">// 专门遍历可迭代的数据  ...  (能用可迭代，就用三点) </span></span><br><span class="line">  - ​     <span class="comment">// 数组有迭代器</span></span><br><span class="line">  - ​     <span class="comment">// 对象没有</span></span><br><span class="line"></span><br><span class="line">- forEach      是一个数组的方法，效率极高  但是不可以使用<span class="keyword">break</span>和<span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h4 id="React打基础"><a href="#React打基础" class="headerlink" title="React打基础"></a>React打基础</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">map</span><br><span class="line">- 参数</span><br><span class="line">- `callback`</span><br><span class="line">  - 生成新数组元素的函数，使用三个参数：   </span><br><span class="line">  - `currentValue`</span><br><span class="line">    -   `callback` 数组中正在处理的当前元素。 </span><br><span class="line">  - `index`可选  </span><br><span class="line">    - `callback` 数组中正在处理的当前元素的索引。  </span><br><span class="line">  - `array`可选  </span><br><span class="line">    - `map` 方法调用的数组。  </span><br><span class="line">- `thisArg`可选</span><br><span class="line">  - 执行 `callback` 函数时值被用作`this`。</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h4 id="Vue打基础"><a href="#Vue打基础" class="headerlink" title="Vue打基础"></a>Vue打基础</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">object.<span class="title function_">keys</span>(obj)   <span class="comment">//返回的是参数对象的属性组成的数组，可以用数组的方法forEach去遍历对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item,obj[item]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.defineProperty</span></span><br><span class="line">        <span class="comment">// 这个方法在为对象添加或者修改     属性为响应式属性</span></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        语法</span></span><br><span class="line"><span class="comment">            Object.defineProperty(obj, prop, descriptor)</span></span><br><span class="line"><span class="comment">              参数</span></span><br><span class="line"><span class="comment">                obj</span></span><br><span class="line"><span class="comment">                    要定义属性的对象。</span></span><br><span class="line"><span class="comment">                prop</span></span><br><span class="line"><span class="comment">                    要定义或修改的属性的名称或 Symbol 。</span></span><br><span class="line"><span class="comment">                descriptor</span></span><br><span class="line"><span class="comment">                    要定义或修改的属性描述符。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">               返回值</span></span><br><span class="line"><span class="comment">                    被传递给函数的对象。</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><h5 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h5><h5 id="every"><a href="#every" class="headerlink" title="every"></a>every</h5><h5 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h5><ul><li><p>描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(string, radix)   解析一个字符串并返回指定基数的十进制整数， radix 是2-36之间的整数，表示被解析字符串的基数。</span><br></pre></td></tr></table></figure></li><li><p>语法参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parseInt(string, radix);</span><br><span class="line">参数</span><br><span class="line"></span><br><span class="line">string</span><br><span class="line">要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  ToString 抽象操作)。字符串开头的空白符将会被忽略。</span><br><span class="line">radix 可选</span><br><span class="line">从 2 到 36，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值！文章后面的描述解释了当参数 radix 不传时该函数的具体行为。</span><br></pre></td></tr></table></figure></li><li><p>返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">从给定的字符串中解析出的一个整数。</span><br><span class="line"></span><br><span class="line">或者 NaN，当</span><br><span class="line">radix 小于 2 或大于 36 ，或</span><br><span class="line">第一个非空格字符不能转换为数字。</span><br><span class="line">parseInt(&#x27;123&#x27;, 5) // 将&#x27;123&#x27;看作5进制数，返回十进制数38 =&gt; 1*5^2 + 2*5^1 + 3*5^0 = 38</span><br></pre></td></tr></table></figure></li></ul><h5 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h5><ul><li><p>描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 `true`，否则返回 `false`。</span><br></pre></td></tr></table></figure><ul><li>语法以及参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(valueToFind[, fromIndex])</span><br><span class="line"></span><br><span class="line">valueToFind</span><br><span class="line">    需要查找的元素值。</span><br><span class="line">    </span><br><span class="line">    备注：使用 includes()比较字符串和字符时是区分大小写的。</span><br><span class="line">    </span><br><span class="line">fromIndex 可选</span><br><span class="line">    从fromIndex 索引处开始查找 valueToFind。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜 （即使从末尾开始往前跳 fromIndex 的绝对值个索引，然后往后搜寻）。默认为 0。</span><br></pre></td></tr></table></figure><ul><li>返回值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回值</span><br><span class="line"></span><br><span class="line">返回一个布尔值 Boolean 。</span><br><span class="line">]如果在数组中（或 fromIndex 指定的范围中）找到了 valueToFind，则返回 true，否则返回 false。</span><br><span class="line">0 的值将全部视为相等，与符号无关（即 -0 与 0 和 +0 相等），</span><br><span class="line">但 false 不被认为与 0 相等。</span><br><span class="line">备注： 技术上来讲，includes() 使用 零值相等 算法来确定是否找到给定的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].includes(2);     // true</span><br><span class="line">[1, 2, 3].includes(4);     // false</span><br><span class="line">[1, 2, 3].includes(3, 3);  // false</span><br><span class="line">[1, 2, 3].includes(3, -1); // true</span><br><span class="line">[1, 2, NaN].includes(NaN); // true</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>注意</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fromIndex 大于等于数组长度</span><br><span class="line">如果 fromIndex 大于等于数组的长度，则将直接返回 false，且不搜索该数组。</span><br><span class="line"></span><br><span class="line">计算出的索引小于 0</span><br><span class="line">如果 fromIndex 为负值，计算出的索引将作为开始搜索searchElement的位置。如果计算出的索引小于 0，则整个数组都会被搜索。</span><br><span class="line"></span><br><span class="line">作为通用方法的 includes()</span><br><span class="line">includes() 方法有意设计为通用方法。它不要求this值是数组对象，所以它可以被用于其他类型的对象 (比如类数组对象)。下面的例子展示了 在函数的 arguments 对象上调用的 includes() 方法。</span><br></pre></td></tr></table></figure><h5 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h5><ul><li><p>描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</span><br></pre></td></tr></table></figure></li><li><p>语法以及参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">arr.find(callback[, thisArg])</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line"></span><br><span class="line">callback</span><br><span class="line">    在数组每一项上执行的函数，接收 3 个参数：</span><br><span class="line"></span><br><span class="line">    element</span><br><span class="line">        当前遍历到的元素。</span><br><span class="line">    index可选</span><br><span class="line">        当前遍历到的索引。</span><br><span class="line">    array可选</span><br><span class="line">        数组本身。</span><br><span class="line"></span><br><span class="line">thisArg可选</span><br><span class="line">    执行回调时用作this 的对象。 </span><br></pre></td></tr></table></figure></li><li><p>返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组中第一个满足所提供测试函数的元素的值，否则返回 undefined。</span><br></pre></td></tr></table></figure></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find">MDN</a></p></li></ul><h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h5><ul><li><p><strong>描述</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort() 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</span><br></pre></td></tr></table></figure></li><li><p><strong>语法及参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr.sort([compareFunction])</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">compareFunction 可选</span><br><span class="line">    用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。</span><br><span class="line"></span><br><span class="line">    firstEl</span><br><span class="line">        第一个用于比较的元素。</span><br><span class="line">    secondEl</span><br><span class="line">        第二个用于比较的元素。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">排序后的数组。请注意，数组已原地排序，并且不进行复制。</span><br></pre></td></tr></table></figure></li><li><p><strong>注意</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- 也会影响原数组，默认会按照Unicode编码进行排序</span><br><span class="line"></span><br><span class="line">带有compareFunction 参数时,</span><br><span class="line">    如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</span><br><span class="line">    如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</span><br><span class="line">    如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</span><br><span class="line">    compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</span><br><span class="line">    </span><br><span class="line">    、、、通俗理解</span><br><span class="line">    比较函数应该具有两个参数 a 和 b，其返回值如下：</span><br><span class="line">若 a 小于 b，即 a - b 小于零，则返回一个小于零的值，数组将按照升序排列。</span><br><span class="line">若 a 等于 b，则返回 0。</span><br><span class="line">若 a 大于 b, 即 a - b 大于零，则返回一个大于零的值，数组将按照降序排列。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">MDN</a></p><p><a href="https://www.cnblogs.com/saifei/p/9043821.html">简单使用</a></p></li></ul><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><ul><li><p><strong>描述</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter() 方法创建一个新的数组，新数组中的元素是通过==检查指定数组中符合条件==的所有元素。</span><br></pre></td></tr></table></figure></li><li><p><strong>语法以及参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">array.filter(function(currentValue,index,arr), thisValue)</span><br><span class="line"></span><br><span class="line">function(currentValue, index,arr) </span><br><span class="line">必须。函数，数组中的每个元素都会执行这个函数</span><br><span class="line">函数参数:</span><br><span class="line">currentValue 必须。当前元素的值</span><br><span class="line">index 可选。当前元素的索引值</span><br><span class="line">arr 可选。当前元素属于的数组对象</span><br><span class="line">thisValue 可选。对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。</span><br><span class="line">如果省略了 thisValue ，&quot;this&quot; 的值为 &quot;undefined&quot;</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</span><br></pre></td></tr></table></figure></li><li><p><strong>总结</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//用作过滤器</span><br><span class="line">array.filter((currentValue,index,arr) =&gt; &#123;</span><br><span class="line">return (过滤条件)</span><br><span class="line">&#125;, thisValue)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>注意：</strong> filter() 不会对空数组进行检测。</p></li><li><p><strong>注意：</strong> filter() 不会改变原始数组。</p></li></ul><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><ul><li><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- arr.reduce((preValue, current, index, arr)=&gt;f),initialValue)</span><br><span class="line"></span><br><span class="line">  // 箭头函数</span><br><span class="line">  reduce((previousValue, currentValue) =&gt; &#123; /* ... */ &#125; )</span><br><span class="line">  reduce((previousValue, currentValue, currentIndex) =&gt; &#123; /* ... */ &#125; )</span><br><span class="line">  reduce((previousValue, currentValue, currentIndex, array) =&gt; &#123; /* ... */ &#125; )</span><br><span class="line">  reduce((previousValue, currentValue, currentIndex, array) =&gt; &#123; /* ... */ &#125;, initialValue)</span><br><span class="line"></span><br><span class="line">  // 回调函数</span><br><span class="line">  reduce(callbackFn)</span><br><span class="line">  reduce(callbackFn, initialValue)</span><br><span class="line"></span><br><span class="line">  // 内联回调函数</span><br><span class="line">  reduce(function(previousValue, currentValue) &#123; /* ... */ &#125;)</span><br><span class="line">  reduce(function(previousValue, currentValue, currentIndex) &#123; /* ... */ &#125;)</span><br><span class="line">  reduce(function(previousValue, currentValue, currentIndex, array) &#123; /* ... */ &#125;)</span><br><span class="line">  reduce(function(previousValue, currentValue, currentIndex, array) &#123; /* ... */ &#125;, initialValue)</span><br><span class="line"></span><br><span class="line">arr:当前操作的数组</span><br><span class="line"></span><br><span class="line">==**preValue**:**第一次**执行回调时为给定的**初始值initialValue**,**以后是上一次执行回调时的返回值**。==</span><br><span class="line"></span><br><span class="line">​==备注:若**没有传入initialValue**,则第一次的preValue值是数组中**第一个元素的值**。== </span><br><span class="line"></span><br><span class="line">**current 表示当前正在处理的元素;**</span><br><span class="line"></span><br><span class="line">index 表示当前正在处理的数组元素的索引,若传入了initialValue值,则为0,否则为1;</span><br><span class="line"></span><br><span class="line">array  当前操作的数组(就是arr)</span><br><span class="line"></span><br><span class="line">**initialValue 表示初始值。一般做数学时设置为0,若为筛选最值可以不传。</span><br></pre></td></tr></table></figure></li><li><p><strong>用于数据分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5,6,7,8,9,10,9]</span><br><span class="line">  </span><br><span class="line">           // 数组求和 </span><br><span class="line">           /* const x = arr.reduce((preValue,current)=&gt;&#123;</span><br><span class="line">             console.log(preValue,current);</span><br><span class="line">             return preValue+current</span><br><span class="line">           &#125;)</span><br><span class="line">           console.log(x); */</span><br><span class="line">  </span><br><span class="line">           // 数组中偶数的和----(条件求和)</span><br><span class="line">           // const x = arr.reduce((preValue,current)=&gt;preValue+(current % 2 === 0 ? current:0),0)</span><br><span class="line">           // console.log(x);</span><br><span class="line">  </span><br><span class="line">           //数组中偶数有几个---(条件统计)</span><br><span class="line">           // const x = arr.reduce((preValue,current)=&gt;preValue+(current%2===0 ? 1:0),0)</span><br><span class="line">           // console.log(x);</span><br><span class="line">  </span><br><span class="line">           // 数组中所有偶数的积</span><br><span class="line">           // const x = arr.reduce((preValue,current)=&gt;preValue*(current%2===0 ? current:1),1)</span><br><span class="line">           // console.log(x);</span><br><span class="line">  </span><br><span class="line">           // 数组中最小值----(筛选最值)</span><br><span class="line">           /* const x = arr.reduce((preValue,current)=&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               console.log(preValue,current);</span><br><span class="line">               return Math.max(preValue,current)</span><br><span class="line">           &#125;,1)</span><br><span class="line">           console.log(x);</span><br></pre></td></tr></table></figure></li><li><p><strong>map</strong></p><ul><li><p><strong>描述</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map() 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</span><br></pre></td></tr></table></figure></li><li><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.<span class="title function_">map</span>(<span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">currentValue[, index[, array]]</span>) &#123;</span><br><span class="line"> <span class="comment">//为new_array返回元素</span></span><br><span class="line">    </span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">`callback`</span><br><span class="line">生成新数组元素的函数，使用三个参数：   </span><br><span class="line"></span><br><span class="line">`currentValue`</span><br><span class="line"></span><br><span class="line">`callback` 数组中正在处理的当前元素。 </span><br><span class="line"></span><br><span class="line">`index`可选  </span><br><span class="line"></span><br><span class="line">`callback` 数组中正在处理的当前元素的索引。  </span><br><span class="line"></span><br><span class="line">`array`可选  </span><br><span class="line"></span><br><span class="line">`map` 方法调用的数组。  </span><br><span class="line"></span><br><span class="line">`thisArg`可选</span><br><span class="line"></span><br><span class="line">执行 `callback` 函数时值被用作`this`。</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个由原数组每个元素执行回调函数的结果组成的新数组。</span><br></pre></td></tr></table></figure></li><li><p>例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">简单用法</span><br><span class="line">const array1 = [1, 4, 9, 16];</span><br><span class="line"></span><br><span class="line">// pass a function to map</span><br><span class="line">const map1 = array1.map(x =&gt; x * 2);</span><br><span class="line"></span><br><span class="line">console.log(map1);</span><br><span class="line">// expected output: Array [2, 8, 18, 32]</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map() 不会对空数组进行检测。</span><br><span class="line">map() 不会改变原始数组。</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">官方文档</a></p></li></ul></li></ul><h5 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h5><ul><li><p>该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p></li><li><p>可以将要添加的元素作为方法的参数传递，</p></li><li><p>这样这些元素将会自动添加到数组的末尾 </p></li><li><p>该方法会将数组新的长度作为返回值返回</p></li></ul><h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h5><ul><li>该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回</li></ul><h5 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h5><ul><li><p>向数组开头添加一个或多个元素，并返回新的数组长度</p></li><li><p>向前边插入元素以后，其他的元素索引会依次调整</p></li></ul><h5 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h5><p> 可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h5><p> 可以用来从数组提取指定元素<br>      - 该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回<br>      - 参数：<br>            1.截取开始的位置的索引,  包含  开始索引<br>            2.截取结束的位置的索引,  不包含  结束索引<br>                - 第二个参数可以省略不写,此时会截取从开始索引往后的所有元素<br>              - 索引可以传递一个负值，如果传递一个负值，则从后往前计算<br>                    -1 倒数第一个<br>                    -2 倒数第二个</p><h5 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h5><ul><li><p>描述（增删改一体化）</p><pre><code>可以用于删除数组中的指定元素- 参数：          第一个，表示开始位置的索引          第二个，表示删除的数量          第三个  及以后。。              可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</code></pre><ul><li><p>注意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用splice()会影响到原数组，会将指定元素从原数组中删除，被删除的元素作为返回值返回</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><ul><li><p>可以连接两个或多个数组，并将新的数组返回</p><ul><li>该方法不会对原数组产生影响</li></ul></li></ul><h5 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h5><p> 该方法可以将数组转换为一个字符串</p><ul><li>该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回</li><li>在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果不指定连接符，则默认使用,作为连接符</span><br></pre></td></tr></table></figure><h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h5><p> 该方法用来反转数组（前边的去后边，后边的去前边）<br>      - 该方法会直接修改原数组</p><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h5><ul><li><p>描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf()方法返回调用它的 String 对象中**第一次出现的指定值的索引**，从 **fromIndex** 处进行搜索。如果未找到该值，则返回 -1。</span><br></pre></td></tr></table></figure></li><li><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.indexOf(searchValue [, fromIndex])</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">searchValue</span><br><span class="line">    要被查找的字符串值。如果没有提供确切地提供字符串，searchValue 会被强制设置为 &quot;undefined&quot;， 然后在当前字符串中查找这个值。举个例子：&#x27;undefined&#x27;.indexOf() 将会返回0，因为 undefined 在位置0处被找到，但是 &#x27;undefine&#x27;.indexOf() 将会返回 -1 ，因为字符串 &#x27;undefined&#x27; 未被找到。</span><br><span class="line">    </span><br><span class="line">fromIndex 可选</span><br><span class="line">    数字表示开始查找的位置。可以是任意整数，默认值为 0。如果 fromIndex 的值小于 0，或者大于 str.length ，那么查找分别从 0 和str.length 开始。（译者注：  fromIndex 的值小于 0，等同于为空情况； fromIndex 的值大于或等于 str.length ，那么结果会直接返回 -1 。）举个例子，&#x27;hello world&#x27;.indexOf(&#x27;o&#x27;, -5) 返回 4 ，因为它是从位置0处开始查找，然后 o 在位置4处被找到。另一方面，&#x27;hello world&#x27;.indexOf(&#x27;o&#x27;, 11) （或 fromIndex 填入任何大于11的值）将会返回 -1 ，因为开始查找的位置11处，已经是这个字符串的结尾了。 </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">查找的字符串 searchValue 的第一次出现的索引，如果没有找到，则返回 -1。</span><br><span class="line"></span><br><span class="line">若被查找的字符串 searchValue 是一个空字符串，将会产生“奇怪”的结果。如果 fromIndex 值为空，或者 fromIndex 值小于被查找的字符串的长度，返回值和以下的 fromIndex 值一样：</span><br><span class="line">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;) // 返回 0</span><br><span class="line">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 0) // 返回 0</span><br><span class="line">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 3) // 返回 3</span><br><span class="line">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 8) // 返回 8</span><br><span class="line"></span><br><span class="line">另外，如果 fromIndex 值大于等于字符串的长度，将会直接返回字符串的长度（str.length）：</span><br><span class="line">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 11) // 返回 11</span><br><span class="line">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 13) // 返回 11</span><br><span class="line">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 22) // 返回 11</span><br><span class="line"></span><br><span class="line">从前面一个例子可以看出，被查找的值是空值时，Javascript将直接返回指定的索引值。从后面一个例子可以看出，被查找的值是空值时，Javascript将直接返回字符串的长度。</span><br></pre></td></tr></table></figure></li><li><p><strong>注意</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符串中的字符被从左向右索引。第一个字符的索引（index）是 0，变量名为 stringName 的字符串的最后一个字符的索引是 stringName.length - 1</span><br><span class="line"></span><br><span class="line">indexOf 方法是区分大小写的</span><br><span class="line"></span><br><span class="line">注意 0 并不会被当成 true ，-1 不会被当成 false 。所以当检测某个字符串是否存在于另一个字符串中时，可使用下面的方法：</span><br><span class="line">&#x27;Blue Whale&#x27;.indexOf(&#x27;Blue&#x27;) !== -1    // true</span><br><span class="line">&#x27;Blue Whale&#x27;.indexOf(&#x27;Bloe&#x27;) !== -1    // false</span><br><span class="line">~(&#x27;Blue Whale&#x27;.indexOf(&#x27;Bloe&#x27;))        // 0, 这是一种错误用法</span><br></pre></td></tr></table></figure></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">MDN文档</a></p></li></ul><h5 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h5><ul><li><p>描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**`trim()`** 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR等）。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`trim()` 方法返回一个从两头去掉空白字符的字符串，并不影响原字符串本身。</span><br></pre></td></tr></table></figure></li><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.trim()</span><br></pre></td></tr></table></figure></li><li><p>返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个代表调用字符串两端去掉空白的新字符串。</span><br></pre></td></tr></table></figure></li><li><p>兼容久环境、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (!String.prototype.trim) &#123;</span><br><span class="line">  String.prototype.trim = function () &#123;</span><br><span class="line">    return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, &#x27;&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
